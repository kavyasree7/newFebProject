/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * JoiningDetails generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`JOINING DETAILS`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`USER DETAILS`", "`HIKE`"})})
public class JoiningDetails implements Serializable {

    private Integer userId;
    private String accountId;
    private Integer userDetails;
    private Short teamMem;
    @Type(type = "DateTime")
    private LocalDateTime dateJoined;
    @Type(type = "DateTime")
    private LocalDateTime timeJoined;
    @Type(type = "DateTime")
    private LocalDateTime datetimeJoined;
    private BigInteger leavesTaken;
    @Type(type = "DateTime")
    private LocalDateTime timestampcol;
    private Double hike;
    private BigDecimal bigdecimalCol;
    private Byte byteCol;
    private Float floatColumn;
    private SalaryDetails salaryDetails;
    private UserDetails userDetailsByUserDetails;
    private Users users;

    @Id
    @GenericGenerator(name = "generator", strategy = "foreign", 
            parameters = @Parameter(name = "property", value = "users"))
    @GeneratedValue(generator = "generator")
    @Column(name = "`USER ID`", nullable = false, insertable = false, updatable = false, scale = 0, precision = 7)
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "`ACCOUNT ID`", nullable = true, length = 20)
    public String getAccountId() {
        return this.accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    @Column(name = "`USER DETAILS`", nullable = true, scale = 0, precision = 9)
    public Integer getUserDetails() {
        return this.userDetails;
    }

    public void setUserDetails(Integer userDetails) {
        this.userDetails = userDetails;
    }

    @Column(name = "`TEAM MEM`", nullable = true, scale = 0, precision = 4)
    public Short getTeamMem() {
        return this.teamMem;
    }

    public void setTeamMem(Short teamMem) {
        this.teamMem = teamMem;
    }

    @Column(name = "`DATE JOINED`", nullable = true)
    public LocalDateTime getDateJoined() {
        return this.dateJoined;
    }

    public void setDateJoined(LocalDateTime dateJoined) {
        this.dateJoined = dateJoined;
    }

    @Column(name = "`TIME JOINED`", nullable = true)
    public LocalDateTime getTimeJoined() {
        return this.timeJoined;
    }

    public void setTimeJoined(LocalDateTime timeJoined) {
        this.timeJoined = timeJoined;
    }

    @Column(name = "`DATETIME JOINED`", nullable = true)
    public LocalDateTime getDatetimeJoined() {
        return this.datetimeJoined;
    }

    public void setDatetimeJoined(LocalDateTime datetimeJoined) {
        this.datetimeJoined = datetimeJoined;
    }

    @Column(name = "`LEAVES TAKEN`", nullable = true, scale = 0, precision = 38)
    public BigInteger getLeavesTaken() {
        return this.leavesTaken;
    }

    public void setLeavesTaken(BigInteger leavesTaken) {
        this.leavesTaken = leavesTaken;
    }

    @Column(name = "`TIMESTAMPCOL`", nullable = true)
    public LocalDateTime getTimestampcol() {
        return this.timestampcol;
    }

    public void setTimestampcol(LocalDateTime timestampcol) {
        this.timestampcol = timestampcol;
    }

    @Column(name = "`HIKE`", nullable = true, scale = 9, precision = 16)
    public Double getHike() {
        return this.hike;
    }

    public void setHike(Double hike) {
        this.hike = hike;
    }

    @Column(name = "`BIGDECIMAL COL`", nullable = true, scale = 18, precision = 34)
    public BigDecimal getBigdecimalCol() {
        return this.bigdecimalCol;
    }

    public void setBigdecimalCol(BigDecimal bigdecimalCol) {
        this.bigdecimalCol = bigdecimalCol;
    }

    @Column(name = "`BYTE COL`", nullable = true, scale = 0, precision = 2)
    public Byte getByteCol() {
        return this.byteCol;
    }

    public void setByteCol(Byte byteCol) {
        this.byteCol = byteCol;
    }

    @Column(name = "`FLOAT COLUMN`", nullable = true, scale = 4, precision = 6)
    public Float getFloatColumn() {
        return this.floatColumn;
    }

    public void setFloatColumn(Float floatColumn) {
        this.floatColumn = floatColumn;
    }

    
    
    public SalaryDetails getSalaryDetails() {
        return this.salaryDetails;
    }

    public void setSalaryDetails(SalaryDetails salaryDetails) {
        if(salaryDetails != null) {
            this.accountId = salaryDetails.getAccountId();
        }

        this.salaryDetails = salaryDetails;
    }

    
    
    public UserDetails getUserDetailsByUserDetails() {
        return this.userDetailsByUserDetails;
    }

    public void setUserDetailsByUserDetails(UserDetails userDetailsByUserDetails) {
        if(userDetailsByUserDetails != null) {
            this.userDetails = userDetailsByUserDetails.getUserDetails();
        }

        this.userDetailsByUserDetails = userDetailsByUserDetails;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @PrimaryKeyJoinColumn
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userId = users.getUserid();
        }

        this.users = users;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof JoiningDetails)) return false;
        final JoiningDetails joiningDetails = (JoiningDetails) o;
        return Objects.equals(getUserId(), joiningDetails.getUserId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUserId());
    }
}

