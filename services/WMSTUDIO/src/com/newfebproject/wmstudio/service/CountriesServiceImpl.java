/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Countries;
import com.newfebproject.wmstudio.Locations;


/**
 * ServiceImpl object for domain model class Countries.
 *
 * @see Countries
 */
@Service("WMSTUDIO.CountriesService")
public class CountriesServiceImpl implements CountriesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountriesServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.LocationsService")
	private LocationsService locationsService;

    @Autowired
    @Qualifier("WMSTUDIO.CountriesDao")
    private WMGenericDao<Countries, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Countries, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Countries create(Countries countries) {
        LOGGER.debug("Creating a new Countries with information: {}", countries);
        Countries countriesCreated = this.wmGenericDao.create(countries);
        if(countriesCreated.getLocationses() != null) {
            for(Locations locationse : countriesCreated.getLocationses()) {
                locationse.setCountries(countriesCreated);
                LOGGER.debug("Creating a new child Locations with information: {}", locationse);
                locationsService.create(locationse);
            }
        }
        return countriesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Countries getById(String countriesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Countries by id: {}", countriesId);
        Countries countries = this.wmGenericDao.findById(countriesId);
        if (countries == null){
            LOGGER.debug("No Countries found with id: {}", countriesId);
            throw new EntityNotFoundException(String.valueOf(countriesId));
        }
        return countries;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Countries findById(String countriesId) {
        LOGGER.debug("Finding Countries by id: {}", countriesId);
        return this.wmGenericDao.findById(countriesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Countries update(Countries countries) throws EntityNotFoundException {
        LOGGER.debug("Updating Countries with information: {}", countries);
        this.wmGenericDao.update(countries);

        String countriesId = countries.getCountryId();

        return this.wmGenericDao.findById(countriesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Countries delete(String countriesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Countries with id: {}", countriesId);
        Countries deleted = this.wmGenericDao.findById(countriesId);
        if (deleted == null) {
            LOGGER.debug("No Countries found with id: {}", countriesId);
            throw new EntityNotFoundException(String.valueOf(countriesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Countries> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Countries> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Countries to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Locations> findAssociatedLocationses(String countryId, Pageable pageable) {
        LOGGER.debug("Fetching all associated locationses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("countries.countryId = '" + countryId + "'");

        return locationsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LocationsService instance
	 */
	protected void setLocationsService(LocationsService service) {
        this.locationsService = service;
    }

}

