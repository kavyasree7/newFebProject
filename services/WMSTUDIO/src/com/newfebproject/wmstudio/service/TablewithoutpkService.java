/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Tablewithoutpk;
import com.newfebproject.wmstudio.TablewithoutpkId;

/**
 * Service object for domain model class {@link Tablewithoutpk}.
 */
public interface TablewithoutpkService {

    /**
     * Creates a new Tablewithoutpk. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Tablewithoutpk if any.
     *
     * @param tablewithoutpk Details of the Tablewithoutpk to be created; value cannot be null.
     * @return The newly created Tablewithoutpk.
     */
	Tablewithoutpk create(Tablewithoutpk tablewithoutpk);


	/**
	 * Returns Tablewithoutpk by given id if exists.
	 *
	 * @param tablewithoutpkId The id of the Tablewithoutpk to get; value cannot be null.
	 * @return Tablewithoutpk associated with the given tablewithoutpkId.
     * @throws EntityNotFoundException If no Tablewithoutpk is found.
	 */
	Tablewithoutpk getById(TablewithoutpkId tablewithoutpkId) throws EntityNotFoundException;

    /**
	 * Find and return the Tablewithoutpk by given id if exists, returns null otherwise.
	 *
	 * @param tablewithoutpkId The id of the Tablewithoutpk to get; value cannot be null.
	 * @return Tablewithoutpk associated with the given tablewithoutpkId.
	 */
	Tablewithoutpk findById(TablewithoutpkId tablewithoutpkId);

    /**
	 * Find and return the Tablewithoutpk for given uniqueColumn  if exists.
	 *
	 * @param uniqueColumn value of uniqueColumn; value cannot be null.
	 * @return Tablewithoutpk associated with the given inputs.
     * @throws EntityNotFoundException if no matching Tablewithoutpk found.
	 */
    Tablewithoutpk getByUniqueColumn(String uniqueColumn)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Tablewithoutpk. It replaces all fields of the existing Tablewithoutpk with the given tablewithoutpk.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Tablewithoutpk if any.
     *
	 * @param tablewithoutpk The details of the Tablewithoutpk to be updated; value cannot be null.
	 * @return The updated Tablewithoutpk.
	 * @throws EntityNotFoundException if no Tablewithoutpk is found with given input.
	 */
	Tablewithoutpk update(Tablewithoutpk tablewithoutpk) throws EntityNotFoundException;

    /**
	 * Deletes an existing Tablewithoutpk with the given id.
	 *
	 * @param tablewithoutpkId The id of the Tablewithoutpk to be deleted; value cannot be null.
	 * @return The deleted Tablewithoutpk.
	 * @throws EntityNotFoundException if no Tablewithoutpk found with the given id.
	 */
	Tablewithoutpk delete(TablewithoutpkId tablewithoutpkId) throws EntityNotFoundException;

	/**
	 * Find all Tablewithoutpks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Tablewithoutpks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Tablewithoutpk> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Tablewithoutpks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Tablewithoutpks.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Tablewithoutpk> findAll(String query, Pageable pageable);

    /**
	 * Exports all Tablewithoutpks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Tablewithoutpks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Tablewithoutpk.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

