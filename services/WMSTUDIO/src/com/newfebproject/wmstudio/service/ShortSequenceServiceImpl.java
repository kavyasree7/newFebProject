/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.ShortSequence;


/**
 * ServiceImpl object for domain model class ShortSequence.
 *
 * @see ShortSequence
 */
@Service("WMSTUDIO.ShortSequenceService")
public class ShortSequenceServiceImpl implements ShortSequenceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ShortSequenceServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.ShortSequenceDao")
    private WMGenericDao<ShortSequence, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ShortSequence, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public ShortSequence create(ShortSequence shortSequenceInstance) {
        LOGGER.debug("Creating a new ShortSequence with information: {}", shortSequenceInstance);
        ShortSequence shortSequenceInstanceCreated = this.wmGenericDao.create(shortSequenceInstance);
        return shortSequenceInstanceCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public ShortSequence getById(Short shortsequenceId) throws EntityNotFoundException {
        LOGGER.debug("Finding ShortSequence by id: {}", shortsequenceId);
        ShortSequence shortSequenceInstance = this.wmGenericDao.findById(shortsequenceId);
        if (shortSequenceInstance == null){
            LOGGER.debug("No ShortSequence found with id: {}", shortsequenceId);
            throw new EntityNotFoundException(String.valueOf(shortsequenceId));
        }
        return shortSequenceInstance;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public ShortSequence findById(Short shortsequenceId) {
        LOGGER.debug("Finding ShortSequence by id: {}", shortsequenceId);
        return this.wmGenericDao.findById(shortsequenceId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public ShortSequence update(ShortSequence shortSequenceInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating ShortSequence with information: {}", shortSequenceInstance);
        this.wmGenericDao.update(shortSequenceInstance);

        Short shortsequenceId = shortSequenceInstance.getShortSequence();

        return this.wmGenericDao.findById(shortsequenceId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public ShortSequence delete(Short shortsequenceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ShortSequence with id: {}", shortsequenceId);
        ShortSequence deleted = this.wmGenericDao.findById(shortsequenceId);
        if (deleted == null) {
            LOGGER.debug("No ShortSequence found with id: {}", shortsequenceId);
            throw new EntityNotFoundException(String.valueOf(shortsequenceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<ShortSequence> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ShortSequences");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<ShortSequence> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ShortSequences");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table ShortSequence to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

