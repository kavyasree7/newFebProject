/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CompO2oC;
import com.newfebproject.wmstudio.CompO2oPId;

/**
 * Service object for domain model class {@link CompO2oC}.
 */
public interface CompO2oCService {

    /**
     * Creates a new CompO2oC. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CompO2oC if any.
     *
     * @param compO2oC Details of the CompO2oC to be created; value cannot be null.
     * @return The newly created CompO2oC.
     */
	CompO2oC create(CompO2oC compO2oC);


	/**
	 * Returns CompO2oC by given id if exists.
	 *
	 * @param compo2ocId The id of the CompO2oC to get; value cannot be null.
	 * @return CompO2oC associated with the given compo2ocId.
     * @throws EntityNotFoundException If no CompO2oC is found.
	 */
	CompO2oC getById(CompO2oPId compo2ocId) throws EntityNotFoundException;

    /**
	 * Find and return the CompO2oC by given id if exists, returns null otherwise.
	 *
	 * @param compo2ocId The id of the CompO2oC to get; value cannot be null.
	 * @return CompO2oC associated with the given compo2ocId.
	 */
	CompO2oC findById(CompO2oPId compo2ocId);


	/**
	 * Updates the details of an existing CompO2oC. It replaces all fields of the existing CompO2oC with the given compO2oC.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on CompO2oC if any.
     *
	 * @param compO2oC The details of the CompO2oC to be updated; value cannot be null.
	 * @return The updated CompO2oC.
	 * @throws EntityNotFoundException if no CompO2oC is found with given input.
	 */
	CompO2oC update(CompO2oC compO2oC) throws EntityNotFoundException;

    /**
	 * Deletes an existing CompO2oC with the given id.
	 *
	 * @param compo2ocId The id of the CompO2oC to be deleted; value cannot be null.
	 * @return The deleted CompO2oC.
	 * @throws EntityNotFoundException if no CompO2oC found with the given id.
	 */
	CompO2oC delete(CompO2oPId compo2ocId) throws EntityNotFoundException;

	/**
	 * Find all CompO2oCs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompO2oCs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<CompO2oC> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all CompO2oCs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompO2oCs.
     *
     * @see Pageable
     * @see Page
	 */
    Page<CompO2oC> findAll(String query, Pageable pageable);

    /**
	 * Exports all CompO2oCs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the CompO2oCs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the CompO2oC.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

