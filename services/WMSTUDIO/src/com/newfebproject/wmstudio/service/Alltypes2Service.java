/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Alltypes2;

/**
 * Service object for domain model class {@link Alltypes2}.
 */
public interface Alltypes2Service {

    /**
     * Creates a new Alltypes2. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Alltypes2 if any.
     *
     * @param alltypes2 Details of the Alltypes2 to be created; value cannot be null.
     * @return The newly created Alltypes2.
     */
	Alltypes2 create(Alltypes2 alltypes2);


	/**
	 * Returns Alltypes2 by given id if exists.
	 *
	 * @param alltypes2Id The id of the Alltypes2 to get; value cannot be null.
	 * @return Alltypes2 associated with the given alltypes2Id.
     * @throws EntityNotFoundException If no Alltypes2 is found.
	 */
	Alltypes2 getById(Integer alltypes2Id) throws EntityNotFoundException;

    /**
	 * Find and return the Alltypes2 by given id if exists, returns null otherwise.
	 *
	 * @param alltypes2Id The id of the Alltypes2 to get; value cannot be null.
	 * @return Alltypes2 associated with the given alltypes2Id.
	 */
	Alltypes2 findById(Integer alltypes2Id);


	/**
	 * Updates the details of an existing Alltypes2. It replaces all fields of the existing Alltypes2 with the given alltypes2.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Alltypes2 if any.
     *
	 * @param alltypes2 The details of the Alltypes2 to be updated; value cannot be null.
	 * @return The updated Alltypes2.
	 * @throws EntityNotFoundException if no Alltypes2 is found with given input.
	 */
	Alltypes2 update(Alltypes2 alltypes2) throws EntityNotFoundException;

    /**
	 * Deletes an existing Alltypes2 with the given id.
	 *
	 * @param alltypes2Id The id of the Alltypes2 to be deleted; value cannot be null.
	 * @return The deleted Alltypes2.
	 * @throws EntityNotFoundException if no Alltypes2 found with the given id.
	 */
	Alltypes2 delete(Integer alltypes2Id) throws EntityNotFoundException;

	/**
	 * Find all Alltypes2s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Alltypes2s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Alltypes2> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Alltypes2s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Alltypes2s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Alltypes2> findAll(String query, Pageable pageable);

    /**
	 * Exports all Alltypes2s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Alltypes2s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Alltypes2.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

