/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.VirtualO2oParent;
import com.newfebproject.wmstudio.VirtualO2oParentId;


/**
 * ServiceImpl object for domain model class VirtualO2oParent.
 *
 * @see VirtualO2oParent
 */
@Service("WMSTUDIO.VirtualO2oParentService")
public class VirtualO2oParentServiceImpl implements VirtualO2oParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualO2oParentServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.VirtualO2oParentDao")
    private WMGenericDao<VirtualO2oParent, VirtualO2oParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualO2oParent, VirtualO2oParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public VirtualO2oParent create(VirtualO2oParent virtualO2oParent) {
        LOGGER.debug("Creating a new VirtualO2oParent with information: {}", virtualO2oParent);
        VirtualO2oParent virtualO2oParentCreated = this.wmGenericDao.create(virtualO2oParent);
        return virtualO2oParentCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent getById(VirtualO2oParentId virtualo2oparentId) throws EntityNotFoundException {
        LOGGER.debug("Finding VirtualO2oParent by id: {}", virtualo2oparentId);
        VirtualO2oParent virtualO2oParent = this.wmGenericDao.findById(virtualo2oparentId);
        if (virtualO2oParent == null){
            LOGGER.debug("No VirtualO2oParent found with id: {}", virtualo2oparentId);
            throw new EntityNotFoundException(String.valueOf(virtualo2oparentId));
        }
        return virtualO2oParent;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent findById(VirtualO2oParentId virtualo2oparentId) {
        LOGGER.debug("Finding VirtualO2oParent by id: {}", virtualo2oparentId);
        return this.wmGenericDao.findById(virtualo2oparentId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent update(VirtualO2oParent virtualO2oParent) throws EntityNotFoundException {
        LOGGER.debug("Updating VirtualO2oParent with information: {}", virtualO2oParent);
        this.wmGenericDao.update(virtualO2oParent);

        VirtualO2oParentId virtualo2oparentId = new VirtualO2oParentId();
        virtualo2oparentId.setId(virtualO2oParent.getId());
        virtualo2oparentId.setString(virtualO2oParent.getString());
        virtualo2oparentId.setBigdecimal(virtualO2oParent.getBigdecimal());
        virtualo2oparentId.set_desc(virtualO2oParent.get_desc());

        return this.wmGenericDao.findById(virtualo2oparentId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent delete(VirtualO2oParentId virtualo2oparentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting VirtualO2oParent with id: {}", virtualo2oparentId);
        VirtualO2oParent deleted = this.wmGenericDao.findById(virtualo2oparentId);
        if (deleted == null) {
            LOGGER.debug("No VirtualO2oParent found with id: {}", virtualo2oparentId);
            throw new EntityNotFoundException(String.valueOf(virtualo2oparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<VirtualO2oParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualO2oParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<VirtualO2oParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualO2oParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table VirtualO2oParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

