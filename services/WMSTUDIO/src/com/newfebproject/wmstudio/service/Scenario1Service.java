/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Scenario1;

/**
 * Service object for domain model class {@link Scenario1}.
 */
public interface Scenario1Service {

    /**
     * Creates a new Scenario1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Scenario1 if any.
     *
     * @param scenario1 Details of the Scenario1 to be created; value cannot be null.
     * @return The newly created Scenario1.
     */
	Scenario1 create(Scenario1 scenario1);


	/**
	 * Returns Scenario1 by given id if exists.
	 *
	 * @param scenario1Id The id of the Scenario1 to get; value cannot be null.
	 * @return Scenario1 associated with the given scenario1Id.
     * @throws EntityNotFoundException If no Scenario1 is found.
	 */
	Scenario1 getById(Integer scenario1Id) throws EntityNotFoundException;

    /**
	 * Find and return the Scenario1 by given id if exists, returns null otherwise.
	 *
	 * @param scenario1Id The id of the Scenario1 to get; value cannot be null.
	 * @return Scenario1 associated with the given scenario1Id.
	 */
	Scenario1 findById(Integer scenario1Id);


	/**
	 * Updates the details of an existing Scenario1. It replaces all fields of the existing Scenario1 with the given scenario1.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Scenario1 if any.
     *
	 * @param scenario1 The details of the Scenario1 to be updated; value cannot be null.
	 * @return The updated Scenario1.
	 * @throws EntityNotFoundException if no Scenario1 is found with given input.
	 */
	Scenario1 update(Scenario1 scenario1) throws EntityNotFoundException;

    /**
	 * Deletes an existing Scenario1 with the given id.
	 *
	 * @param scenario1Id The id of the Scenario1 to be deleted; value cannot be null.
	 * @return The deleted Scenario1.
	 * @throws EntityNotFoundException if no Scenario1 found with the given id.
	 */
	Scenario1 delete(Integer scenario1Id) throws EntityNotFoundException;

	/**
	 * Find all Scenario1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Scenario1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Scenario1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Scenario1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Scenario1s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Scenario1> findAll(String query, Pageable pageable);

    /**
	 * Exports all Scenario1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Scenario1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Scenario1.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

