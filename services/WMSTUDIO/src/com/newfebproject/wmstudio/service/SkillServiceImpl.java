/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Callrouting;
import com.newfebproject.wmstudio.Skill;


/**
 * ServiceImpl object for domain model class Skill.
 *
 * @see Skill
 */
@Service("WMSTUDIO.SkillService")
public class SkillServiceImpl implements SkillService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SkillServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.CallroutingService")
	private CallroutingService callroutingService;

    @Autowired
    @Qualifier("WMSTUDIO.SkillDao")
    private WMGenericDao<Skill, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Skill, Double> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Skill create(Skill skill) {
        LOGGER.debug("Creating a new Skill with information: {}", skill);
        Skill skillCreated = this.wmGenericDao.create(skill);
        if(skillCreated.getCallroutings() != null) {
            for(Callrouting callrouting : skillCreated.getCallroutings()) {
                callrouting.setSkill(skillCreated);
                LOGGER.debug("Creating a new child Callrouting with information: {}", callrouting);
                callroutingService.create(callrouting);
            }
        }
        return skillCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Skill getById(Double skillId) throws EntityNotFoundException {
        LOGGER.debug("Finding Skill by id: {}", skillId);
        Skill skill = this.wmGenericDao.findById(skillId);
        if (skill == null){
            LOGGER.debug("No Skill found with id: {}", skillId);
            throw new EntityNotFoundException(String.valueOf(skillId));
        }
        return skill;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Skill findById(Double skillId) {
        LOGGER.debug("Finding Skill by id: {}", skillId);
        return this.wmGenericDao.findById(skillId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Skill update(Skill skill) throws EntityNotFoundException {
        LOGGER.debug("Updating Skill with information: {}", skill);
        this.wmGenericDao.update(skill);

        Double skillId = skill.getId();

        return this.wmGenericDao.findById(skillId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Skill delete(Double skillId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Skill with id: {}", skillId);
        Skill deleted = this.wmGenericDao.findById(skillId);
        if (deleted == null) {
            LOGGER.debug("No Skill found with id: {}", skillId);
            throw new EntityNotFoundException(String.valueOf(skillId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Skill> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Skills");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Skill> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Skills");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Skill to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Callrouting> findAssociatedCallroutings(Double id, Pageable pageable) {
        LOGGER.debug("Fetching all associated callroutings");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("skill.id = '" + id + "'");

        return callroutingService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CallroutingService instance
	 */
	protected void setCallroutingService(CallroutingService service) {
        this.callroutingService = service;
    }

}

