/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdInsertableWithOutValues;


/**
 * ServiceImpl object for domain model class UdInsertableWithOutValues.
 *
 * @see UdInsertableWithOutValues
 */
@Service("WMSTUDIO.UdInsertableWithOutValuesService")
public class UdInsertableWithOutValuesServiceImpl implements UdInsertableWithOutValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdInsertableWithOutValuesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.UdInsertableWithOutValuesDao")
    private WMGenericDao<UdInsertableWithOutValues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UdInsertableWithOutValues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public UdInsertableWithOutValues create(UdInsertableWithOutValues udInsertableWithOutValues) {
        LOGGER.debug("Creating a new UdInsertableWithOutValues with information: {}", udInsertableWithOutValues);
        UdInsertableWithOutValues udInsertableWithOutValuesCreated = this.wmGenericDao.create(udInsertableWithOutValues);
        return udInsertableWithOutValuesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdInsertableWithOutValues getById(Integer udinsertablewithoutvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Finding UdInsertableWithOutValues by id: {}", udinsertablewithoutvaluesId);
        UdInsertableWithOutValues udInsertableWithOutValues = this.wmGenericDao.findById(udinsertablewithoutvaluesId);
        if (udInsertableWithOutValues == null){
            LOGGER.debug("No UdInsertableWithOutValues found with id: {}", udinsertablewithoutvaluesId);
            throw new EntityNotFoundException(String.valueOf(udinsertablewithoutvaluesId));
        }
        return udInsertableWithOutValues;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdInsertableWithOutValues findById(Integer udinsertablewithoutvaluesId) {
        LOGGER.debug("Finding UdInsertableWithOutValues by id: {}", udinsertablewithoutvaluesId);
        return this.wmGenericDao.findById(udinsertablewithoutvaluesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public UdInsertableWithOutValues update(UdInsertableWithOutValues udInsertableWithOutValues) throws EntityNotFoundException {
        LOGGER.debug("Updating UdInsertableWithOutValues with information: {}", udInsertableWithOutValues);
        this.wmGenericDao.update(udInsertableWithOutValues);

        Integer udinsertablewithoutvaluesId = udInsertableWithOutValues.getIdCol();

        return this.wmGenericDao.findById(udinsertablewithoutvaluesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public UdInsertableWithOutValues delete(Integer udinsertablewithoutvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdInsertableWithOutValues with id: {}", udinsertablewithoutvaluesId);
        UdInsertableWithOutValues deleted = this.wmGenericDao.findById(udinsertablewithoutvaluesId);
        if (deleted == null) {
            LOGGER.debug("No UdInsertableWithOutValues found with id: {}", udinsertablewithoutvaluesId);
            throw new EntityNotFoundException(String.valueOf(udinsertablewithoutvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<UdInsertableWithOutValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UdInsertableWithOutValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<UdInsertableWithOutValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UdInsertableWithOutValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table UdInsertableWithOutValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

