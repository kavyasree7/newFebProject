/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CfgSkill;
import com.newfebproject.wmstudio.CfgSkillId;


/**
 * ServiceImpl object for domain model class CfgSkill.
 *
 * @see CfgSkill
 */
@Service("WMSTUDIO.CfgSkillService")
public class CfgSkillServiceImpl implements CfgSkillService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CfgSkillServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.CfgSkillDao")
    private WMGenericDao<CfgSkill, CfgSkillId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CfgSkill, CfgSkillId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public CfgSkill create(CfgSkill cfgSkill) {
        LOGGER.debug("Creating a new CfgSkill with information: {}", cfgSkill);
        CfgSkill cfgSkillCreated = this.wmGenericDao.create(cfgSkill);
        return cfgSkillCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill getById(CfgSkillId cfgskillId) throws EntityNotFoundException {
        LOGGER.debug("Finding CfgSkill by id: {}", cfgskillId);
        CfgSkill cfgSkill = this.wmGenericDao.findById(cfgskillId);
        if (cfgSkill == null){
            LOGGER.debug("No CfgSkill found with id: {}", cfgskillId);
            throw new EntityNotFoundException(String.valueOf(cfgskillId));
        }
        return cfgSkill;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill findById(CfgSkillId cfgskillId) {
        LOGGER.debug("Finding CfgSkill by id: {}", cfgskillId);
        return this.wmGenericDao.findById(cfgskillId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill update(CfgSkill cfgSkill) throws EntityNotFoundException {
        LOGGER.debug("Updating CfgSkill with information: {}", cfgSkill);
        this.wmGenericDao.update(cfgSkill);

        CfgSkillId cfgskillId = new CfgSkillId();
        cfgskillId.setId(cfgSkill.getId());
        cfgskillId.setName(cfgSkill.getName());
        cfgskillId.setColumn3(cfgSkill.getColumn3());
        cfgskillId.setColumn4(cfgSkill.getColumn4());

        return this.wmGenericDao.findById(cfgskillId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill delete(CfgSkillId cfgskillId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CfgSkill with id: {}", cfgskillId);
        CfgSkill deleted = this.wmGenericDao.findById(cfgskillId);
        if (deleted == null) {
            LOGGER.debug("No CfgSkill found with id: {}", cfgskillId);
            throw new EntityNotFoundException(String.valueOf(cfgskillId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<CfgSkill> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CfgSkills");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<CfgSkill> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CfgSkills");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table CfgSkill to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

