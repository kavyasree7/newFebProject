/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdBothIuWithValues;

/**
 * Service object for domain model class {@link UdBothIuWithValues}.
 */
public interface UdBothIuWithValuesService {

    /**
     * Creates a new UdBothIuWithValues. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UdBothIuWithValues if any.
     *
     * @param udBothIuWithValues Details of the UdBothIuWithValues to be created; value cannot be null.
     * @return The newly created UdBothIuWithValues.
     */
	UdBothIuWithValues create(UdBothIuWithValues udBothIuWithValues);


	/**
	 * Returns UdBothIuWithValues by given id if exists.
	 *
	 * @param udbothiuwithvaluesId The id of the UdBothIuWithValues to get; value cannot be null.
	 * @return UdBothIuWithValues associated with the given udbothiuwithvaluesId.
     * @throws EntityNotFoundException If no UdBothIuWithValues is found.
	 */
	UdBothIuWithValues getById(Integer udbothiuwithvaluesId) throws EntityNotFoundException;

    /**
	 * Find and return the UdBothIuWithValues by given id if exists, returns null otherwise.
	 *
	 * @param udbothiuwithvaluesId The id of the UdBothIuWithValues to get; value cannot be null.
	 * @return UdBothIuWithValues associated with the given udbothiuwithvaluesId.
	 */
	UdBothIuWithValues findById(Integer udbothiuwithvaluesId);


	/**
	 * Updates the details of an existing UdBothIuWithValues. It replaces all fields of the existing UdBothIuWithValues with the given udBothIuWithValues.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on UdBothIuWithValues if any.
     *
	 * @param udBothIuWithValues The details of the UdBothIuWithValues to be updated; value cannot be null.
	 * @return The updated UdBothIuWithValues.
	 * @throws EntityNotFoundException if no UdBothIuWithValues is found with given input.
	 */
	UdBothIuWithValues update(UdBothIuWithValues udBothIuWithValues) throws EntityNotFoundException;

    /**
	 * Deletes an existing UdBothIuWithValues with the given id.
	 *
	 * @param udbothiuwithvaluesId The id of the UdBothIuWithValues to be deleted; value cannot be null.
	 * @return The deleted UdBothIuWithValues.
	 * @throws EntityNotFoundException if no UdBothIuWithValues found with the given id.
	 */
	UdBothIuWithValues delete(Integer udbothiuwithvaluesId) throws EntityNotFoundException;

	/**
	 * Find all UdBothIuWithValues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdBothIuWithValues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<UdBothIuWithValues> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all UdBothIuWithValues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdBothIuWithValues.
     *
     * @see Pageable
     * @see Page
	 */
    Page<UdBothIuWithValues> findAll(String query, Pageable pageable);

    /**
	 * Exports all UdBothIuWithValues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the UdBothIuWithValues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the UdBothIuWithValues.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

