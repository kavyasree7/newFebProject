/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.BooleanTableNullConstraints;


/**
 * ServiceImpl object for domain model class BooleanTableNullConstraints.
 *
 * @see BooleanTableNullConstraints
 */
@Service("WMSTUDIO.BooleanTableNullConstraintsService")
public class BooleanTableNullConstraintsServiceImpl implements BooleanTableNullConstraintsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BooleanTableNullConstraintsServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.BooleanTableNullConstraintsDao")
    private WMGenericDao<BooleanTableNullConstraints, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BooleanTableNullConstraints, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public BooleanTableNullConstraints create(BooleanTableNullConstraints booleanTableNullConstraints) {
        LOGGER.debug("Creating a new BooleanTableNullConstraints with information: {}", booleanTableNullConstraints);
        BooleanTableNullConstraints booleanTableNullConstraintsCreated = this.wmGenericDao.create(booleanTableNullConstraints);
        return booleanTableNullConstraintsCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanTableNullConstraints getById(Integer booleantablenullconstraintsId) throws EntityNotFoundException {
        LOGGER.debug("Finding BooleanTableNullConstraints by id: {}", booleantablenullconstraintsId);
        BooleanTableNullConstraints booleanTableNullConstraints = this.wmGenericDao.findById(booleantablenullconstraintsId);
        if (booleanTableNullConstraints == null){
            LOGGER.debug("No BooleanTableNullConstraints found with id: {}", booleantablenullconstraintsId);
            throw new EntityNotFoundException(String.valueOf(booleantablenullconstraintsId));
        }
        return booleanTableNullConstraints;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanTableNullConstraints findById(Integer booleantablenullconstraintsId) {
        LOGGER.debug("Finding BooleanTableNullConstraints by id: {}", booleantablenullconstraintsId);
        return this.wmGenericDao.findById(booleantablenullconstraintsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanTableNullConstraints update(BooleanTableNullConstraints booleanTableNullConstraints) throws EntityNotFoundException {
        LOGGER.debug("Updating BooleanTableNullConstraints with information: {}", booleanTableNullConstraints);
        this.wmGenericDao.update(booleanTableNullConstraints);

        Integer booleantablenullconstraintsId = booleanTableNullConstraints.getId();

        return this.wmGenericDao.findById(booleantablenullconstraintsId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanTableNullConstraints delete(Integer booleantablenullconstraintsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BooleanTableNullConstraints with id: {}", booleantablenullconstraintsId);
        BooleanTableNullConstraints deleted = this.wmGenericDao.findById(booleantablenullconstraintsId);
        if (deleted == null) {
            LOGGER.debug("No BooleanTableNullConstraints found with id: {}", booleantablenullconstraintsId);
            throw new EntityNotFoundException(String.valueOf(booleantablenullconstraintsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<BooleanTableNullConstraints> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BooleanTableNullConstraints");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<BooleanTableNullConstraints> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BooleanTableNullConstraints");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table BooleanTableNullConstraints to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

