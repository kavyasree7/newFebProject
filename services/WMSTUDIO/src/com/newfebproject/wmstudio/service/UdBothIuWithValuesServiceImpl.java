/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdBothIuWithValues;


/**
 * ServiceImpl object for domain model class UdBothIuWithValues.
 *
 * @see UdBothIuWithValues
 */
@Service("WMSTUDIO.UdBothIuWithValuesService")
public class UdBothIuWithValuesServiceImpl implements UdBothIuWithValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdBothIuWithValuesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.UdBothIuWithValuesDao")
    private WMGenericDao<UdBothIuWithValues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UdBothIuWithValues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public UdBothIuWithValues create(UdBothIuWithValues udBothIuWithValues) {
        LOGGER.debug("Creating a new UdBothIuWithValues with information: {}", udBothIuWithValues);
        UdBothIuWithValues udBothIuWithValuesCreated = this.wmGenericDao.create(udBothIuWithValues);
        return udBothIuWithValuesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdBothIuWithValues getById(Integer udbothiuwithvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Finding UdBothIuWithValues by id: {}", udbothiuwithvaluesId);
        UdBothIuWithValues udBothIuWithValues = this.wmGenericDao.findById(udbothiuwithvaluesId);
        if (udBothIuWithValues == null){
            LOGGER.debug("No UdBothIuWithValues found with id: {}", udbothiuwithvaluesId);
            throw new EntityNotFoundException(String.valueOf(udbothiuwithvaluesId));
        }
        return udBothIuWithValues;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdBothIuWithValues findById(Integer udbothiuwithvaluesId) {
        LOGGER.debug("Finding UdBothIuWithValues by id: {}", udbothiuwithvaluesId);
        return this.wmGenericDao.findById(udbothiuwithvaluesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public UdBothIuWithValues update(UdBothIuWithValues udBothIuWithValues) throws EntityNotFoundException {
        LOGGER.debug("Updating UdBothIuWithValues with information: {}", udBothIuWithValues);
        this.wmGenericDao.update(udBothIuWithValues);

        Integer udbothiuwithvaluesId = udBothIuWithValues.getIdCol();

        return this.wmGenericDao.findById(udbothiuwithvaluesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public UdBothIuWithValues delete(Integer udbothiuwithvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdBothIuWithValues with id: {}", udbothiuwithvaluesId);
        UdBothIuWithValues deleted = this.wmGenericDao.findById(udbothiuwithvaluesId);
        if (deleted == null) {
            LOGGER.debug("No UdBothIuWithValues found with id: {}", udbothiuwithvaluesId);
            throw new EntityNotFoundException(String.valueOf(udbothiuwithvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<UdBothIuWithValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UdBothIuWithValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<UdBothIuWithValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UdBothIuWithValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table UdBothIuWithValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

