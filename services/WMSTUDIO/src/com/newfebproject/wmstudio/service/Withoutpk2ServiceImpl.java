/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Withoutpk2;
import com.newfebproject.wmstudio.Withoutpk2Id;


/**
 * ServiceImpl object for domain model class Withoutpk2.
 *
 * @see Withoutpk2
 */
@Service("WMSTUDIO.Withoutpk2Service")
public class Withoutpk2ServiceImpl implements Withoutpk2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Withoutpk2ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.Withoutpk2Dao")
    private WMGenericDao<Withoutpk2, Withoutpk2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Withoutpk2, Withoutpk2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Withoutpk2 create(Withoutpk2 withoutpk2) {
        LOGGER.debug("Creating a new Withoutpk2 with information: {}", withoutpk2);
        Withoutpk2 withoutpk2Created = this.wmGenericDao.create(withoutpk2);
        return withoutpk2Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Withoutpk2 getById(Withoutpk2Id withoutpk2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Withoutpk2 by id: {}", withoutpk2Id);
        Withoutpk2 withoutpk2 = this.wmGenericDao.findById(withoutpk2Id);
        if (withoutpk2 == null){
            LOGGER.debug("No Withoutpk2 found with id: {}", withoutpk2Id);
            throw new EntityNotFoundException(String.valueOf(withoutpk2Id));
        }
        return withoutpk2;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Withoutpk2 findById(Withoutpk2Id withoutpk2Id) {
        LOGGER.debug("Finding Withoutpk2 by id: {}", withoutpk2Id);
        return this.wmGenericDao.findById(withoutpk2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Withoutpk2 update(Withoutpk2 withoutpk2) throws EntityNotFoundException {
        LOGGER.debug("Updating Withoutpk2 with information: {}", withoutpk2);
        this.wmGenericDao.update(withoutpk2);

        Withoutpk2Id withoutpk2Id = new Withoutpk2Id();
        withoutpk2Id.setId(withoutpk2.getId());
        withoutpk2Id.setString(withoutpk2.getString());
        withoutpk2Id.setShort_(withoutpk2.getShort_());
        withoutpk2Id.setDateCol(withoutpk2.getDateCol());

        return this.wmGenericDao.findById(withoutpk2Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Withoutpk2 delete(Withoutpk2Id withoutpk2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Withoutpk2 with id: {}", withoutpk2Id);
        Withoutpk2 deleted = this.wmGenericDao.findById(withoutpk2Id);
        if (deleted == null) {
            LOGGER.debug("No Withoutpk2 found with id: {}", withoutpk2Id);
            throw new EntityNotFoundException(String.valueOf(withoutpk2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Withoutpk2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Withoutpk2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Withoutpk2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Withoutpk2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Withoutpk2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

