/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.ServerdefinedIu;

/**
 * Service object for domain model class {@link ServerdefinedIu}.
 */
public interface ServerdefinedIuService {

    /**
     * Creates a new ServerdefinedIu. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ServerdefinedIu if any.
     *
     * @param serverdefinedIu Details of the ServerdefinedIu to be created; value cannot be null.
     * @return The newly created ServerdefinedIu.
     */
	ServerdefinedIu create(ServerdefinedIu serverdefinedIu);


	/**
	 * Returns ServerdefinedIu by given id if exists.
	 *
	 * @param serverdefinediuId The id of the ServerdefinedIu to get; value cannot be null.
	 * @return ServerdefinedIu associated with the given serverdefinediuId.
     * @throws EntityNotFoundException If no ServerdefinedIu is found.
	 */
	ServerdefinedIu getById(Integer serverdefinediuId) throws EntityNotFoundException;

    /**
	 * Find and return the ServerdefinedIu by given id if exists, returns null otherwise.
	 *
	 * @param serverdefinediuId The id of the ServerdefinedIu to get; value cannot be null.
	 * @return ServerdefinedIu associated with the given serverdefinediuId.
	 */
	ServerdefinedIu findById(Integer serverdefinediuId);


	/**
	 * Updates the details of an existing ServerdefinedIu. It replaces all fields of the existing ServerdefinedIu with the given serverdefinedIu.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on ServerdefinedIu if any.
     *
	 * @param serverdefinedIu The details of the ServerdefinedIu to be updated; value cannot be null.
	 * @return The updated ServerdefinedIu.
	 * @throws EntityNotFoundException if no ServerdefinedIu is found with given input.
	 */
	ServerdefinedIu update(ServerdefinedIu serverdefinedIu) throws EntityNotFoundException;

    /**
	 * Deletes an existing ServerdefinedIu with the given id.
	 *
	 * @param serverdefinediuId The id of the ServerdefinedIu to be deleted; value cannot be null.
	 * @return The deleted ServerdefinedIu.
	 * @throws EntityNotFoundException if no ServerdefinedIu found with the given id.
	 */
	ServerdefinedIu delete(Integer serverdefinediuId) throws EntityNotFoundException;

	/**
	 * Find all ServerdefinedIus matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ServerdefinedIus.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<ServerdefinedIu> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all ServerdefinedIus matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ServerdefinedIus.
     *
     * @see Pageable
     * @see Page
	 */
    Page<ServerdefinedIu> findAll(String query, Pageable pageable);

    /**
	 * Exports all ServerdefinedIus matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ServerdefinedIus in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the ServerdefinedIu.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

