/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Callrouting;
import com.newfebproject.wmstudio.Skill;

/**
 * Service object for domain model class {@link Skill}.
 */
public interface SkillService {

    /**
     * Creates a new Skill. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Skill if any.
     *
     * @param skill Details of the Skill to be created; value cannot be null.
     * @return The newly created Skill.
     */
	Skill create(Skill skill);


	/**
	 * Returns Skill by given id if exists.
	 *
	 * @param skillId The id of the Skill to get; value cannot be null.
	 * @return Skill associated with the given skillId.
     * @throws EntityNotFoundException If no Skill is found.
	 */
	Skill getById(Double skillId) throws EntityNotFoundException;

    /**
	 * Find and return the Skill by given id if exists, returns null otherwise.
	 *
	 * @param skillId The id of the Skill to get; value cannot be null.
	 * @return Skill associated with the given skillId.
	 */
	Skill findById(Double skillId);


	/**
	 * Updates the details of an existing Skill. It replaces all fields of the existing Skill with the given skill.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Skill if any.
     *
	 * @param skill The details of the Skill to be updated; value cannot be null.
	 * @return The updated Skill.
	 * @throws EntityNotFoundException if no Skill is found with given input.
	 */
	Skill update(Skill skill) throws EntityNotFoundException;

    /**
	 * Deletes an existing Skill with the given id.
	 *
	 * @param skillId The id of the Skill to be deleted; value cannot be null.
	 * @return The deleted Skill.
	 * @throws EntityNotFoundException if no Skill found with the given id.
	 */
	Skill delete(Double skillId) throws EntityNotFoundException;

	/**
	 * Find all Skills matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Skills.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Skill> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Skills matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Skills.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Skill> findAll(String query, Pageable pageable);

    /**
	 * Exports all Skills matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Skills in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Skill.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated callroutings for given Skill id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Callrouting instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Callrouting> findAssociatedCallroutings(Double id, Pageable pageable);

}

