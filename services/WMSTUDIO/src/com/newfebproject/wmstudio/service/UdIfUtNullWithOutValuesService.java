/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdIfUtNullWithOutValues;

/**
 * Service object for domain model class {@link UdIfUtNullWithOutValues}.
 */
public interface UdIfUtNullWithOutValuesService {

    /**
     * Creates a new UdIfUtNullWithOutValues. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UdIfUtNullWithOutValues if any.
     *
     * @param udIfUtNullWithOutValues Details of the UdIfUtNullWithOutValues to be created; value cannot be null.
     * @return The newly created UdIfUtNullWithOutValues.
     */
	UdIfUtNullWithOutValues create(UdIfUtNullWithOutValues udIfUtNullWithOutValues);


	/**
	 * Returns UdIfUtNullWithOutValues by given id if exists.
	 *
	 * @param udifutnullwithoutvaluesId The id of the UdIfUtNullWithOutValues to get; value cannot be null.
	 * @return UdIfUtNullWithOutValues associated with the given udifutnullwithoutvaluesId.
     * @throws EntityNotFoundException If no UdIfUtNullWithOutValues is found.
	 */
	UdIfUtNullWithOutValues getById(Integer udifutnullwithoutvaluesId) throws EntityNotFoundException;

    /**
	 * Find and return the UdIfUtNullWithOutValues by given id if exists, returns null otherwise.
	 *
	 * @param udifutnullwithoutvaluesId The id of the UdIfUtNullWithOutValues to get; value cannot be null.
	 * @return UdIfUtNullWithOutValues associated with the given udifutnullwithoutvaluesId.
	 */
	UdIfUtNullWithOutValues findById(Integer udifutnullwithoutvaluesId);


	/**
	 * Updates the details of an existing UdIfUtNullWithOutValues. It replaces all fields of the existing UdIfUtNullWithOutValues with the given udIfUtNullWithOutValues.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on UdIfUtNullWithOutValues if any.
     *
	 * @param udIfUtNullWithOutValues The details of the UdIfUtNullWithOutValues to be updated; value cannot be null.
	 * @return The updated UdIfUtNullWithOutValues.
	 * @throws EntityNotFoundException if no UdIfUtNullWithOutValues is found with given input.
	 */
	UdIfUtNullWithOutValues update(UdIfUtNullWithOutValues udIfUtNullWithOutValues) throws EntityNotFoundException;

    /**
	 * Deletes an existing UdIfUtNullWithOutValues with the given id.
	 *
	 * @param udifutnullwithoutvaluesId The id of the UdIfUtNullWithOutValues to be deleted; value cannot be null.
	 * @return The deleted UdIfUtNullWithOutValues.
	 * @throws EntityNotFoundException if no UdIfUtNullWithOutValues found with the given id.
	 */
	UdIfUtNullWithOutValues delete(Integer udifutnullwithoutvaluesId) throws EntityNotFoundException;

	/**
	 * Find all UdIfUtNullWithOutValues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdIfUtNullWithOutValues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<UdIfUtNullWithOutValues> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all UdIfUtNullWithOutValues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdIfUtNullWithOutValues.
     *
     * @see Pageable
     * @see Page
	 */
    Page<UdIfUtNullWithOutValues> findAll(String query, Pageable pageable);

    /**
	 * Exports all UdIfUtNullWithOutValues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the UdIfUtNullWithOutValues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the UdIfUtNullWithOutValues.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

