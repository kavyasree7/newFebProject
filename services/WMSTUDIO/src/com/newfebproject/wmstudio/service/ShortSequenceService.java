/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.ShortSequence;

/**
 * Service object for domain model class {@link ShortSequence}.
 */
public interface ShortSequenceService {

    /**
     * Creates a new ShortSequence. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ShortSequence if any.
     *
     * @param shortSequenceInstance Details of the ShortSequence to be created; value cannot be null.
     * @return The newly created ShortSequence.
     */
	ShortSequence create(ShortSequence shortSequenceInstance);


	/**
	 * Returns ShortSequence by given id if exists.
	 *
	 * @param shortsequenceId The id of the ShortSequence to get; value cannot be null.
	 * @return ShortSequence associated with the given shortsequenceId.
     * @throws EntityNotFoundException If no ShortSequence is found.
	 */
	ShortSequence getById(Short shortsequenceId) throws EntityNotFoundException;

    /**
	 * Find and return the ShortSequence by given id if exists, returns null otherwise.
	 *
	 * @param shortsequenceId The id of the ShortSequence to get; value cannot be null.
	 * @return ShortSequence associated with the given shortsequenceId.
	 */
	ShortSequence findById(Short shortsequenceId);


	/**
	 * Updates the details of an existing ShortSequence. It replaces all fields of the existing ShortSequence with the given shortSequenceInstance.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on ShortSequence if any.
     *
	 * @param shortSequenceInstance The details of the ShortSequence to be updated; value cannot be null.
	 * @return The updated ShortSequence.
	 * @throws EntityNotFoundException if no ShortSequence is found with given input.
	 */
	ShortSequence update(ShortSequence shortSequenceInstance) throws EntityNotFoundException;

    /**
	 * Deletes an existing ShortSequence with the given id.
	 *
	 * @param shortsequenceId The id of the ShortSequence to be deleted; value cannot be null.
	 * @return The deleted ShortSequence.
	 * @throws EntityNotFoundException if no ShortSequence found with the given id.
	 */
	ShortSequence delete(Short shortsequenceId) throws EntityNotFoundException;

	/**
	 * Find all ShortSequences matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ShortSequences.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<ShortSequence> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all ShortSequences matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ShortSequences.
     *
     * @see Pageable
     * @see Page
	 */
    Page<ShortSequence> findAll(String query, Pageable pageable);

    /**
	 * Exports all ShortSequences matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ShortSequences in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the ShortSequence.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

