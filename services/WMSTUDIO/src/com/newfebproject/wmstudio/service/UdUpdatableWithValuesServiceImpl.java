/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdUpdatableWithValues;


/**
 * ServiceImpl object for domain model class UdUpdatableWithValues.
 *
 * @see UdUpdatableWithValues
 */
@Service("WMSTUDIO.UdUpdatableWithValuesService")
public class UdUpdatableWithValuesServiceImpl implements UdUpdatableWithValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdUpdatableWithValuesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.UdUpdatableWithValuesDao")
    private WMGenericDao<UdUpdatableWithValues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UdUpdatableWithValues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public UdUpdatableWithValues create(UdUpdatableWithValues udUpdatableWithValues) {
        LOGGER.debug("Creating a new UdUpdatableWithValues with information: {}", udUpdatableWithValues);
        UdUpdatableWithValues udUpdatableWithValuesCreated = this.wmGenericDao.create(udUpdatableWithValues);
        return udUpdatableWithValuesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdUpdatableWithValues getById(Integer udupdatablewithvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Finding UdUpdatableWithValues by id: {}", udupdatablewithvaluesId);
        UdUpdatableWithValues udUpdatableWithValues = this.wmGenericDao.findById(udupdatablewithvaluesId);
        if (udUpdatableWithValues == null){
            LOGGER.debug("No UdUpdatableWithValues found with id: {}", udupdatablewithvaluesId);
            throw new EntityNotFoundException(String.valueOf(udupdatablewithvaluesId));
        }
        return udUpdatableWithValues;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdUpdatableWithValues findById(Integer udupdatablewithvaluesId) {
        LOGGER.debug("Finding UdUpdatableWithValues by id: {}", udupdatablewithvaluesId);
        return this.wmGenericDao.findById(udupdatablewithvaluesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public UdUpdatableWithValues update(UdUpdatableWithValues udUpdatableWithValues) throws EntityNotFoundException {
        LOGGER.debug("Updating UdUpdatableWithValues with information: {}", udUpdatableWithValues);
        this.wmGenericDao.update(udUpdatableWithValues);

        Integer udupdatablewithvaluesId = udUpdatableWithValues.getIdCol();

        return this.wmGenericDao.findById(udupdatablewithvaluesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public UdUpdatableWithValues delete(Integer udupdatablewithvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdUpdatableWithValues with id: {}", udupdatablewithvaluesId);
        UdUpdatableWithValues deleted = this.wmGenericDao.findById(udupdatablewithvaluesId);
        if (deleted == null) {
            LOGGER.debug("No UdUpdatableWithValues found with id: {}", udupdatablewithvaluesId);
            throw new EntityNotFoundException(String.valueOf(udupdatablewithvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<UdUpdatableWithValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UdUpdatableWithValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<UdUpdatableWithValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UdUpdatableWithValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table UdUpdatableWithValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

