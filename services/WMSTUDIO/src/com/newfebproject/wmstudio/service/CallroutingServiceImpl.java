/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Callrouting;


/**
 * ServiceImpl object for domain model class Callrouting.
 *
 * @see Callrouting
 */
@Service("WMSTUDIO.CallroutingService")
public class CallroutingServiceImpl implements CallroutingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CallroutingServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.CallroutingDao")
    private WMGenericDao<Callrouting, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Callrouting, Double> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Callrouting create(Callrouting callrouting) {
        LOGGER.debug("Creating a new Callrouting with information: {}", callrouting);
        Callrouting callroutingCreated = this.wmGenericDao.create(callrouting);
        return callroutingCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Callrouting getById(Double callroutingId) throws EntityNotFoundException {
        LOGGER.debug("Finding Callrouting by id: {}", callroutingId);
        Callrouting callrouting = this.wmGenericDao.findById(callroutingId);
        if (callrouting == null){
            LOGGER.debug("No Callrouting found with id: {}", callroutingId);
            throw new EntityNotFoundException(String.valueOf(callroutingId));
        }
        return callrouting;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Callrouting findById(Double callroutingId) {
        LOGGER.debug("Finding Callrouting by id: {}", callroutingId);
        return this.wmGenericDao.findById(callroutingId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Callrouting update(Callrouting callrouting) throws EntityNotFoundException {
        LOGGER.debug("Updating Callrouting with information: {}", callrouting);
        this.wmGenericDao.update(callrouting);

        Double callroutingId = callrouting.getId();

        return this.wmGenericDao.findById(callroutingId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Callrouting delete(Double callroutingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Callrouting with id: {}", callroutingId);
        Callrouting deleted = this.wmGenericDao.findById(callroutingId);
        if (deleted == null) {
            LOGGER.debug("No Callrouting found with id: {}", callroutingId);
            throw new EntityNotFoundException(String.valueOf(callroutingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Callrouting> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Callroutings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Callrouting> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Callroutings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Callrouting to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

