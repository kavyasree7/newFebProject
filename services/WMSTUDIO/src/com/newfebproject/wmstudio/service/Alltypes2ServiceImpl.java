/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Alltypes2;


/**
 * ServiceImpl object for domain model class Alltypes2.
 *
 * @see Alltypes2
 */
@Service("WMSTUDIO.Alltypes2Service")
public class Alltypes2ServiceImpl implements Alltypes2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Alltypes2ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.Alltypes2Dao")
    private WMGenericDao<Alltypes2, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Alltypes2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Alltypes2 create(Alltypes2 alltypes2) {
        LOGGER.debug("Creating a new Alltypes2 with information: {}", alltypes2);
        Alltypes2 alltypes2Created = this.wmGenericDao.create(alltypes2);
        return alltypes2Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Alltypes2 getById(Integer alltypes2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Alltypes2 by id: {}", alltypes2Id);
        Alltypes2 alltypes2 = this.wmGenericDao.findById(alltypes2Id);
        if (alltypes2 == null){
            LOGGER.debug("No Alltypes2 found with id: {}", alltypes2Id);
            throw new EntityNotFoundException(String.valueOf(alltypes2Id));
        }
        return alltypes2;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Alltypes2 findById(Integer alltypes2Id) {
        LOGGER.debug("Finding Alltypes2 by id: {}", alltypes2Id);
        return this.wmGenericDao.findById(alltypes2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Alltypes2 update(Alltypes2 alltypes2) throws EntityNotFoundException {
        LOGGER.debug("Updating Alltypes2 with information: {}", alltypes2);
        this.wmGenericDao.update(alltypes2);

        Integer alltypes2Id = alltypes2.getId();

        return this.wmGenericDao.findById(alltypes2Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Alltypes2 delete(Integer alltypes2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Alltypes2 with id: {}", alltypes2Id);
        Alltypes2 deleted = this.wmGenericDao.findById(alltypes2Id);
        if (deleted == null) {
            LOGGER.debug("No Alltypes2 found with id: {}", alltypes2Id);
            throw new EntityNotFoundException(String.valueOf(alltypes2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Alltypes2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Alltypes2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Alltypes2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Alltypes2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Alltypes2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

