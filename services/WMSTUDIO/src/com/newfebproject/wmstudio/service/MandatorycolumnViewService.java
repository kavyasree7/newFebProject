/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.MandatorycolumnView;
import com.newfebproject.wmstudio.MandatorycolumnViewId;

/**
 * Service object for domain model class {@link MandatorycolumnView}.
 */
public interface MandatorycolumnViewService {

    /**
     * Creates a new MandatorycolumnView. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MandatorycolumnView if any.
     *
     * @param mandatorycolumnView Details of the MandatorycolumnView to be created; value cannot be null.
     * @return The newly created MandatorycolumnView.
     */
	MandatorycolumnView create(MandatorycolumnView mandatorycolumnView);


	/**
	 * Returns MandatorycolumnView by given id if exists.
	 *
	 * @param mandatorycolumnviewId The id of the MandatorycolumnView to get; value cannot be null.
	 * @return MandatorycolumnView associated with the given mandatorycolumnviewId.
     * @throws EntityNotFoundException If no MandatorycolumnView is found.
	 */
	MandatorycolumnView getById(MandatorycolumnViewId mandatorycolumnviewId) throws EntityNotFoundException;

    /**
	 * Find and return the MandatorycolumnView by given id if exists, returns null otherwise.
	 *
	 * @param mandatorycolumnviewId The id of the MandatorycolumnView to get; value cannot be null.
	 * @return MandatorycolumnView associated with the given mandatorycolumnviewId.
	 */
	MandatorycolumnView findById(MandatorycolumnViewId mandatorycolumnviewId);


	/**
	 * Updates the details of an existing MandatorycolumnView. It replaces all fields of the existing MandatorycolumnView with the given mandatorycolumnView.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on MandatorycolumnView if any.
     *
	 * @param mandatorycolumnView The details of the MandatorycolumnView to be updated; value cannot be null.
	 * @return The updated MandatorycolumnView.
	 * @throws EntityNotFoundException if no MandatorycolumnView is found with given input.
	 */
	MandatorycolumnView update(MandatorycolumnView mandatorycolumnView) throws EntityNotFoundException;

    /**
	 * Deletes an existing MandatorycolumnView with the given id.
	 *
	 * @param mandatorycolumnviewId The id of the MandatorycolumnView to be deleted; value cannot be null.
	 * @return The deleted MandatorycolumnView.
	 * @throws EntityNotFoundException if no MandatorycolumnView found with the given id.
	 */
	MandatorycolumnView delete(MandatorycolumnViewId mandatorycolumnviewId) throws EntityNotFoundException;

	/**
	 * Find all MandatorycolumnViews matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MandatorycolumnViews.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<MandatorycolumnView> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all MandatorycolumnViews matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MandatorycolumnViews.
     *
     * @see Pageable
     * @see Page
	 */
    Page<MandatorycolumnView> findAll(String query, Pageable pageable);

    /**
	 * Exports all MandatorycolumnViews matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the MandatorycolumnViews in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the MandatorycolumnView.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

