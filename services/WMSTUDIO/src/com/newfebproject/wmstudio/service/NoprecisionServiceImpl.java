/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Noprecision;
import com.newfebproject.wmstudio.NoprecisionId;


/**
 * ServiceImpl object for domain model class Noprecision.
 *
 * @see Noprecision
 */
@Service("WMSTUDIO.NoprecisionService")
public class NoprecisionServiceImpl implements NoprecisionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NoprecisionServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.NoprecisionDao")
    private WMGenericDao<Noprecision, NoprecisionId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Noprecision, NoprecisionId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Noprecision create(Noprecision noprecisionInstance) {
        LOGGER.debug("Creating a new Noprecision with information: {}", noprecisionInstance);
        Noprecision noprecisionInstanceCreated = this.wmGenericDao.create(noprecisionInstance);
        return noprecisionInstanceCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Noprecision getById(NoprecisionId noprecisionId) throws EntityNotFoundException {
        LOGGER.debug("Finding Noprecision by id: {}", noprecisionId);
        Noprecision noprecisionInstance = this.wmGenericDao.findById(noprecisionId);
        if (noprecisionInstance == null){
            LOGGER.debug("No Noprecision found with id: {}", noprecisionId);
            throw new EntityNotFoundException(String.valueOf(noprecisionId));
        }
        return noprecisionInstance;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Noprecision findById(NoprecisionId noprecisionId) {
        LOGGER.debug("Finding Noprecision by id: {}", noprecisionId);
        return this.wmGenericDao.findById(noprecisionId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Noprecision update(Noprecision noprecisionInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating Noprecision with information: {}", noprecisionInstance);
        this.wmGenericDao.update(noprecisionInstance);

        NoprecisionId noprecisionId = new NoprecisionId();
        noprecisionId.setNoprecision(noprecisionInstance.getNoprecision());
        noprecisionId.setStringColumn(noprecisionInstance.getStringColumn());

        return this.wmGenericDao.findById(noprecisionId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Noprecision delete(NoprecisionId noprecisionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Noprecision with id: {}", noprecisionId);
        Noprecision deleted = this.wmGenericDao.findById(noprecisionId);
        if (deleted == null) {
            LOGGER.debug("No Noprecision found with id: {}", noprecisionId);
            throw new EntityNotFoundException(String.valueOf(noprecisionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Noprecision> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Noprecisions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Noprecision> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Noprecisions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Noprecision to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

