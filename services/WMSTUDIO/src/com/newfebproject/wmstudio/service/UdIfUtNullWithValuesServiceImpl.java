/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdIfUtNullWithValues;


/**
 * ServiceImpl object for domain model class UdIfUtNullWithValues.
 *
 * @see UdIfUtNullWithValues
 */
@Service("WMSTUDIO.UdIfUtNullWithValuesService")
public class UdIfUtNullWithValuesServiceImpl implements UdIfUtNullWithValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdIfUtNullWithValuesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.UdIfUtNullWithValuesDao")
    private WMGenericDao<UdIfUtNullWithValues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UdIfUtNullWithValues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public UdIfUtNullWithValues create(UdIfUtNullWithValues udIfUtNullWithValues) {
        LOGGER.debug("Creating a new UdIfUtNullWithValues with information: {}", udIfUtNullWithValues);
        UdIfUtNullWithValues udIfUtNullWithValuesCreated = this.wmGenericDao.create(udIfUtNullWithValues);
        return udIfUtNullWithValuesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdIfUtNullWithValues getById(Integer udifutnullwithvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Finding UdIfUtNullWithValues by id: {}", udifutnullwithvaluesId);
        UdIfUtNullWithValues udIfUtNullWithValues = this.wmGenericDao.findById(udifutnullwithvaluesId);
        if (udIfUtNullWithValues == null){
            LOGGER.debug("No UdIfUtNullWithValues found with id: {}", udifutnullwithvaluesId);
            throw new EntityNotFoundException(String.valueOf(udifutnullwithvaluesId));
        }
        return udIfUtNullWithValues;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UdIfUtNullWithValues findById(Integer udifutnullwithvaluesId) {
        LOGGER.debug("Finding UdIfUtNullWithValues by id: {}", udifutnullwithvaluesId);
        return this.wmGenericDao.findById(udifutnullwithvaluesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public UdIfUtNullWithValues update(UdIfUtNullWithValues udIfUtNullWithValues) throws EntityNotFoundException {
        LOGGER.debug("Updating UdIfUtNullWithValues with information: {}", udIfUtNullWithValues);
        this.wmGenericDao.update(udIfUtNullWithValues);

        Integer udifutnullwithvaluesId = udIfUtNullWithValues.getIdCol();

        return this.wmGenericDao.findById(udifutnullwithvaluesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public UdIfUtNullWithValues delete(Integer udifutnullwithvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdIfUtNullWithValues with id: {}", udifutnullwithvaluesId);
        UdIfUtNullWithValues deleted = this.wmGenericDao.findById(udifutnullwithvaluesId);
        if (deleted == null) {
            LOGGER.debug("No UdIfUtNullWithValues found with id: {}", udifutnullwithvaluesId);
            throw new EntityNotFoundException(String.valueOf(udifutnullwithvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<UdIfUtNullWithValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UdIfUtNullWithValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<UdIfUtNullWithValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UdIfUtNullWithValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table UdIfUtNullWithValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

