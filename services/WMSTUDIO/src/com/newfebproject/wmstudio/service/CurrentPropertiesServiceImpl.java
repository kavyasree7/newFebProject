/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CurrentProperties;


/**
 * ServiceImpl object for domain model class CurrentProperties.
 *
 * @see CurrentProperties
 */
@Service("WMSTUDIO.CurrentPropertiesService")
public class CurrentPropertiesServiceImpl implements CurrentPropertiesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CurrentPropertiesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.CurrentPropertiesDao")
    private WMGenericDao<CurrentProperties, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CurrentProperties, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public CurrentProperties create(CurrentProperties currentProperties) {
        LOGGER.debug("Creating a new CurrentProperties with information: {}", currentProperties);
        CurrentProperties currentPropertiesCreated = this.wmGenericDao.create(currentProperties);
        return currentPropertiesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CurrentProperties getById(Integer currentpropertiesId) throws EntityNotFoundException {
        LOGGER.debug("Finding CurrentProperties by id: {}", currentpropertiesId);
        CurrentProperties currentProperties = this.wmGenericDao.findById(currentpropertiesId);
        if (currentProperties == null){
            LOGGER.debug("No CurrentProperties found with id: {}", currentpropertiesId);
            throw new EntityNotFoundException(String.valueOf(currentpropertiesId));
        }
        return currentProperties;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CurrentProperties findById(Integer currentpropertiesId) {
        LOGGER.debug("Finding CurrentProperties by id: {}", currentpropertiesId);
        return this.wmGenericDao.findById(currentpropertiesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public CurrentProperties update(CurrentProperties currentProperties) throws EntityNotFoundException {
        LOGGER.debug("Updating CurrentProperties with information: {}", currentProperties);
        this.wmGenericDao.update(currentProperties);

        Integer currentpropertiesId = currentProperties.getUserid();

        return this.wmGenericDao.findById(currentpropertiesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public CurrentProperties delete(Integer currentpropertiesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CurrentProperties with id: {}", currentpropertiesId);
        CurrentProperties deleted = this.wmGenericDao.findById(currentpropertiesId);
        if (deleted == null) {
            LOGGER.debug("No CurrentProperties found with id: {}", currentpropertiesId);
            throw new EntityNotFoundException(String.valueOf(currentpropertiesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<CurrentProperties> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CurrentProperties");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<CurrentProperties> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CurrentProperties");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table CurrentProperties to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

