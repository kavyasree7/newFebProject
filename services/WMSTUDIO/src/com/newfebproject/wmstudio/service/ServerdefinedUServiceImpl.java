/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.ServerdefinedU;


/**
 * ServiceImpl object for domain model class ServerdefinedU.
 *
 * @see ServerdefinedU
 */
@Service("WMSTUDIO.ServerdefinedUService")
public class ServerdefinedUServiceImpl implements ServerdefinedUService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerdefinedUServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.ServerdefinedUDao")
    private WMGenericDao<ServerdefinedU, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ServerdefinedU, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public ServerdefinedU create(ServerdefinedU serverdefinedU) {
        LOGGER.debug("Creating a new ServerdefinedU with information: {}", serverdefinedU);
        ServerdefinedU serverdefinedUCreated = this.wmGenericDao.create(serverdefinedU);
        return serverdefinedUCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedU getById(Integer serverdefineduId) throws EntityNotFoundException {
        LOGGER.debug("Finding ServerdefinedU by id: {}", serverdefineduId);
        ServerdefinedU serverdefinedU = this.wmGenericDao.findById(serverdefineduId);
        if (serverdefinedU == null){
            LOGGER.debug("No ServerdefinedU found with id: {}", serverdefineduId);
            throw new EntityNotFoundException(String.valueOf(serverdefineduId));
        }
        return serverdefinedU;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedU findById(Integer serverdefineduId) {
        LOGGER.debug("Finding ServerdefinedU by id: {}", serverdefineduId);
        return this.wmGenericDao.findById(serverdefineduId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedU update(ServerdefinedU serverdefinedU) throws EntityNotFoundException {
        LOGGER.debug("Updating ServerdefinedU with information: {}", serverdefinedU);
        this.wmGenericDao.update(serverdefinedU);

        Integer serverdefineduId = serverdefinedU.getServerdefinedId();

        return this.wmGenericDao.findById(serverdefineduId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedU delete(Integer serverdefineduId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ServerdefinedU with id: {}", serverdefineduId);
        ServerdefinedU deleted = this.wmGenericDao.findById(serverdefineduId);
        if (deleted == null) {
            LOGGER.debug("No ServerdefinedU found with id: {}", serverdefineduId);
            throw new EntityNotFoundException(String.valueOf(serverdefineduId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<ServerdefinedU> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ServerdefinedUs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<ServerdefinedU> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ServerdefinedUs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table ServerdefinedU to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

