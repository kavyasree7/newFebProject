/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.JoiningDetails;
import com.newfebproject.wmstudio.SalaryDetails;


/**
 * ServiceImpl object for domain model class SalaryDetails.
 *
 * @see SalaryDetails
 */
@Service("WMSTUDIO.SalaryDetailsService")
public class SalaryDetailsServiceImpl implements SalaryDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalaryDetailsServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.JoiningDetailsService")
	private JoiningDetailsService joiningDetailsService;

    @Autowired
    @Qualifier("WMSTUDIO.SalaryDetailsDao")
    private WMGenericDao<SalaryDetails, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SalaryDetails, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public SalaryDetails create(SalaryDetails salaryDetails) {
        LOGGER.debug("Creating a new SalaryDetails with information: {}", salaryDetails);
        SalaryDetails salaryDetailsCreated = this.wmGenericDao.create(salaryDetails);
        if(salaryDetailsCreated.getJoiningDetailses() != null) {
            for(JoiningDetails joiningDetailse : salaryDetailsCreated.getJoiningDetailses()) {
                joiningDetailse.setSalaryDetails(salaryDetailsCreated);
                LOGGER.debug("Creating a new child JoiningDetails with information: {}", joiningDetailse);
                joiningDetailsService.create(joiningDetailse);
            }
        }
        return salaryDetailsCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public SalaryDetails getById(String salarydetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding SalaryDetails by id: {}", salarydetailsId);
        SalaryDetails salaryDetails = this.wmGenericDao.findById(salarydetailsId);
        if (salaryDetails == null){
            LOGGER.debug("No SalaryDetails found with id: {}", salarydetailsId);
            throw new EntityNotFoundException(String.valueOf(salarydetailsId));
        }
        return salaryDetails;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public SalaryDetails findById(String salarydetailsId) {
        LOGGER.debug("Finding SalaryDetails by id: {}", salarydetailsId);
        return this.wmGenericDao.findById(salarydetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public SalaryDetails update(SalaryDetails salaryDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating SalaryDetails with information: {}", salaryDetails);
        this.wmGenericDao.update(salaryDetails);

        String salarydetailsId = salaryDetails.getAccountId();

        return this.wmGenericDao.findById(salarydetailsId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public SalaryDetails delete(String salarydetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SalaryDetails with id: {}", salarydetailsId);
        SalaryDetails deleted = this.wmGenericDao.findById(salarydetailsId);
        if (deleted == null) {
            LOGGER.debug("No SalaryDetails found with id: {}", salarydetailsId);
            throw new EntityNotFoundException(String.valueOf(salarydetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<SalaryDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SalaryDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<SalaryDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SalaryDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table SalaryDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<JoiningDetails> findAssociatedJoiningDetailses(String accountId, Pageable pageable) {
        LOGGER.debug("Fetching all associated joiningDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("salaryDetails.accountId = '" + accountId + "'");

        return joiningDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JoiningDetailsService instance
	 */
	protected void setJoiningDetailsService(JoiningDetailsService service) {
        this.joiningDetailsService = service;
    }

}

