/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Departments;
import com.newfebproject.wmstudio.Employees;
import com.newfebproject.wmstudio.JobHistory;


/**
 * ServiceImpl object for domain model class Departments.
 *
 * @see Departments
 */
@Service("WMSTUDIO.DepartmentsService")
public class DepartmentsServiceImpl implements DepartmentsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentsServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.EmployeesService")
	private EmployeesService employeesService;

    @Autowired
	@Qualifier("WMSTUDIO.JobHistoryService")
	private JobHistoryService jobHistoryService;

    @Autowired
    @Qualifier("WMSTUDIO.DepartmentsDao")
    private WMGenericDao<Departments, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Departments, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Departments create(Departments departments) {
        LOGGER.debug("Creating a new Departments with information: {}", departments);
        Departments departmentsCreated = this.wmGenericDao.create(departments);
        if(departmentsCreated.getJobHistories() != null) {
            for(JobHistory jobHistorie : departmentsCreated.getJobHistories()) {
                jobHistorie.setDepartments(departmentsCreated);
                LOGGER.debug("Creating a new child JobHistory with information: {}", jobHistorie);
                jobHistoryService.create(jobHistorie);
            }
        }

        if(departmentsCreated.getEmployeesesForDepartmentId() != null) {
            for(Employees employeesesForDepartmentId : departmentsCreated.getEmployeesesForDepartmentId()) {
                employeesesForDepartmentId.setDepartmentsByDepartmentId(departmentsCreated);
                LOGGER.debug("Creating a new child Employees with information: {}", employeesesForDepartmentId);
                employeesService.create(employeesesForDepartmentId);
            }
        }
        return departmentsCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Departments getById(Short departmentsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Departments by id: {}", departmentsId);
        Departments departments = this.wmGenericDao.findById(departmentsId);
        if (departments == null){
            LOGGER.debug("No Departments found with id: {}", departmentsId);
            throw new EntityNotFoundException(String.valueOf(departmentsId));
        }
        return departments;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Departments findById(Short departmentsId) {
        LOGGER.debug("Finding Departments by id: {}", departmentsId);
        return this.wmGenericDao.findById(departmentsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Departments update(Departments departments) throws EntityNotFoundException {
        LOGGER.debug("Updating Departments with information: {}", departments);
        this.wmGenericDao.update(departments);

        Short departmentsId = departments.getDepartmentId();

        return this.wmGenericDao.findById(departmentsId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Departments delete(Short departmentsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Departments with id: {}", departmentsId);
        Departments deleted = this.wmGenericDao.findById(departmentsId);
        if (deleted == null) {
            LOGGER.debug("No Departments found with id: {}", departmentsId);
            throw new EntityNotFoundException(String.valueOf(departmentsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Departments> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Departments> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Departments to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<JobHistory> findAssociatedJobHistories(Short departmentId, Pageable pageable) {
        LOGGER.debug("Fetching all associated jobHistories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("departments.departmentId = '" + departmentId + "'");

        return jobHistoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Employees> findAssociatedEmployeesesForDepartmentId(Short departmentId, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeesesForDepartmentId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("departmentsByDepartmentId.departmentId = '" + departmentId + "'");

        return employeesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeesService instance
	 */
	protected void setEmployeesService(EmployeesService service) {
        this.employeesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JobHistoryService instance
	 */
	protected void setJobHistoryService(JobHistoryService service) {
        this.jobHistoryService = service;
    }

}

