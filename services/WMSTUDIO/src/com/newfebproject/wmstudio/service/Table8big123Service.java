/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Table8big123;

/**
 * Service object for domain model class {@link Table8big123}.
 */
public interface Table8big123Service {

    /**
     * Creates a new Table8big123. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table8big123 if any.
     *
     * @param table8big123 Details of the Table8big123 to be created; value cannot be null.
     * @return The newly created Table8big123.
     */
	Table8big123 create(Table8big123 table8big123);


	/**
	 * Returns Table8big123 by given id if exists.
	 *
	 * @param table8big123Id The id of the Table8big123 to get; value cannot be null.
	 * @return Table8big123 associated with the given table8big123Id.
     * @throws EntityNotFoundException If no Table8big123 is found.
	 */
	Table8big123 getById(BigInteger table8big123Id) throws EntityNotFoundException;

    /**
	 * Find and return the Table8big123 by given id if exists, returns null otherwise.
	 *
	 * @param table8big123Id The id of the Table8big123 to get; value cannot be null.
	 * @return Table8big123 associated with the given table8big123Id.
	 */
	Table8big123 findById(BigInteger table8big123Id);


	/**
	 * Updates the details of an existing Table8big123. It replaces all fields of the existing Table8big123 with the given table8big123.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Table8big123 if any.
     *
	 * @param table8big123 The details of the Table8big123 to be updated; value cannot be null.
	 * @return The updated Table8big123.
	 * @throws EntityNotFoundException if no Table8big123 is found with given input.
	 */
	Table8big123 update(Table8big123 table8big123) throws EntityNotFoundException;

    /**
	 * Deletes an existing Table8big123 with the given id.
	 *
	 * @param table8big123Id The id of the Table8big123 to be deleted; value cannot be null.
	 * @return The deleted Table8big123.
	 * @throws EntityNotFoundException if no Table8big123 found with the given id.
	 */
	Table8big123 delete(BigInteger table8big123Id) throws EntityNotFoundException;

	/**
	 * Find all Table8big123s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table8big123s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Table8big123> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Table8big123s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table8big123s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Table8big123> findAll(String query, Pageable pageable);

    /**
	 * Exports all Table8big123s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Table8big123s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Table8big123.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

