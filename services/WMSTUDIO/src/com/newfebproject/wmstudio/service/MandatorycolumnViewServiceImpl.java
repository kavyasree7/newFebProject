/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.MandatorycolumnView;
import com.newfebproject.wmstudio.MandatorycolumnViewId;


/**
 * ServiceImpl object for domain model class MandatorycolumnView.
 *
 * @see MandatorycolumnView
 */
@Service("WMSTUDIO.MandatorycolumnViewService")
public class MandatorycolumnViewServiceImpl implements MandatorycolumnViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MandatorycolumnViewServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.MandatorycolumnViewDao")
    private WMGenericDao<MandatorycolumnView, MandatorycolumnViewId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MandatorycolumnView, MandatorycolumnViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public MandatorycolumnView create(MandatorycolumnView mandatorycolumnView) {
        LOGGER.debug("Creating a new MandatorycolumnView with information: {}", mandatorycolumnView);
        MandatorycolumnView mandatorycolumnViewCreated = this.wmGenericDao.create(mandatorycolumnView);
        return mandatorycolumnViewCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public MandatorycolumnView getById(MandatorycolumnViewId mandatorycolumnviewId) throws EntityNotFoundException {
        LOGGER.debug("Finding MandatorycolumnView by id: {}", mandatorycolumnviewId);
        MandatorycolumnView mandatorycolumnView = this.wmGenericDao.findById(mandatorycolumnviewId);
        if (mandatorycolumnView == null){
            LOGGER.debug("No MandatorycolumnView found with id: {}", mandatorycolumnviewId);
            throw new EntityNotFoundException(String.valueOf(mandatorycolumnviewId));
        }
        return mandatorycolumnView;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public MandatorycolumnView findById(MandatorycolumnViewId mandatorycolumnviewId) {
        LOGGER.debug("Finding MandatorycolumnView by id: {}", mandatorycolumnviewId);
        return this.wmGenericDao.findById(mandatorycolumnviewId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public MandatorycolumnView update(MandatorycolumnView mandatorycolumnView) throws EntityNotFoundException {
        LOGGER.debug("Updating MandatorycolumnView with information: {}", mandatorycolumnView);
        this.wmGenericDao.update(mandatorycolumnView);

        MandatorycolumnViewId mandatorycolumnviewId = new MandatorycolumnViewId();
        mandatorycolumnviewId.setId(mandatorycolumnView.getId());
        mandatorycolumnviewId.setColumn1(mandatorycolumnView.getColumn1());
        mandatorycolumnviewId.setColumn3Optional(mandatorycolumnView.getColumn3Optional());

        return this.wmGenericDao.findById(mandatorycolumnviewId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public MandatorycolumnView delete(MandatorycolumnViewId mandatorycolumnviewId) throws EntityNotFoundException {
        LOGGER.debug("Deleting MandatorycolumnView with id: {}", mandatorycolumnviewId);
        MandatorycolumnView deleted = this.wmGenericDao.findById(mandatorycolumnviewId);
        if (deleted == null) {
            LOGGER.debug("No MandatorycolumnView found with id: {}", mandatorycolumnviewId);
            throw new EntityNotFoundException(String.valueOf(mandatorycolumnviewId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<MandatorycolumnView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MandatorycolumnViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<MandatorycolumnView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MandatorycolumnViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table MandatorycolumnView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

