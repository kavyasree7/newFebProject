/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.VirtualO2oParent;
import com.newfebproject.wmstudio.VirtualO2oParentId;

/**
 * Service object for domain model class {@link VirtualO2oParent}.
 */
public interface VirtualO2oParentService {

    /**
     * Creates a new VirtualO2oParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualO2oParent if any.
     *
     * @param virtualO2oParent Details of the VirtualO2oParent to be created; value cannot be null.
     * @return The newly created VirtualO2oParent.
     */
	VirtualO2oParent create(VirtualO2oParent virtualO2oParent);


	/**
	 * Returns VirtualO2oParent by given id if exists.
	 *
	 * @param virtualo2oparentId The id of the VirtualO2oParent to get; value cannot be null.
	 * @return VirtualO2oParent associated with the given virtualo2oparentId.
     * @throws EntityNotFoundException If no VirtualO2oParent is found.
	 */
	VirtualO2oParent getById(VirtualO2oParentId virtualo2oparentId) throws EntityNotFoundException;

    /**
	 * Find and return the VirtualO2oParent by given id if exists, returns null otherwise.
	 *
	 * @param virtualo2oparentId The id of the VirtualO2oParent to get; value cannot be null.
	 * @return VirtualO2oParent associated with the given virtualo2oparentId.
	 */
	VirtualO2oParent findById(VirtualO2oParentId virtualo2oparentId);


	/**
	 * Updates the details of an existing VirtualO2oParent. It replaces all fields of the existing VirtualO2oParent with the given virtualO2oParent.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualO2oParent if any.
     *
	 * @param virtualO2oParent The details of the VirtualO2oParent to be updated; value cannot be null.
	 * @return The updated VirtualO2oParent.
	 * @throws EntityNotFoundException if no VirtualO2oParent is found with given input.
	 */
	VirtualO2oParent update(VirtualO2oParent virtualO2oParent) throws EntityNotFoundException;

    /**
	 * Deletes an existing VirtualO2oParent with the given id.
	 *
	 * @param virtualo2oparentId The id of the VirtualO2oParent to be deleted; value cannot be null.
	 * @return The deleted VirtualO2oParent.
	 * @throws EntityNotFoundException if no VirtualO2oParent found with the given id.
	 */
	VirtualO2oParent delete(VirtualO2oParentId virtualo2oparentId) throws EntityNotFoundException;

	/**
	 * Find all VirtualO2oParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualO2oParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<VirtualO2oParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all VirtualO2oParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualO2oParents.
     *
     * @see Pageable
     * @see Page
	 */
    Page<VirtualO2oParent> findAll(String query, Pageable pageable);

    /**
	 * Exports all VirtualO2oParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the VirtualO2oParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the VirtualO2oParent.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

