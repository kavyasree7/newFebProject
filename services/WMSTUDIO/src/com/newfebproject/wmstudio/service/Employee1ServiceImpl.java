/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Employee1;


/**
 * ServiceImpl object for domain model class Employee1.
 *
 * @see Employee1
 */
@Service("WMSTUDIO.Employee1Service")
public class Employee1ServiceImpl implements Employee1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Employee1ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.Employee1Dao")
    private WMGenericDao<Employee1, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Employee1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Employee1 create(Employee1 employee1) {
        LOGGER.debug("Creating a new Employee1 with information: {}", employee1);
        Employee1 employee1Created = this.wmGenericDao.create(employee1);
        return employee1Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Employee1 getById(Integer employee1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Employee1 by id: {}", employee1Id);
        Employee1 employee1 = this.wmGenericDao.findById(employee1Id);
        if (employee1 == null){
            LOGGER.debug("No Employee1 found with id: {}", employee1Id);
            throw new EntityNotFoundException(String.valueOf(employee1Id));
        }
        return employee1;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Employee1 findById(Integer employee1Id) {
        LOGGER.debug("Finding Employee1 by id: {}", employee1Id);
        return this.wmGenericDao.findById(employee1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Employee1 update(Employee1 employee1) throws EntityNotFoundException {
        LOGGER.debug("Updating Employee1 with information: {}", employee1);
        this.wmGenericDao.update(employee1);

        Integer employee1Id = employee1.getId();

        return this.wmGenericDao.findById(employee1Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Employee1 delete(Integer employee1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employee1 with id: {}", employee1Id);
        Employee1 deleted = this.wmGenericDao.findById(employee1Id);
        if (deleted == null) {
            LOGGER.debug("No Employee1 found with id: {}", employee1Id);
            throw new EntityNotFoundException(String.valueOf(employee1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Employee1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Employee1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Employee1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Employee1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Employee1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

