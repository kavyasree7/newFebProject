/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CfgSkill1;
import com.newfebproject.wmstudio.Skill;


/**
 * ServiceImpl object for domain model class CfgSkill1.
 *
 * @see CfgSkill1
 */
@Service("WMSTUDIO.CfgSkill1Service")
public class CfgSkill1ServiceImpl implements CfgSkill1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(CfgSkill1ServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.SkillService")
	private SkillService skillService;

    @Autowired
    @Qualifier("WMSTUDIO.CfgSkill1Dao")
    private WMGenericDao<CfgSkill1, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CfgSkill1, Double> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public CfgSkill1 create(CfgSkill1 cfgSkill1) {
        LOGGER.debug("Creating a new CfgSkill1 with information: {}", cfgSkill1);
        CfgSkill1 cfgSkill1Created = this.wmGenericDao.create(cfgSkill1);
        if(cfgSkill1Created.getSkills() != null) {
            for(Skill skill : cfgSkill1Created.getSkills()) {
                skill.setCfgSkill1(cfgSkill1Created);
                LOGGER.debug("Creating a new child Skill with information: {}", skill);
                skillService.create(skill);
            }
        }
        return cfgSkill1Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill1 getById(Double cfgskill1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding CfgSkill1 by id: {}", cfgskill1Id);
        CfgSkill1 cfgSkill1 = this.wmGenericDao.findById(cfgskill1Id);
        if (cfgSkill1 == null){
            LOGGER.debug("No CfgSkill1 found with id: {}", cfgskill1Id);
            throw new EntityNotFoundException(String.valueOf(cfgskill1Id));
        }
        return cfgSkill1;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill1 findById(Double cfgskill1Id) {
        LOGGER.debug("Finding CfgSkill1 by id: {}", cfgskill1Id);
        return this.wmGenericDao.findById(cfgskill1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill1 update(CfgSkill1 cfgSkill1) throws EntityNotFoundException {
        LOGGER.debug("Updating CfgSkill1 with information: {}", cfgSkill1);
        this.wmGenericDao.update(cfgSkill1);

        Double cfgskill1Id = cfgSkill1.getId();

        return this.wmGenericDao.findById(cfgskill1Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public CfgSkill1 delete(Double cfgskill1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CfgSkill1 with id: {}", cfgskill1Id);
        CfgSkill1 deleted = this.wmGenericDao.findById(cfgskill1Id);
        if (deleted == null) {
            LOGGER.debug("No CfgSkill1 found with id: {}", cfgskill1Id);
            throw new EntityNotFoundException(String.valueOf(cfgskill1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<CfgSkill1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CfgSkill1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<CfgSkill1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CfgSkill1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table CfgSkill1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Skill> findAssociatedSkills(Double id, Pageable pageable) {
        LOGGER.debug("Fetching all associated skills");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("cfgSkill1.id = '" + id + "'");

        return skillService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SkillService instance
	 */
	protected void setSkillService(SkillService service) {
        this.skillService = service;
    }

}

