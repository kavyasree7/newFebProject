/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Scenario1;


/**
 * ServiceImpl object for domain model class Scenario1.
 *
 * @see Scenario1
 */
@Service("WMSTUDIO.Scenario1Service")
public class Scenario1ServiceImpl implements Scenario1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Scenario1ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.Scenario1Dao")
    private WMGenericDao<Scenario1, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Scenario1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Scenario1 create(Scenario1 scenario1) {
        LOGGER.debug("Creating a new Scenario1 with information: {}", scenario1);
        Scenario1 scenario1Created = this.wmGenericDao.create(scenario1);
        return scenario1Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Scenario1 getById(Integer scenario1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Scenario1 by id: {}", scenario1Id);
        Scenario1 scenario1 = this.wmGenericDao.findById(scenario1Id);
        if (scenario1 == null){
            LOGGER.debug("No Scenario1 found with id: {}", scenario1Id);
            throw new EntityNotFoundException(String.valueOf(scenario1Id));
        }
        return scenario1;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Scenario1 findById(Integer scenario1Id) {
        LOGGER.debug("Finding Scenario1 by id: {}", scenario1Id);
        return this.wmGenericDao.findById(scenario1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Scenario1 update(Scenario1 scenario1) throws EntityNotFoundException {
        LOGGER.debug("Updating Scenario1 with information: {}", scenario1);
        this.wmGenericDao.update(scenario1);

        Integer scenario1Id = scenario1.getId();

        return this.wmGenericDao.findById(scenario1Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Scenario1 delete(Integer scenario1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Scenario1 with id: {}", scenario1Id);
        Scenario1 deleted = this.wmGenericDao.findById(scenario1Id);
        if (deleted == null) {
            LOGGER.debug("No Scenario1 found with id: {}", scenario1Id);
            throw new EntityNotFoundException(String.valueOf(scenario1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Scenario1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Scenario1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Scenario1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Scenario1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Scenario1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

