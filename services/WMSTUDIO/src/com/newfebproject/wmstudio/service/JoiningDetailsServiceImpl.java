/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.JoiningDetails;


/**
 * ServiceImpl object for domain model class JoiningDetails.
 *
 * @see JoiningDetails
 */
@Service("WMSTUDIO.JoiningDetailsService")
public class JoiningDetailsServiceImpl implements JoiningDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JoiningDetailsServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.JoiningDetailsDao")
    private WMGenericDao<JoiningDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JoiningDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public JoiningDetails create(JoiningDetails joiningDetails) {
        LOGGER.debug("Creating a new JoiningDetails with information: {}", joiningDetails);
        JoiningDetails joiningDetailsCreated = this.wmGenericDao.create(joiningDetails);
        return joiningDetailsCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public JoiningDetails getById(Integer joiningdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding JoiningDetails by id: {}", joiningdetailsId);
        JoiningDetails joiningDetails = this.wmGenericDao.findById(joiningdetailsId);
        if (joiningDetails == null){
            LOGGER.debug("No JoiningDetails found with id: {}", joiningdetailsId);
            throw new EntityNotFoundException(String.valueOf(joiningdetailsId));
        }
        return joiningDetails;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public JoiningDetails findById(Integer joiningdetailsId) {
        LOGGER.debug("Finding JoiningDetails by id: {}", joiningdetailsId);
        return this.wmGenericDao.findById(joiningdetailsId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public JoiningDetails getByUserDetailsAndHike(Integer userDetails, Double hike) {
        Map<String, Object> userDetailsAndHikeMap = new HashMap<>();
        userDetailsAndHikeMap.put("userDetails", userDetails);
        userDetailsAndHikeMap.put("hike", hike);

        LOGGER.debug("Finding JoiningDetails by unique keys: {}", userDetailsAndHikeMap);
        JoiningDetails joiningDetails = this.wmGenericDao.findByUniqueKey(userDetailsAndHikeMap);

        if (joiningDetails == null){
            LOGGER.debug("No JoiningDetails found with given unique key values: {}", userDetailsAndHikeMap);
            throw new EntityNotFoundException(String.valueOf(userDetailsAndHikeMap));
        }

        return joiningDetails;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public JoiningDetails update(JoiningDetails joiningDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating JoiningDetails with information: {}", joiningDetails);
        this.wmGenericDao.update(joiningDetails);

        Integer joiningdetailsId = joiningDetails.getUserId();

        return this.wmGenericDao.findById(joiningdetailsId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public JoiningDetails delete(Integer joiningdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting JoiningDetails with id: {}", joiningdetailsId);
        JoiningDetails deleted = this.wmGenericDao.findById(joiningdetailsId);
        if (deleted == null) {
            LOGGER.debug("No JoiningDetails found with id: {}", joiningdetailsId);
            throw new EntityNotFoundException(String.valueOf(joiningdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<JoiningDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JoiningDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<JoiningDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JoiningDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table JoiningDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

