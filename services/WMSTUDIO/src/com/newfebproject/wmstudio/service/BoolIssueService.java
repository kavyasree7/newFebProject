/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.BoolIssue;

/**
 * Service object for domain model class {@link BoolIssue}.
 */
public interface BoolIssueService {

    /**
     * Creates a new BoolIssue. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BoolIssue if any.
     *
     * @param boolIssue Details of the BoolIssue to be created; value cannot be null.
     * @return The newly created BoolIssue.
     */
	BoolIssue create(BoolIssue boolIssue);


	/**
	 * Returns BoolIssue by given id if exists.
	 *
	 * @param boolissueId The id of the BoolIssue to get; value cannot be null.
	 * @return BoolIssue associated with the given boolissueId.
     * @throws EntityNotFoundException If no BoolIssue is found.
	 */
	BoolIssue getById(Integer boolissueId) throws EntityNotFoundException;

    /**
	 * Find and return the BoolIssue by given id if exists, returns null otherwise.
	 *
	 * @param boolissueId The id of the BoolIssue to get; value cannot be null.
	 * @return BoolIssue associated with the given boolissueId.
	 */
	BoolIssue findById(Integer boolissueId);


	/**
	 * Updates the details of an existing BoolIssue. It replaces all fields of the existing BoolIssue with the given boolIssue.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on BoolIssue if any.
     *
	 * @param boolIssue The details of the BoolIssue to be updated; value cannot be null.
	 * @return The updated BoolIssue.
	 * @throws EntityNotFoundException if no BoolIssue is found with given input.
	 */
	BoolIssue update(BoolIssue boolIssue) throws EntityNotFoundException;

    /**
	 * Deletes an existing BoolIssue with the given id.
	 *
	 * @param boolissueId The id of the BoolIssue to be deleted; value cannot be null.
	 * @return The deleted BoolIssue.
	 * @throws EntityNotFoundException if no BoolIssue found with the given id.
	 */
	BoolIssue delete(Integer boolissueId) throws EntityNotFoundException;

	/**
	 * Find all BoolIssues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BoolIssues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<BoolIssue> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all BoolIssues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BoolIssues.
     *
     * @see Pageable
     * @see Page
	 */
    Page<BoolIssue> findAll(String query, Pageable pageable);

    /**
	 * Exports all BoolIssues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BoolIssues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the BoolIssue.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

