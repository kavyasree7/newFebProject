/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.VirtualO2oParent1;
import com.newfebproject.wmstudio.VirtualO2oParent1Id;


/**
 * ServiceImpl object for domain model class VirtualO2oParent1.
 *
 * @see VirtualO2oParent1
 */
@Service("WMSTUDIO.VirtualO2oParent1Service")
public class VirtualO2oParent1ServiceImpl implements VirtualO2oParent1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualO2oParent1ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.VirtualO2oParent1Dao")
    private WMGenericDao<VirtualO2oParent1, VirtualO2oParent1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualO2oParent1, VirtualO2oParent1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public VirtualO2oParent1 create(VirtualO2oParent1 virtualO2oParent1) {
        LOGGER.debug("Creating a new VirtualO2oParent1 with information: {}", virtualO2oParent1);
        VirtualO2oParent1 virtualO2oParent1Created = this.wmGenericDao.create(virtualO2oParent1);
        return virtualO2oParent1Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent1 getById(VirtualO2oParent1Id virtualo2oparent1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding VirtualO2oParent1 by id: {}", virtualo2oparent1Id);
        VirtualO2oParent1 virtualO2oParent1 = this.wmGenericDao.findById(virtualo2oparent1Id);
        if (virtualO2oParent1 == null){
            LOGGER.debug("No VirtualO2oParent1 found with id: {}", virtualo2oparent1Id);
            throw new EntityNotFoundException(String.valueOf(virtualo2oparent1Id));
        }
        return virtualO2oParent1;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent1 findById(VirtualO2oParent1Id virtualo2oparent1Id) {
        LOGGER.debug("Finding VirtualO2oParent1 by id: {}", virtualo2oparent1Id);
        return this.wmGenericDao.findById(virtualo2oparent1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent1 update(VirtualO2oParent1 virtualO2oParent1) throws EntityNotFoundException {
        LOGGER.debug("Updating VirtualO2oParent1 with information: {}", virtualO2oParent1);
        this.wmGenericDao.update(virtualO2oParent1);

        VirtualO2oParent1Id virtualo2oparent1Id = new VirtualO2oParent1Id();
        virtualo2oparent1Id.setId(virtualO2oParent1.getId());
        virtualo2oparent1Id.setStringColumn(virtualO2oParent1.getStringColumn());
        virtualo2oparent1Id.setBigdecimalColumn(virtualO2oParent1.getBigdecimalColumn());
        virtualo2oparent1Id.setDescColumn(virtualO2oParent1.getDescColumn());

        return this.wmGenericDao.findById(virtualo2oparent1Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oParent1 delete(VirtualO2oParent1Id virtualo2oparent1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting VirtualO2oParent1 with id: {}", virtualo2oparent1Id);
        VirtualO2oParent1 deleted = this.wmGenericDao.findById(virtualo2oparent1Id);
        if (deleted == null) {
            LOGGER.debug("No VirtualO2oParent1 found with id: {}", virtualo2oparent1Id);
            throw new EntityNotFoundException(String.valueOf(virtualo2oparent1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<VirtualO2oParent1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualO2oParent1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<VirtualO2oParent1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualO2oParent1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table VirtualO2oParent1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

