/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.OtherTypes;


/**
 * ServiceImpl object for domain model class OtherTypes.
 *
 * @see OtherTypes
 */
@Service("WMSTUDIO.OtherTypesService")
public class OtherTypesServiceImpl implements OtherTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OtherTypesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.OtherTypesDao")
    private WMGenericDao<OtherTypes, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OtherTypes, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public OtherTypes create(OtherTypes otherTypes) {
        LOGGER.debug("Creating a new OtherTypes with information: {}", otherTypes);
        OtherTypes otherTypesCreated = this.wmGenericDao.create(otherTypes);
        return otherTypesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public OtherTypes getById(BigInteger othertypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding OtherTypes by id: {}", othertypesId);
        OtherTypes otherTypes = this.wmGenericDao.findById(othertypesId);
        if (otherTypes == null){
            LOGGER.debug("No OtherTypes found with id: {}", othertypesId);
            throw new EntityNotFoundException(String.valueOf(othertypesId));
        }
        return otherTypes;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public OtherTypes findById(BigInteger othertypesId) {
        LOGGER.debug("Finding OtherTypes by id: {}", othertypesId);
        return this.wmGenericDao.findById(othertypesId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public OtherTypes getByColumn4(String column4) {
        Map<String, Object> column4Map = new HashMap<>();
        column4Map.put("column4", column4);

        LOGGER.debug("Finding OtherTypes by unique keys: {}", column4Map);
        OtherTypes otherTypes = this.wmGenericDao.findByUniqueKey(column4Map);

        if (otherTypes == null){
            LOGGER.debug("No OtherTypes found with given unique key values: {}", column4Map);
            throw new EntityNotFoundException(String.valueOf(column4Map));
        }

        return otherTypes;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public OtherTypes getByColumn5AndColumn6(String column5, String column6) {
        Map<String, Object> column5AndColumn6Map = new HashMap<>();
        column5AndColumn6Map.put("column5", column5);
        column5AndColumn6Map.put("column6", column6);

        LOGGER.debug("Finding OtherTypes by unique keys: {}", column5AndColumn6Map);
        OtherTypes otherTypes = this.wmGenericDao.findByUniqueKey(column5AndColumn6Map);

        if (otherTypes == null){
            LOGGER.debug("No OtherTypes found with given unique key values: {}", column5AndColumn6Map);
            throw new EntityNotFoundException(String.valueOf(column5AndColumn6Map));
        }

        return otherTypes;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public OtherTypes getByColumn4AndColumn5(String column4, String column5) {
        Map<String, Object> column4AndColumn5Map = new HashMap<>();
        column4AndColumn5Map.put("column4", column4);
        column4AndColumn5Map.put("column5", column5);

        LOGGER.debug("Finding OtherTypes by unique keys: {}", column4AndColumn5Map);
        OtherTypes otherTypes = this.wmGenericDao.findByUniqueKey(column4AndColumn5Map);

        if (otherTypes == null){
            LOGGER.debug("No OtherTypes found with given unique key values: {}", column4AndColumn5Map);
            throw new EntityNotFoundException(String.valueOf(column4AndColumn5Map));
        }

        return otherTypes;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public OtherTypes update(OtherTypes otherTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating OtherTypes with information: {}", otherTypes);
        this.wmGenericDao.update(otherTypes);

        BigInteger othertypesId = otherTypes.getOthertypeid();

        return this.wmGenericDao.findById(othertypesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public OtherTypes delete(BigInteger othertypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OtherTypes with id: {}", othertypesId);
        OtherTypes deleted = this.wmGenericDao.findById(othertypesId);
        if (deleted == null) {
            LOGGER.debug("No OtherTypes found with id: {}", othertypesId);
            throw new EntityNotFoundException(String.valueOf(othertypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<OtherTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OtherTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<OtherTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OtherTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table OtherTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

