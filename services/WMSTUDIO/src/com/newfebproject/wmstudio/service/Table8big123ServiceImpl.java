/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Table8big123;


/**
 * ServiceImpl object for domain model class Table8big123.
 *
 * @see Table8big123
 */
@Service("WMSTUDIO.Table8big123Service")
public class Table8big123ServiceImpl implements Table8big123Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table8big123ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.Table8big123Dao")
    private WMGenericDao<Table8big123, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table8big123, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Table8big123 create(Table8big123 table8big123) {
        LOGGER.debug("Creating a new Table8big123 with information: {}", table8big123);
        Table8big123 table8big123Created = this.wmGenericDao.create(table8big123);
        return table8big123Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Table8big123 getById(BigInteger table8big123Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table8big123 by id: {}", table8big123Id);
        Table8big123 table8big123 = this.wmGenericDao.findById(table8big123Id);
        if (table8big123 == null){
            LOGGER.debug("No Table8big123 found with id: {}", table8big123Id);
            throw new EntityNotFoundException(String.valueOf(table8big123Id));
        }
        return table8big123;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Table8big123 findById(BigInteger table8big123Id) {
        LOGGER.debug("Finding Table8big123 by id: {}", table8big123Id);
        return this.wmGenericDao.findById(table8big123Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Table8big123 update(Table8big123 table8big123) throws EntityNotFoundException {
        LOGGER.debug("Updating Table8big123 with information: {}", table8big123);
        this.wmGenericDao.update(table8big123);

        BigInteger table8big123Id = table8big123.getId();

        return this.wmGenericDao.findById(table8big123Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Table8big123 delete(BigInteger table8big123Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table8big123 with id: {}", table8big123Id);
        Table8big123 deleted = this.wmGenericDao.findById(table8big123Id);
        if (deleted == null) {
            LOGGER.debug("No Table8big123 found with id: {}", table8big123Id);
            throw new EntityNotFoundException(String.valueOf(table8big123Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Table8big123> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table8big123s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Table8big123> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table8big123s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Table8big123 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

