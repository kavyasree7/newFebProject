/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdUpdatableWithOutValues;

/**
 * Service object for domain model class {@link UdUpdatableWithOutValues}.
 */
public interface UdUpdatableWithOutValuesService {

    /**
     * Creates a new UdUpdatableWithOutValues. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UdUpdatableWithOutValues if any.
     *
     * @param udUpdatableWithOutValues Details of the UdUpdatableWithOutValues to be created; value cannot be null.
     * @return The newly created UdUpdatableWithOutValues.
     */
	UdUpdatableWithOutValues create(UdUpdatableWithOutValues udUpdatableWithOutValues);


	/**
	 * Returns UdUpdatableWithOutValues by given id if exists.
	 *
	 * @param udupdatablewithoutvaluesId The id of the UdUpdatableWithOutValues to get; value cannot be null.
	 * @return UdUpdatableWithOutValues associated with the given udupdatablewithoutvaluesId.
     * @throws EntityNotFoundException If no UdUpdatableWithOutValues is found.
	 */
	UdUpdatableWithOutValues getById(Integer udupdatablewithoutvaluesId) throws EntityNotFoundException;

    /**
	 * Find and return the UdUpdatableWithOutValues by given id if exists, returns null otherwise.
	 *
	 * @param udupdatablewithoutvaluesId The id of the UdUpdatableWithOutValues to get; value cannot be null.
	 * @return UdUpdatableWithOutValues associated with the given udupdatablewithoutvaluesId.
	 */
	UdUpdatableWithOutValues findById(Integer udupdatablewithoutvaluesId);


	/**
	 * Updates the details of an existing UdUpdatableWithOutValues. It replaces all fields of the existing UdUpdatableWithOutValues with the given udUpdatableWithOutValues.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on UdUpdatableWithOutValues if any.
     *
	 * @param udUpdatableWithOutValues The details of the UdUpdatableWithOutValues to be updated; value cannot be null.
	 * @return The updated UdUpdatableWithOutValues.
	 * @throws EntityNotFoundException if no UdUpdatableWithOutValues is found with given input.
	 */
	UdUpdatableWithOutValues update(UdUpdatableWithOutValues udUpdatableWithOutValues) throws EntityNotFoundException;

    /**
	 * Deletes an existing UdUpdatableWithOutValues with the given id.
	 *
	 * @param udupdatablewithoutvaluesId The id of the UdUpdatableWithOutValues to be deleted; value cannot be null.
	 * @return The deleted UdUpdatableWithOutValues.
	 * @throws EntityNotFoundException if no UdUpdatableWithOutValues found with the given id.
	 */
	UdUpdatableWithOutValues delete(Integer udupdatablewithoutvaluesId) throws EntityNotFoundException;

	/**
	 * Find all UdUpdatableWithOutValues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdUpdatableWithOutValues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<UdUpdatableWithOutValues> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all UdUpdatableWithOutValues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdUpdatableWithOutValues.
     *
     * @see Pageable
     * @see Page
	 */
    Page<UdUpdatableWithOutValues> findAll(String query, Pageable pageable);

    /**
	 * Exports all UdUpdatableWithOutValues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the UdUpdatableWithOutValues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the UdUpdatableWithOutValues.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

