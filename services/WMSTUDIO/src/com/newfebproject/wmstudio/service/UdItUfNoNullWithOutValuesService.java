/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.UdItUfNoNullWithOutValues;

/**
 * Service object for domain model class {@link UdItUfNoNullWithOutValues}.
 */
public interface UdItUfNoNullWithOutValuesService {

    /**
     * Creates a new UdItUfNoNullWithOutValues. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UdItUfNoNullWithOutValues if any.
     *
     * @param udItUfNoNullWithOutValues Details of the UdItUfNoNullWithOutValues to be created; value cannot be null.
     * @return The newly created UdItUfNoNullWithOutValues.
     */
	UdItUfNoNullWithOutValues create(UdItUfNoNullWithOutValues udItUfNoNullWithOutValues);


	/**
	 * Returns UdItUfNoNullWithOutValues by given id if exists.
	 *
	 * @param uditufnonullwithoutvaluesId The id of the UdItUfNoNullWithOutValues to get; value cannot be null.
	 * @return UdItUfNoNullWithOutValues associated with the given uditufnonullwithoutvaluesId.
     * @throws EntityNotFoundException If no UdItUfNoNullWithOutValues is found.
	 */
	UdItUfNoNullWithOutValues getById(Integer uditufnonullwithoutvaluesId) throws EntityNotFoundException;

    /**
	 * Find and return the UdItUfNoNullWithOutValues by given id if exists, returns null otherwise.
	 *
	 * @param uditufnonullwithoutvaluesId The id of the UdItUfNoNullWithOutValues to get; value cannot be null.
	 * @return UdItUfNoNullWithOutValues associated with the given uditufnonullwithoutvaluesId.
	 */
	UdItUfNoNullWithOutValues findById(Integer uditufnonullwithoutvaluesId);


	/**
	 * Updates the details of an existing UdItUfNoNullWithOutValues. It replaces all fields of the existing UdItUfNoNullWithOutValues with the given udItUfNoNullWithOutValues.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on UdItUfNoNullWithOutValues if any.
     *
	 * @param udItUfNoNullWithOutValues The details of the UdItUfNoNullWithOutValues to be updated; value cannot be null.
	 * @return The updated UdItUfNoNullWithOutValues.
	 * @throws EntityNotFoundException if no UdItUfNoNullWithOutValues is found with given input.
	 */
	UdItUfNoNullWithOutValues update(UdItUfNoNullWithOutValues udItUfNoNullWithOutValues) throws EntityNotFoundException;

    /**
	 * Deletes an existing UdItUfNoNullWithOutValues with the given id.
	 *
	 * @param uditufnonullwithoutvaluesId The id of the UdItUfNoNullWithOutValues to be deleted; value cannot be null.
	 * @return The deleted UdItUfNoNullWithOutValues.
	 * @throws EntityNotFoundException if no UdItUfNoNullWithOutValues found with the given id.
	 */
	UdItUfNoNullWithOutValues delete(Integer uditufnonullwithoutvaluesId) throws EntityNotFoundException;

	/**
	 * Find all UdItUfNoNullWithOutValues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdItUfNoNullWithOutValues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<UdItUfNoNullWithOutValues> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all UdItUfNoNullWithOutValues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UdItUfNoNullWithOutValues.
     *
     * @see Pageable
     * @see Page
	 */
    Page<UdItUfNoNullWithOutValues> findAll(String query, Pageable pageable);

    /**
	 * Exports all UdItUfNoNullWithOutValues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the UdItUfNoNullWithOutValues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the UdItUfNoNullWithOutValues.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

