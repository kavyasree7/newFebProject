/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.JoiningDetails;
import com.newfebproject.wmstudio.SalaryDetails;
import com.newfebproject.wmstudio.UserDetails;


/**
 * ServiceImpl object for domain model class UserDetails.
 *
 * @see UserDetails
 */
@Service("WMSTUDIO.UserDetailsService")
public class UserDetailsServiceImpl implements UserDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailsServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.JoiningDetailsService")
	private JoiningDetailsService joiningDetailsService;

    @Autowired
	@Qualifier("WMSTUDIO.SalaryDetailsService")
	private SalaryDetailsService salaryDetailsService;

    @Autowired
    @Qualifier("WMSTUDIO.UserDetailsDao")
    private WMGenericDao<UserDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public UserDetails create(UserDetails userDetailsInstance) {
        LOGGER.debug("Creating a new UserDetails with information: {}", userDetailsInstance);
        UserDetails userDetailsInstanceCreated = this.wmGenericDao.create(userDetailsInstance);
        if(userDetailsInstanceCreated.getJoiningDetailses() != null) {
            for(JoiningDetails joiningDetailse : userDetailsInstanceCreated.getJoiningDetailses()) {
                joiningDetailse.setUserDetailsByUserDetails(userDetailsInstanceCreated);
                LOGGER.debug("Creating a new child JoiningDetails with information: {}", joiningDetailse);
                joiningDetailsService.create(joiningDetailse);
            }
        }

        if(userDetailsInstanceCreated.getSalaryDetailses() != null) {
            for(SalaryDetails salaryDetailse : userDetailsInstanceCreated.getSalaryDetailses()) {
                salaryDetailse.setUserDetailsByUserDetails(userDetailsInstanceCreated);
                LOGGER.debug("Creating a new child SalaryDetails with information: {}", salaryDetailse);
                salaryDetailsService.create(salaryDetailse);
            }
        }
        return userDetailsInstanceCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UserDetails getById(Integer userdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding UserDetails by id: {}", userdetailsId);
        UserDetails userDetailsInstance = this.wmGenericDao.findById(userdetailsId);
        if (userDetailsInstance == null){
            LOGGER.debug("No UserDetails found with id: {}", userdetailsId);
            throw new EntityNotFoundException(String.valueOf(userdetailsId));
        }
        return userDetailsInstance;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public UserDetails findById(Integer userdetailsId) {
        LOGGER.debug("Finding UserDetails by id: {}", userdetailsId);
        return this.wmGenericDao.findById(userdetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public UserDetails update(UserDetails userDetailsInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating UserDetails with information: {}", userDetailsInstance);
        this.wmGenericDao.update(userDetailsInstance);

        Integer userdetailsId = userDetailsInstance.getUserDetails();

        return this.wmGenericDao.findById(userdetailsId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public UserDetails delete(Integer userdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserDetails with id: {}", userdetailsId);
        UserDetails deleted = this.wmGenericDao.findById(userdetailsId);
        if (deleted == null) {
            LOGGER.debug("No UserDetails found with id: {}", userdetailsId);
            throw new EntityNotFoundException(String.valueOf(userdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<UserDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<UserDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table UserDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<JoiningDetails> findAssociatedJoiningDetailses(Integer userDetails, Pageable pageable) {
        LOGGER.debug("Fetching all associated joiningDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userDetailsByUserDetails.userDetails = '" + userDetails + "'");

        return joiningDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<SalaryDetails> findAssociatedSalaryDetailses(Integer userDetails, Pageable pageable) {
        LOGGER.debug("Fetching all associated salaryDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userDetailsByUserDetails.userDetails = '" + userDetails + "'");

        return salaryDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JoiningDetailsService instance
	 */
	protected void setJoiningDetailsService(JoiningDetailsService service) {
        this.joiningDetailsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SalaryDetailsService instance
	 */
	protected void setSalaryDetailsService(SalaryDetailsService service) {
        this.salaryDetailsService = service;
    }

}

