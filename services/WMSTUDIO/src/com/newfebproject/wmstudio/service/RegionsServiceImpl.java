/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Countries;
import com.newfebproject.wmstudio.Regions;


/**
 * ServiceImpl object for domain model class Regions.
 *
 * @see Regions
 */
@Service("WMSTUDIO.RegionsService")
public class RegionsServiceImpl implements RegionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RegionsServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.CountriesService")
	private CountriesService countriesService;

    @Autowired
    @Qualifier("WMSTUDIO.RegionsDao")
    private WMGenericDao<Regions, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Regions, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Regions create(Regions regions) {
        LOGGER.debug("Creating a new Regions with information: {}", regions);
        Regions regionsCreated = this.wmGenericDao.create(regions);
        if(regionsCreated.getCountrieses() != null) {
            for(Countries countriese : regionsCreated.getCountrieses()) {
                countriese.setRegions(regionsCreated);
                LOGGER.debug("Creating a new child Countries with information: {}", countriese);
                countriesService.create(countriese);
            }
        }
        return regionsCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Regions getById(BigInteger regionsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Regions by id: {}", regionsId);
        Regions regions = this.wmGenericDao.findById(regionsId);
        if (regions == null){
            LOGGER.debug("No Regions found with id: {}", regionsId);
            throw new EntityNotFoundException(String.valueOf(regionsId));
        }
        return regions;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Regions findById(BigInteger regionsId) {
        LOGGER.debug("Finding Regions by id: {}", regionsId);
        return this.wmGenericDao.findById(regionsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Regions update(Regions regions) throws EntityNotFoundException {
        LOGGER.debug("Updating Regions with information: {}", regions);
        this.wmGenericDao.update(regions);

        BigInteger regionsId = regions.getRegionId();

        return this.wmGenericDao.findById(regionsId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Regions delete(BigInteger regionsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Regions with id: {}", regionsId);
        Regions deleted = this.wmGenericDao.findById(regionsId);
        if (deleted == null) {
            LOGGER.debug("No Regions found with id: {}", regionsId);
            throw new EntityNotFoundException(String.valueOf(regionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Regions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Regions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Regions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Regions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Regions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Countries> findAssociatedCountrieses(BigInteger regionId, Pageable pageable) {
        LOGGER.debug("Fetching all associated countrieses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("regions.regionId = '" + regionId + "'");

        return countriesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CountriesService instance
	 */
	protected void setCountriesService(CountriesService service) {
        this.countriesService = service;
    }

}

