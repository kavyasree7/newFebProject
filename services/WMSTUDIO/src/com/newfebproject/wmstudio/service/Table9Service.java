/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Table9;

/**
 * Service object for domain model class {@link Table9}.
 */
public interface Table9Service {

    /**
     * Creates a new Table9. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Table9 if any.
     *
     * @param table9 Details of the Table9 to be created; value cannot be null.
     * @return The newly created Table9.
     */
	Table9 create(Table9 table9);


	/**
	 * Returns Table9 by given id if exists.
	 *
	 * @param table9Id The id of the Table9 to get; value cannot be null.
	 * @return Table9 associated with the given table9Id.
     * @throws EntityNotFoundException If no Table9 is found.
	 */
	Table9 getById(Integer table9Id) throws EntityNotFoundException;

    /**
	 * Find and return the Table9 by given id if exists, returns null otherwise.
	 *
	 * @param table9Id The id of the Table9 to get; value cannot be null.
	 * @return Table9 associated with the given table9Id.
	 */
	Table9 findById(Integer table9Id);


	/**
	 * Updates the details of an existing Table9. It replaces all fields of the existing Table9 with the given table9.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Table9 if any.
     *
	 * @param table9 The details of the Table9 to be updated; value cannot be null.
	 * @return The updated Table9.
	 * @throws EntityNotFoundException if no Table9 is found with given input.
	 */
	Table9 update(Table9 table9) throws EntityNotFoundException;

    /**
	 * Deletes an existing Table9 with the given id.
	 *
	 * @param table9Id The id of the Table9 to be deleted; value cannot be null.
	 * @return The deleted Table9.
	 * @throws EntityNotFoundException if no Table9 found with the given id.
	 */
	Table9 delete(Integer table9Id) throws EntityNotFoundException;

	/**
	 * Find all Table9s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table9s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Table9> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Table9s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Table9s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Table9> findAll(String query, Pageable pageable);

    /**
	 * Exports all Table9s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Table9s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Table9.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

