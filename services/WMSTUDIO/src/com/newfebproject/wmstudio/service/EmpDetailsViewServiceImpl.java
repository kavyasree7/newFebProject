/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.EmpDetailsView;
import com.newfebproject.wmstudio.EmpDetailsViewId;


/**
 * ServiceImpl object for domain model class EmpDetailsView.
 *
 * @see EmpDetailsView
 */
@Service("WMSTUDIO.EmpDetailsViewService")
public class EmpDetailsViewServiceImpl implements EmpDetailsViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpDetailsViewServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.EmpDetailsViewDao")
    private WMGenericDao<EmpDetailsView, EmpDetailsViewId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmpDetailsView, EmpDetailsViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public EmpDetailsView create(EmpDetailsView empDetailsView) {
        LOGGER.debug("Creating a new EmpDetailsView with information: {}", empDetailsView);
        EmpDetailsView empDetailsViewCreated = this.wmGenericDao.create(empDetailsView);
        return empDetailsViewCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public EmpDetailsView getById(EmpDetailsViewId empdetailsviewId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmpDetailsView by id: {}", empdetailsviewId);
        EmpDetailsView empDetailsView = this.wmGenericDao.findById(empdetailsviewId);
        if (empDetailsView == null){
            LOGGER.debug("No EmpDetailsView found with id: {}", empdetailsviewId);
            throw new EntityNotFoundException(String.valueOf(empdetailsviewId));
        }
        return empDetailsView;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public EmpDetailsView findById(EmpDetailsViewId empdetailsviewId) {
        LOGGER.debug("Finding EmpDetailsView by id: {}", empdetailsviewId);
        return this.wmGenericDao.findById(empdetailsviewId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public EmpDetailsView update(EmpDetailsView empDetailsView) throws EntityNotFoundException {
        LOGGER.debug("Updating EmpDetailsView with information: {}", empDetailsView);
        this.wmGenericDao.update(empDetailsView);

        EmpDetailsViewId empdetailsviewId = new EmpDetailsViewId();
        empdetailsviewId.setEmployeeId(empDetailsView.getEmployeeId());
        empdetailsviewId.setJobId(empDetailsView.getJobId());
        empdetailsviewId.setManagerId(empDetailsView.getManagerId());
        empdetailsviewId.setDepartmentId(empDetailsView.getDepartmentId());
        empdetailsviewId.setLocationId(empDetailsView.getLocationId());
        empdetailsviewId.setCountryId(empDetailsView.getCountryId());
        empdetailsviewId.setFirstName(empDetailsView.getFirstName());
        empdetailsviewId.setLastName(empDetailsView.getLastName());
        empdetailsviewId.setSalary(empDetailsView.getSalary());
        empdetailsviewId.setCommissionPct(empDetailsView.getCommissionPct());
        empdetailsviewId.setDepartmentName(empDetailsView.getDepartmentName());
        empdetailsviewId.setJobTitle(empDetailsView.getJobTitle());
        empdetailsviewId.setCity(empDetailsView.getCity());
        empdetailsviewId.setStateProvince(empDetailsView.getStateProvince());
        empdetailsviewId.setCountryName(empDetailsView.getCountryName());
        empdetailsviewId.setRegionName(empDetailsView.getRegionName());

        return this.wmGenericDao.findById(empdetailsviewId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public EmpDetailsView delete(EmpDetailsViewId empdetailsviewId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmpDetailsView with id: {}", empdetailsviewId);
        EmpDetailsView deleted = this.wmGenericDao.findById(empdetailsviewId);
        if (deleted == null) {
            LOGGER.debug("No EmpDetailsView found with id: {}", empdetailsviewId);
            throw new EntityNotFoundException(String.valueOf(empdetailsviewId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<EmpDetailsView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpDetailsViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<EmpDetailsView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpDetailsViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table EmpDetailsView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

