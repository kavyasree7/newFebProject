/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CompChild;


/**
 * ServiceImpl object for domain model class CompChild.
 *
 * @see CompChild
 */
@Service("WMSTUDIO.CompChildService")
public class CompChildServiceImpl implements CompChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompChildServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.CompChildDao")
    private WMGenericDao<CompChild, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompChild, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public CompChild create(CompChild compChild) {
        LOGGER.debug("Creating a new CompChild with information: {}", compChild);
        CompChild compChildCreated = this.wmGenericDao.create(compChild);
        return compChildCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CompChild getById(String compchildId) throws EntityNotFoundException {
        LOGGER.debug("Finding CompChild by id: {}", compchildId);
        CompChild compChild = this.wmGenericDao.findById(compchildId);
        if (compChild == null){
            LOGGER.debug("No CompChild found with id: {}", compchildId);
            throw new EntityNotFoundException(String.valueOf(compchildId));
        }
        return compChild;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CompChild findById(String compchildId) {
        LOGGER.debug("Finding CompChild by id: {}", compchildId);
        return this.wmGenericDao.findById(compchildId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public CompChild update(CompChild compChild) throws EntityNotFoundException {
        LOGGER.debug("Updating CompChild with information: {}", compChild);
        this.wmGenericDao.update(compChild);

        String compchildId = compChild.getIdColumn();

        return this.wmGenericDao.findById(compchildId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public CompChild delete(String compchildId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompChild with id: {}", compchildId);
        CompChild deleted = this.wmGenericDao.findById(compchildId);
        if (deleted == null) {
            LOGGER.debug("No CompChild found with id: {}", compchildId);
            throw new EntityNotFoundException(String.valueOf(compchildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<CompChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<CompChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table CompChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

