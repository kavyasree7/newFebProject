/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.EmployeeDepartmentView;
import com.newfebproject.wmstudio.EmployeeDepartmentViewId;

/**
 * Service object for domain model class {@link EmployeeDepartmentView}.
 */
public interface EmployeeDepartmentViewService {

    /**
     * Creates a new EmployeeDepartmentView. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeDepartmentView if any.
     *
     * @param employeeDepartmentView Details of the EmployeeDepartmentView to be created; value cannot be null.
     * @return The newly created EmployeeDepartmentView.
     */
	EmployeeDepartmentView create(EmployeeDepartmentView employeeDepartmentView);


	/**
	 * Returns EmployeeDepartmentView by given id if exists.
	 *
	 * @param employeedepartmentviewId The id of the EmployeeDepartmentView to get; value cannot be null.
	 * @return EmployeeDepartmentView associated with the given employeedepartmentviewId.
     * @throws EntityNotFoundException If no EmployeeDepartmentView is found.
	 */
	EmployeeDepartmentView getById(EmployeeDepartmentViewId employeedepartmentviewId) throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeDepartmentView by given id if exists, returns null otherwise.
	 *
	 * @param employeedepartmentviewId The id of the EmployeeDepartmentView to get; value cannot be null.
	 * @return EmployeeDepartmentView associated with the given employeedepartmentviewId.
	 */
	EmployeeDepartmentView findById(EmployeeDepartmentViewId employeedepartmentviewId);


	/**
	 * Updates the details of an existing EmployeeDepartmentView. It replaces all fields of the existing EmployeeDepartmentView with the given employeeDepartmentView.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeDepartmentView if any.
     *
	 * @param employeeDepartmentView The details of the EmployeeDepartmentView to be updated; value cannot be null.
	 * @return The updated EmployeeDepartmentView.
	 * @throws EntityNotFoundException if no EmployeeDepartmentView is found with given input.
	 */
	EmployeeDepartmentView update(EmployeeDepartmentView employeeDepartmentView) throws EntityNotFoundException;

    /**
	 * Deletes an existing EmployeeDepartmentView with the given id.
	 *
	 * @param employeedepartmentviewId The id of the EmployeeDepartmentView to be deleted; value cannot be null.
	 * @return The deleted EmployeeDepartmentView.
	 * @throws EntityNotFoundException if no EmployeeDepartmentView found with the given id.
	 */
	EmployeeDepartmentView delete(EmployeeDepartmentViewId employeedepartmentviewId) throws EntityNotFoundException;

	/**
	 * Find all EmployeeDepartmentViews matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeDepartmentViews.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<EmployeeDepartmentView> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all EmployeeDepartmentViews matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeDepartmentViews.
     *
     * @see Pageable
     * @see Page
	 */
    Page<EmployeeDepartmentView> findAll(String query, Pageable pageable);

    /**
	 * Exports all EmployeeDepartmentViews matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeDepartmentViews in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the EmployeeDepartmentView.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

