/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CompChild;
import com.newfebproject.wmstudio.Compparent;
import com.newfebproject.wmstudio.CompparentId;


/**
 * ServiceImpl object for domain model class Compparent.
 *
 * @see Compparent
 */
@Service("WMSTUDIO.CompparentService")
public class CompparentServiceImpl implements CompparentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompparentServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.CompChildService")
	private CompChildService compChildService;

    @Autowired
    @Qualifier("WMSTUDIO.CompparentDao")
    private WMGenericDao<Compparent, CompparentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Compparent, CompparentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Compparent create(Compparent compparent) {
        LOGGER.debug("Creating a new Compparent with information: {}", compparent);
        Compparent compparentCreated = this.wmGenericDao.create(compparent);
        if(compparentCreated.getCompChilds() != null) {
            for(CompChild compChild : compparentCreated.getCompChilds()) {
                compChild.setCompparent(compparentCreated);
                LOGGER.debug("Creating a new child CompChild with information: {}", compChild);
                compChildService.create(compChild);
            }
        }
        return compparentCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Compparent getById(CompparentId compparentId) throws EntityNotFoundException {
        LOGGER.debug("Finding Compparent by id: {}", compparentId);
        Compparent compparent = this.wmGenericDao.findById(compparentId);
        if (compparent == null){
            LOGGER.debug("No Compparent found with id: {}", compparentId);
            throw new EntityNotFoundException(String.valueOf(compparentId));
        }
        return compparent;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Compparent findById(CompparentId compparentId) {
        LOGGER.debug("Finding Compparent by id: {}", compparentId);
        return this.wmGenericDao.findById(compparentId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Compparent getByStringColumnm(String stringColumnm) {
        Map<String, Object> stringColumnmMap = new HashMap<>();
        stringColumnmMap.put("stringColumnm", stringColumnm);

        LOGGER.debug("Finding Compparent by unique keys: {}", stringColumnmMap);
        Compparent compparent = this.wmGenericDao.findByUniqueKey(stringColumnmMap);

        if (compparent == null){
            LOGGER.debug("No Compparent found with given unique key values: {}", stringColumnmMap);
            throw new EntityNotFoundException(String.valueOf(stringColumnmMap));
        }

        return compparent;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Compparent update(Compparent compparent) throws EntityNotFoundException {
        LOGGER.debug("Updating Compparent with information: {}", compparent);
        this.wmGenericDao.update(compparent);

        CompparentId compparentId = new CompparentId();
        compparentId.setIdColumn(compparent.getIdColumn());
        compparentId.setBigdecimalColumn(compparent.getBigdecimalColumn());

        return this.wmGenericDao.findById(compparentId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Compparent delete(CompparentId compparentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Compparent with id: {}", compparentId);
        Compparent deleted = this.wmGenericDao.findById(compparentId);
        if (deleted == null) {
            LOGGER.debug("No Compparent found with id: {}", compparentId);
            throw new EntityNotFoundException(String.valueOf(compparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Compparent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Compparents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Compparent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Compparents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Compparent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<CompChild> findAssociatedCompChilds(Integer idColumn, BigInteger bigdecimalColumn, Pageable pageable) {
        LOGGER.debug("Fetching all associated compChilds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("compparent.idColumn = '" + idColumn + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("compparent.bigdecimalColumn = '" + bigdecimalColumn + "'");

        return compChildService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompChildService instance
	 */
	protected void setCompChildService(CompChildService service) {
        this.compChildService = service;
    }

}

