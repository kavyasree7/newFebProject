/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.VirtualO2oChild;
import com.newfebproject.wmstudio.VirtualO2oChildId;


/**
 * ServiceImpl object for domain model class VirtualO2oChild.
 *
 * @see VirtualO2oChild
 */
@Service("WMSTUDIO.VirtualO2oChildService")
public class VirtualO2oChildServiceImpl implements VirtualO2oChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualO2oChildServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.VirtualO2oChildDao")
    private WMGenericDao<VirtualO2oChild, VirtualO2oChildId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualO2oChild, VirtualO2oChildId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public VirtualO2oChild create(VirtualO2oChild virtualO2oChild) {
        LOGGER.debug("Creating a new VirtualO2oChild with information: {}", virtualO2oChild);
        VirtualO2oChild virtualO2oChildCreated = this.wmGenericDao.create(virtualO2oChild);
        return virtualO2oChildCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oChild getById(VirtualO2oChildId virtualo2ochildId) throws EntityNotFoundException {
        LOGGER.debug("Finding VirtualO2oChild by id: {}", virtualo2ochildId);
        VirtualO2oChild virtualO2oChild = this.wmGenericDao.findById(virtualo2ochildId);
        if (virtualO2oChild == null){
            LOGGER.debug("No VirtualO2oChild found with id: {}", virtualo2ochildId);
            throw new EntityNotFoundException(String.valueOf(virtualo2ochildId));
        }
        return virtualO2oChild;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oChild findById(VirtualO2oChildId virtualo2ochildId) {
        LOGGER.debug("Finding VirtualO2oChild by id: {}", virtualo2ochildId);
        return this.wmGenericDao.findById(virtualo2ochildId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oChild update(VirtualO2oChild virtualO2oChild) throws EntityNotFoundException {
        LOGGER.debug("Updating VirtualO2oChild with information: {}", virtualO2oChild);
        this.wmGenericDao.update(virtualO2oChild);

        VirtualO2oChildId virtualo2ochildId = new VirtualO2oChildId();
        virtualo2ochildId.setId(virtualO2oChild.getId());
        virtualo2ochildId.setStringColumn(virtualO2oChild.getStringColumn());
        virtualo2ochildId.setBigdecimalColumn(virtualO2oChild.getBigdecimalColumn());
        virtualo2ochildId.setDescColumn(virtualO2oChild.getDescColumn());

        return this.wmGenericDao.findById(virtualo2ochildId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public VirtualO2oChild delete(VirtualO2oChildId virtualo2ochildId) throws EntityNotFoundException {
        LOGGER.debug("Deleting VirtualO2oChild with id: {}", virtualo2ochildId);
        VirtualO2oChild deleted = this.wmGenericDao.findById(virtualo2ochildId);
        if (deleted == null) {
            LOGGER.debug("No VirtualO2oChild found with id: {}", virtualo2ochildId);
            throw new EntityNotFoundException(String.valueOf(virtualo2ochildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<VirtualO2oChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualO2oChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<VirtualO2oChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualO2oChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table VirtualO2oChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

