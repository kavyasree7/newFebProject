/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.JobHistory;
import com.newfebproject.wmstudio.Jobs;


/**
 * ServiceImpl object for domain model class Jobs.
 *
 * @see Jobs
 */
@Service("WMSTUDIO.JobsService")
public class JobsServiceImpl implements JobsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobsServiceImpl.class);

    @Autowired
	@Qualifier("WMSTUDIO.JobHistoryService")
	private JobHistoryService jobHistoryService;

    @Autowired
    @Qualifier("WMSTUDIO.JobsDao")
    private WMGenericDao<Jobs, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Jobs, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Jobs create(Jobs jobs) {
        LOGGER.debug("Creating a new Jobs with information: {}", jobs);
        Jobs jobsCreated = this.wmGenericDao.create(jobs);
        if(jobsCreated.getJobHistories() != null) {
            for(JobHistory jobHistorie : jobsCreated.getJobHistories()) {
                jobHistorie.setJobs(jobsCreated);
                LOGGER.debug("Creating a new child JobHistory with information: {}", jobHistorie);
                jobHistoryService.create(jobHistorie);
            }
        }
        return jobsCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Jobs getById(String jobsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Jobs by id: {}", jobsId);
        Jobs jobs = this.wmGenericDao.findById(jobsId);
        if (jobs == null){
            LOGGER.debug("No Jobs found with id: {}", jobsId);
            throw new EntityNotFoundException(String.valueOf(jobsId));
        }
        return jobs;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Jobs findById(String jobsId) {
        LOGGER.debug("Finding Jobs by id: {}", jobsId);
        return this.wmGenericDao.findById(jobsId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Jobs getByJobTitle(String jobTitle) {
        Map<String, Object> jobTitleMap = new HashMap<>();
        jobTitleMap.put("jobTitle", jobTitle);

        LOGGER.debug("Finding Jobs by unique keys: {}", jobTitleMap);
        Jobs jobs = this.wmGenericDao.findByUniqueKey(jobTitleMap);

        if (jobs == null){
            LOGGER.debug("No Jobs found with given unique key values: {}", jobTitleMap);
            throw new EntityNotFoundException(String.valueOf(jobTitleMap));
        }

        return jobs;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Jobs update(Jobs jobs) throws EntityNotFoundException {
        LOGGER.debug("Updating Jobs with information: {}", jobs);
        this.wmGenericDao.update(jobs);

        String jobsId = jobs.getJobId();

        return this.wmGenericDao.findById(jobsId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Jobs delete(String jobsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Jobs with id: {}", jobsId);
        Jobs deleted = this.wmGenericDao.findById(jobsId);
        if (deleted == null) {
            LOGGER.debug("No Jobs found with id: {}", jobsId);
            throw new EntityNotFoundException(String.valueOf(jobsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Jobs> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Jobs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Jobs> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Jobs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Jobs to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<JobHistory> findAssociatedJobHistories(String jobId, Pageable pageable) {
        LOGGER.debug("Fetching all associated jobHistories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("jobs.jobId = '" + jobId + "'");

        return jobHistoryService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JobHistoryService instance
	 */
	protected void setJobHistoryService(JobHistoryService service) {
        this.jobHistoryService = service;
    }

}

