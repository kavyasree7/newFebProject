/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Employee2;

/**
 * Service object for domain model class {@link Employee2}.
 */
public interface Employee2Service {

    /**
     * Creates a new Employee2. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Employee2 if any.
     *
     * @param employee2 Details of the Employee2 to be created; value cannot be null.
     * @return The newly created Employee2.
     */
	Employee2 create(Employee2 employee2);


	/**
	 * Returns Employee2 by given id if exists.
	 *
	 * @param employee2Id The id of the Employee2 to get; value cannot be null.
	 * @return Employee2 associated with the given employee2Id.
     * @throws EntityNotFoundException If no Employee2 is found.
	 */
	Employee2 getById(Integer employee2Id) throws EntityNotFoundException;

    /**
	 * Find and return the Employee2 by given id if exists, returns null otherwise.
	 *
	 * @param employee2Id The id of the Employee2 to get; value cannot be null.
	 * @return Employee2 associated with the given employee2Id.
	 */
	Employee2 findById(Integer employee2Id);


	/**
	 * Updates the details of an existing Employee2. It replaces all fields of the existing Employee2 with the given employee2.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Employee2 if any.
     *
	 * @param employee2 The details of the Employee2 to be updated; value cannot be null.
	 * @return The updated Employee2.
	 * @throws EntityNotFoundException if no Employee2 is found with given input.
	 */
	Employee2 update(Employee2 employee2) throws EntityNotFoundException;

    /**
	 * Deletes an existing Employee2 with the given id.
	 *
	 * @param employee2Id The id of the Employee2 to be deleted; value cannot be null.
	 * @return The deleted Employee2.
	 * @throws EntityNotFoundException if no Employee2 found with the given id.
	 */
	Employee2 delete(Integer employee2Id) throws EntityNotFoundException;

	/**
	 * Find all Employee2s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Employee2s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Employee2> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Employee2s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Employee2s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Employee2> findAll(String query, Pageable pageable);

    /**
	 * Exports all Employee2s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Employee2s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Employee2.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

