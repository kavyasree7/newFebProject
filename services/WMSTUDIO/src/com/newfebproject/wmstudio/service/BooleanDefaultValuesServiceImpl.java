/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.BooleanDefaultValues;


/**
 * ServiceImpl object for domain model class BooleanDefaultValues.
 *
 * @see BooleanDefaultValues
 */
@Service("WMSTUDIO.BooleanDefaultValuesService")
public class BooleanDefaultValuesServiceImpl implements BooleanDefaultValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BooleanDefaultValuesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.BooleanDefaultValuesDao")
    private WMGenericDao<BooleanDefaultValues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BooleanDefaultValues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public BooleanDefaultValues create(BooleanDefaultValues booleanDefaultValues) {
        LOGGER.debug("Creating a new BooleanDefaultValues with information: {}", booleanDefaultValues);
        BooleanDefaultValues booleanDefaultValuesCreated = this.wmGenericDao.create(booleanDefaultValues);
        return booleanDefaultValuesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanDefaultValues getById(Integer booleandefaultvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Finding BooleanDefaultValues by id: {}", booleandefaultvaluesId);
        BooleanDefaultValues booleanDefaultValues = this.wmGenericDao.findById(booleandefaultvaluesId);
        if (booleanDefaultValues == null){
            LOGGER.debug("No BooleanDefaultValues found with id: {}", booleandefaultvaluesId);
            throw new EntityNotFoundException(String.valueOf(booleandefaultvaluesId));
        }
        return booleanDefaultValues;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanDefaultValues findById(Integer booleandefaultvaluesId) {
        LOGGER.debug("Finding BooleanDefaultValues by id: {}", booleandefaultvaluesId);
        return this.wmGenericDao.findById(booleandefaultvaluesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanDefaultValues update(BooleanDefaultValues booleanDefaultValues) throws EntityNotFoundException {
        LOGGER.debug("Updating BooleanDefaultValues with information: {}", booleanDefaultValues);
        this.wmGenericDao.update(booleanDefaultValues);

        Integer booleandefaultvaluesId = booleanDefaultValues.getBooleanId();

        return this.wmGenericDao.findById(booleandefaultvaluesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public BooleanDefaultValues delete(Integer booleandefaultvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BooleanDefaultValues with id: {}", booleandefaultvaluesId);
        BooleanDefaultValues deleted = this.wmGenericDao.findById(booleandefaultvaluesId);
        if (deleted == null) {
            LOGGER.debug("No BooleanDefaultValues found with id: {}", booleandefaultvaluesId);
            throw new EntityNotFoundException(String.valueOf(booleandefaultvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<BooleanDefaultValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BooleanDefaultValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<BooleanDefaultValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BooleanDefaultValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table BooleanDefaultValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

