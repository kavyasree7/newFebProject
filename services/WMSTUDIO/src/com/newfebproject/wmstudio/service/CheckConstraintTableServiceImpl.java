/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CheckConstraintTable;


/**
 * ServiceImpl object for domain model class CheckConstraintTable.
 *
 * @see CheckConstraintTable
 */
@Service("WMSTUDIO.CheckConstraintTableService")
public class CheckConstraintTableServiceImpl implements CheckConstraintTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CheckConstraintTableServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.CheckConstraintTableDao")
    private WMGenericDao<CheckConstraintTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CheckConstraintTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public CheckConstraintTable create(CheckConstraintTable checkConstraintTable) {
        LOGGER.debug("Creating a new CheckConstraintTable with information: {}", checkConstraintTable);
        CheckConstraintTable checkConstraintTableCreated = this.wmGenericDao.create(checkConstraintTable);
        return checkConstraintTableCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CheckConstraintTable getById(Integer checkconstrainttableId) throws EntityNotFoundException {
        LOGGER.debug("Finding CheckConstraintTable by id: {}", checkconstrainttableId);
        CheckConstraintTable checkConstraintTable = this.wmGenericDao.findById(checkconstrainttableId);
        if (checkConstraintTable == null){
            LOGGER.debug("No CheckConstraintTable found with id: {}", checkconstrainttableId);
            throw new EntityNotFoundException(String.valueOf(checkconstrainttableId));
        }
        return checkConstraintTable;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CheckConstraintTable findById(Integer checkconstrainttableId) {
        LOGGER.debug("Finding CheckConstraintTable by id: {}", checkconstrainttableId);
        return this.wmGenericDao.findById(checkconstrainttableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public CheckConstraintTable update(CheckConstraintTable checkConstraintTable) throws EntityNotFoundException {
        LOGGER.debug("Updating CheckConstraintTable with information: {}", checkConstraintTable);
        this.wmGenericDao.update(checkConstraintTable);

        Integer checkconstrainttableId = checkConstraintTable.getColumn1();

        return this.wmGenericDao.findById(checkconstrainttableId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public CheckConstraintTable delete(Integer checkconstrainttableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CheckConstraintTable with id: {}", checkconstrainttableId);
        CheckConstraintTable deleted = this.wmGenericDao.findById(checkconstrainttableId);
        if (deleted == null) {
            LOGGER.debug("No CheckConstraintTable found with id: {}", checkconstrainttableId);
            throw new EntityNotFoundException(String.valueOf(checkconstrainttableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<CheckConstraintTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CheckConstraintTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<CheckConstraintTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CheckConstraintTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table CheckConstraintTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

