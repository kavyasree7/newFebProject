/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.TestBigInteger;


/**
 * ServiceImpl object for domain model class TestBigInteger.
 *
 * @see TestBigInteger
 */
@Service("WMSTUDIO.TestBigIntegerService")
public class TestBigIntegerServiceImpl implements TestBigIntegerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestBigIntegerServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.TestBigIntegerDao")
    private WMGenericDao<TestBigInteger, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestBigInteger, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public TestBigInteger create(TestBigInteger testBigInteger) {
        LOGGER.debug("Creating a new TestBigInteger with information: {}", testBigInteger);
        TestBigInteger testBigIntegerCreated = this.wmGenericDao.create(testBigInteger);
        return testBigIntegerCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public TestBigInteger getById(Integer testbigintegerId) throws EntityNotFoundException {
        LOGGER.debug("Finding TestBigInteger by id: {}", testbigintegerId);
        TestBigInteger testBigInteger = this.wmGenericDao.findById(testbigintegerId);
        if (testBigInteger == null){
            LOGGER.debug("No TestBigInteger found with id: {}", testbigintegerId);
            throw new EntityNotFoundException(String.valueOf(testbigintegerId));
        }
        return testBigInteger;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public TestBigInteger findById(Integer testbigintegerId) {
        LOGGER.debug("Finding TestBigInteger by id: {}", testbigintegerId);
        return this.wmGenericDao.findById(testbigintegerId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public TestBigInteger update(TestBigInteger testBigInteger) throws EntityNotFoundException {
        LOGGER.debug("Updating TestBigInteger with information: {}", testBigInteger);
        this.wmGenericDao.update(testBigInteger);

        Integer testbigintegerId = testBigInteger.getId();

        return this.wmGenericDao.findById(testbigintegerId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public TestBigInteger delete(Integer testbigintegerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestBigInteger with id: {}", testbigintegerId);
        TestBigInteger deleted = this.wmGenericDao.findById(testbigintegerId);
        if (deleted == null) {
            LOGGER.debug("No TestBigInteger found with id: {}", testbigintegerId);
            throw new EntityNotFoundException(String.valueOf(testbigintegerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<TestBigInteger> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestBigIntegers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<TestBigInteger> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestBigIntegers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table TestBigInteger to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

