/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.CrossjoinView;
import com.newfebproject.wmstudio.CrossjoinViewId;


/**
 * ServiceImpl object for domain model class CrossjoinView.
 *
 * @see CrossjoinView
 */
@Service("WMSTUDIO.CrossjoinViewService")
public class CrossjoinViewServiceImpl implements CrossjoinViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CrossjoinViewServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.CrossjoinViewDao")
    private WMGenericDao<CrossjoinView, CrossjoinViewId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CrossjoinView, CrossjoinViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public CrossjoinView create(CrossjoinView crossjoinView) {
        LOGGER.debug("Creating a new CrossjoinView with information: {}", crossjoinView);
        CrossjoinView crossjoinViewCreated = this.wmGenericDao.create(crossjoinView);
        return crossjoinViewCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CrossjoinView getById(CrossjoinViewId crossjoinviewId) throws EntityNotFoundException {
        LOGGER.debug("Finding CrossjoinView by id: {}", crossjoinviewId);
        CrossjoinView crossjoinView = this.wmGenericDao.findById(crossjoinviewId);
        if (crossjoinView == null){
            LOGGER.debug("No CrossjoinView found with id: {}", crossjoinviewId);
            throw new EntityNotFoundException(String.valueOf(crossjoinviewId));
        }
        return crossjoinView;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public CrossjoinView findById(CrossjoinViewId crossjoinviewId) {
        LOGGER.debug("Finding CrossjoinView by id: {}", crossjoinviewId);
        return this.wmGenericDao.findById(crossjoinviewId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public CrossjoinView update(CrossjoinView crossjoinView) throws EntityNotFoundException {
        LOGGER.debug("Updating CrossjoinView with information: {}", crossjoinView);
        this.wmGenericDao.update(crossjoinView);

        CrossjoinViewId crossjoinviewId = new CrossjoinViewId();
        crossjoinviewId.setEmployee1Id(crossjoinView.getEmployee1Id());
        crossjoinviewId.setEmployee1Column2(crossjoinView.getEmployee1Column2());
        crossjoinviewId.setEmployee1Column3(crossjoinView.getEmployee1Column3());
        crossjoinviewId.setId(crossjoinView.getId());
        crossjoinviewId.setColumn2(crossjoinView.getColumn2());
        crossjoinviewId.setColumn3(crossjoinView.getColumn3());

        return this.wmGenericDao.findById(crossjoinviewId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public CrossjoinView delete(CrossjoinViewId crossjoinviewId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CrossjoinView with id: {}", crossjoinviewId);
        CrossjoinView deleted = this.wmGenericDao.findById(crossjoinviewId);
        if (deleted == null) {
            LOGGER.debug("No CrossjoinView found with id: {}", crossjoinviewId);
            throw new EntityNotFoundException(String.valueOf(crossjoinviewId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<CrossjoinView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CrossjoinViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<CrossjoinView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CrossjoinViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table CrossjoinView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

