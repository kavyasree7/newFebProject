/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.Issuwwithfloat;


/**
 * ServiceImpl object for domain model class Issuwwithfloat.
 *
 * @see Issuwwithfloat
 */
@Service("WMSTUDIO.IssuwwithfloatService")
public class IssuwwithfloatServiceImpl implements IssuwwithfloatService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IssuwwithfloatServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.IssuwwithfloatDao")
    private WMGenericDao<Issuwwithfloat, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Issuwwithfloat, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Issuwwithfloat create(Issuwwithfloat issuwwithfloat) {
        LOGGER.debug("Creating a new Issuwwithfloat with information: {}", issuwwithfloat);
        Issuwwithfloat issuwwithfloatCreated = this.wmGenericDao.create(issuwwithfloat);
        return issuwwithfloatCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Issuwwithfloat getById(BigInteger issuwwithfloatId) throws EntityNotFoundException {
        LOGGER.debug("Finding Issuwwithfloat by id: {}", issuwwithfloatId);
        Issuwwithfloat issuwwithfloat = this.wmGenericDao.findById(issuwwithfloatId);
        if (issuwwithfloat == null){
            LOGGER.debug("No Issuwwithfloat found with id: {}", issuwwithfloatId);
            throw new EntityNotFoundException(String.valueOf(issuwwithfloatId));
        }
        return issuwwithfloat;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Issuwwithfloat findById(BigInteger issuwwithfloatId) {
        LOGGER.debug("Finding Issuwwithfloat by id: {}", issuwwithfloatId);
        return this.wmGenericDao.findById(issuwwithfloatId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Issuwwithfloat update(Issuwwithfloat issuwwithfloat) throws EntityNotFoundException {
        LOGGER.debug("Updating Issuwwithfloat with information: {}", issuwwithfloat);
        this.wmGenericDao.update(issuwwithfloat);

        BigInteger issuwwithfloatId = issuwwithfloat.getColumn1();

        return this.wmGenericDao.findById(issuwwithfloatId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Issuwwithfloat delete(BigInteger issuwwithfloatId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Issuwwithfloat with id: {}", issuwwithfloatId);
        Issuwwithfloat deleted = this.wmGenericDao.findById(issuwwithfloatId);
        if (deleted == null) {
            LOGGER.debug("No Issuwwithfloat found with id: {}", issuwwithfloatId);
            throw new EntityNotFoundException(String.valueOf(issuwwithfloatId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Issuwwithfloat> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Issuwwithfloats");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Issuwwithfloat> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Issuwwithfloats");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Issuwwithfloat to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

