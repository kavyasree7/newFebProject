/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.BoolIssue;


/**
 * ServiceImpl object for domain model class BoolIssue.
 *
 * @see BoolIssue
 */
@Service("WMSTUDIO.BoolIssueService")
public class BoolIssueServiceImpl implements BoolIssueService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BoolIssueServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.BoolIssueDao")
    private WMGenericDao<BoolIssue, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BoolIssue, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public BoolIssue create(BoolIssue boolIssue) {
        LOGGER.debug("Creating a new BoolIssue with information: {}", boolIssue);
        BoolIssue boolIssueCreated = this.wmGenericDao.create(boolIssue);
        return boolIssueCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public BoolIssue getById(Integer boolissueId) throws EntityNotFoundException {
        LOGGER.debug("Finding BoolIssue by id: {}", boolissueId);
        BoolIssue boolIssue = this.wmGenericDao.findById(boolissueId);
        if (boolIssue == null){
            LOGGER.debug("No BoolIssue found with id: {}", boolissueId);
            throw new EntityNotFoundException(String.valueOf(boolissueId));
        }
        return boolIssue;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public BoolIssue findById(Integer boolissueId) {
        LOGGER.debug("Finding BoolIssue by id: {}", boolissueId);
        return this.wmGenericDao.findById(boolissueId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public BoolIssue update(BoolIssue boolIssue) throws EntityNotFoundException {
        LOGGER.debug("Updating BoolIssue with information: {}", boolIssue);
        this.wmGenericDao.update(boolIssue);

        Integer boolissueId = boolIssue.getBooleanId();

        return this.wmGenericDao.findById(boolissueId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public BoolIssue delete(Integer boolissueId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BoolIssue with id: {}", boolissueId);
        BoolIssue deleted = this.wmGenericDao.findById(boolissueId);
        if (deleted == null) {
            LOGGER.debug("No BoolIssue found with id: {}", boolissueId);
            throw new EntityNotFoundException(String.valueOf(boolissueId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<BoolIssue> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BoolIssues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<BoolIssue> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BoolIssues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table BoolIssue to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

