/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.OtherTypes;

/**
 * Service object for domain model class {@link OtherTypes}.
 */
public interface OtherTypesService {

    /**
     * Creates a new OtherTypes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OtherTypes if any.
     *
     * @param otherTypes Details of the OtherTypes to be created; value cannot be null.
     * @return The newly created OtherTypes.
     */
	OtherTypes create(OtherTypes otherTypes);


	/**
	 * Returns OtherTypes by given id if exists.
	 *
	 * @param othertypesId The id of the OtherTypes to get; value cannot be null.
	 * @return OtherTypes associated with the given othertypesId.
     * @throws EntityNotFoundException If no OtherTypes is found.
	 */
	OtherTypes getById(BigInteger othertypesId) throws EntityNotFoundException;

    /**
	 * Find and return the OtherTypes by given id if exists, returns null otherwise.
	 *
	 * @param othertypesId The id of the OtherTypes to get; value cannot be null.
	 * @return OtherTypes associated with the given othertypesId.
	 */
	OtherTypes findById(BigInteger othertypesId);

    /**
	 * Find and return the OtherTypes for given column4  if exists.
	 *
	 * @param column4 value of column4; value cannot be null.
	 * @return OtherTypes associated with the given inputs.
     * @throws EntityNotFoundException if no matching OtherTypes found.
	 */
    OtherTypes getByColumn4(String column4)throws EntityNotFoundException;

    /**
	 * Find and return the OtherTypes for given column5  andcolumn6  if exists.
	 *
	 * @param column5 value of column5; value cannot be null.
	 * @param column6 value of column6; value cannot be null.
	 * @return OtherTypes associated with the given inputs.
     * @throws EntityNotFoundException if no matching OtherTypes found.
	 */
    OtherTypes getByColumn5AndColumn6(String column5, String column6)throws EntityNotFoundException;

    /**
	 * Find and return the OtherTypes for given column4  andcolumn5  if exists.
	 *
	 * @param column4 value of column4; value cannot be null.
	 * @param column5 value of column5; value cannot be null.
	 * @return OtherTypes associated with the given inputs.
     * @throws EntityNotFoundException if no matching OtherTypes found.
	 */
    OtherTypes getByColumn4AndColumn5(String column4, String column5)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing OtherTypes. It replaces all fields of the existing OtherTypes with the given otherTypes.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on OtherTypes if any.
     *
	 * @param otherTypes The details of the OtherTypes to be updated; value cannot be null.
	 * @return The updated OtherTypes.
	 * @throws EntityNotFoundException if no OtherTypes is found with given input.
	 */
	OtherTypes update(OtherTypes otherTypes) throws EntityNotFoundException;

    /**
	 * Deletes an existing OtherTypes with the given id.
	 *
	 * @param othertypesId The id of the OtherTypes to be deleted; value cannot be null.
	 * @return The deleted OtherTypes.
	 * @throws EntityNotFoundException if no OtherTypes found with the given id.
	 */
	OtherTypes delete(BigInteger othertypesId) throws EntityNotFoundException;

	/**
	 * Find all OtherTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OtherTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<OtherTypes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all OtherTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OtherTypes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<OtherTypes> findAll(String query, Pageable pageable);

    /**
	 * Exports all OtherTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the OtherTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the OtherTypes.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

