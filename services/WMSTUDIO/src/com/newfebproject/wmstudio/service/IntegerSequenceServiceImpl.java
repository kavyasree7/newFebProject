/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.IntegerSequence;


/**
 * ServiceImpl object for domain model class IntegerSequence.
 *
 * @see IntegerSequence
 */
@Service("WMSTUDIO.IntegerSequenceService")
public class IntegerSequenceServiceImpl implements IntegerSequenceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntegerSequenceServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.IntegerSequenceDao")
    private WMGenericDao<IntegerSequence, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntegerSequence, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public IntegerSequence create(IntegerSequence integerSequenceInstance) {
        LOGGER.debug("Creating a new IntegerSequence with information: {}", integerSequenceInstance);
        IntegerSequence integerSequenceInstanceCreated = this.wmGenericDao.create(integerSequenceInstance);
        return integerSequenceInstanceCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public IntegerSequence getById(Integer integersequenceId) throws EntityNotFoundException {
        LOGGER.debug("Finding IntegerSequence by id: {}", integersequenceId);
        IntegerSequence integerSequenceInstance = this.wmGenericDao.findById(integersequenceId);
        if (integerSequenceInstance == null){
            LOGGER.debug("No IntegerSequence found with id: {}", integersequenceId);
            throw new EntityNotFoundException(String.valueOf(integersequenceId));
        }
        return integerSequenceInstance;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public IntegerSequence findById(Integer integersequenceId) {
        LOGGER.debug("Finding IntegerSequence by id: {}", integersequenceId);
        return this.wmGenericDao.findById(integersequenceId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public IntegerSequence update(IntegerSequence integerSequenceInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating IntegerSequence with information: {}", integerSequenceInstance);
        this.wmGenericDao.update(integerSequenceInstance);

        Integer integersequenceId = integerSequenceInstance.getIntegerSequence();

        return this.wmGenericDao.findById(integersequenceId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public IntegerSequence delete(Integer integersequenceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting IntegerSequence with id: {}", integersequenceId);
        IntegerSequence deleted = this.wmGenericDao.findById(integersequenceId);
        if (deleted == null) {
            LOGGER.debug("No IntegerSequence found with id: {}", integersequenceId);
            throw new EntityNotFoundException(String.valueOf(integersequenceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<IntegerSequence> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IntegerSequences");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<IntegerSequence> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IntegerSequences");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table IntegerSequence to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

