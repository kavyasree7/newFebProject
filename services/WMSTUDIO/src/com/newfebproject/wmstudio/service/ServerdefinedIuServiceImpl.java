/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.wmstudio.ServerdefinedIu;


/**
 * ServiceImpl object for domain model class ServerdefinedIu.
 *
 * @see ServerdefinedIu
 */
@Service("WMSTUDIO.ServerdefinedIuService")
public class ServerdefinedIuServiceImpl implements ServerdefinedIuService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerdefinedIuServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.ServerdefinedIuDao")
    private WMGenericDao<ServerdefinedIu, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ServerdefinedIu, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public ServerdefinedIu create(ServerdefinedIu serverdefinedIu) {
        LOGGER.debug("Creating a new ServerdefinedIu with information: {}", serverdefinedIu);
        ServerdefinedIu serverdefinedIuCreated = this.wmGenericDao.create(serverdefinedIu);
        return serverdefinedIuCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedIu getById(Integer serverdefinediuId) throws EntityNotFoundException {
        LOGGER.debug("Finding ServerdefinedIu by id: {}", serverdefinediuId);
        ServerdefinedIu serverdefinedIu = this.wmGenericDao.findById(serverdefinediuId);
        if (serverdefinedIu == null){
            LOGGER.debug("No ServerdefinedIu found with id: {}", serverdefinediuId);
            throw new EntityNotFoundException(String.valueOf(serverdefinediuId));
        }
        return serverdefinedIu;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedIu findById(Integer serverdefinediuId) {
        LOGGER.debug("Finding ServerdefinedIu by id: {}", serverdefinediuId);
        return this.wmGenericDao.findById(serverdefinediuId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedIu update(ServerdefinedIu serverdefinedIu) throws EntityNotFoundException {
        LOGGER.debug("Updating ServerdefinedIu with information: {}", serverdefinedIu);
        this.wmGenericDao.update(serverdefinedIu);

        Integer serverdefinediuId = serverdefinedIu.getServerdefinedId();

        return this.wmGenericDao.findById(serverdefinediuId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public ServerdefinedIu delete(Integer serverdefinediuId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ServerdefinedIu with id: {}", serverdefinediuId);
        ServerdefinedIu deleted = this.wmGenericDao.findById(serverdefinediuId);
        if (deleted == null) {
            LOGGER.debug("No ServerdefinedIu found with id: {}", serverdefinediuId);
            throw new EntityNotFoundException(String.valueOf(serverdefinediuId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<ServerdefinedIu> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ServerdefinedIus");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<ServerdefinedIu> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ServerdefinedIus");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table ServerdefinedIu to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

