/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * Compparent generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`COMPPARENT`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`STRING COLUMNM`"})})
@IdClass(CompparentId.class)
public class Compparent implements Serializable {

    private Integer idColumn;
    private BigInteger bigdecimalColumn;
    private String stringColumnm;
    @Type(type = "DateTime")
    private LocalDateTime dateColumn;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] blobColumn;
    private List<CompChild> compChilds;

    @Id
    @Column(name = "`ID COLUMN`", nullable = false, scale = 0, precision = 10)
    public Integer getIdColumn() {
        return this.idColumn;
    }

    public void setIdColumn(Integer idColumn) {
        this.idColumn = idColumn;
    }

    @Id
    @Column(name = "`BIGDECIMAL COLUMN`", nullable = false, scale = 0, precision = 32)
    public BigInteger getBigdecimalColumn() {
        return this.bigdecimalColumn;
    }

    public void setBigdecimalColumn(BigInteger bigdecimalColumn) {
        this.bigdecimalColumn = bigdecimalColumn;
    }

    @Column(name = "`STRING COLUMNM`", nullable = true, length = 20)
    public String getStringColumnm() {
        return this.stringColumnm;
    }

    public void setStringColumnm(String stringColumnm) {
        this.stringColumnm = stringColumnm;
    }

    @Column(name = "`DATE COLUMN`", nullable = true)
    public LocalDateTime getDateColumn() {
        return this.dateColumn;
    }

    public void setDateColumn(LocalDateTime dateColumn) {
        this.dateColumn = dateColumn;
    }

    @Column(name = "`BLOB COLUMN`", nullable = true)
    public byte[] getBlobColumn() {
        return this.blobColumn;
    }

    public void setBlobColumn(byte[] blobColumn) {
        this.blobColumn = blobColumn;
    }

    @JsonInclude(Include.NON_EMPTY)
    
    public List<CompChild> getCompChilds() {
        return this.compChilds;
    }

    public void setCompChilds(List<CompChild> compChilds) {
        this.compChilds = compChilds;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Compparent)) return false;
        final Compparent compparent = (Compparent) o;
        return Objects.equals(getIdColumn(), compparent.getIdColumn()) &&
                Objects.equals(getBigdecimalColumn(), compparent.getBigdecimalColumn());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdColumn(),
                getBigdecimalColumn());
    }
}

