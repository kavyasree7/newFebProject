/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.ServerdefinedIu;
import com.newfebproject.wmstudio.service.ServerdefinedIuService;


/**
 * Controller object for domain model class ServerdefinedIu.
 * @see ServerdefinedIu
 */
@RestController("WMSTUDIO.ServerdefinedIuController")
@Api(value = "ServerdefinedIuController", description = "Exposes APIs to work with ServerdefinedIu resource.")
@RequestMapping("/WMSTUDIO/ServerdefinedIu")
public class ServerdefinedIuController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerdefinedIuController.class);

    @Autowired
	@Qualifier("WMSTUDIO.ServerdefinedIuService")
	private ServerdefinedIuService serverdefinedIuService;

	@ApiOperation(value = "Creates a new ServerdefinedIu instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public ServerdefinedIu createServerdefinedIu(@RequestBody ServerdefinedIu serverdefinedIu) {
		LOGGER.debug("Create ServerdefinedIu with information: {}" , serverdefinedIu);

		serverdefinedIu = serverdefinedIuService.create(serverdefinedIu);
		LOGGER.debug("Created ServerdefinedIu with information: {}" , serverdefinedIu);

	    return serverdefinedIu;
	}

	@ApiOperation(value = "Creates a new ServerdefinedIu instance.This API should be used when the ServerdefinedIu instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerdefinedIu createServerdefinedIu(MultipartHttpServletRequest multipartHttpServletRequest) {
    	ServerdefinedIu serverdefinedIu = WMMultipartUtils.toObject(multipartHttpServletRequest, ServerdefinedIu.class, "WMSTUDIO"); 
        LOGGER.debug("Creating a new ServerdefinedIu with information: {}" , serverdefinedIu);
        return serverdefinedIuService.create(serverdefinedIu);
    }


    @ApiOperation(value = "Returns the ServerdefinedIu instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerdefinedIu getServerdefinedIu(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ServerdefinedIu with id: {}" , id);

        ServerdefinedIu foundServerdefinedIu = serverdefinedIuService.getById(id);
        LOGGER.debug("ServerdefinedIu details with id: {}" , foundServerdefinedIu);

        return foundServerdefinedIu;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in ServerdefinedIu instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getServerdefinedIuBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in ServerdefinedIu instance" , fieldName);

        if(!WMRuntimeUtils.isLob(ServerdefinedIu.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        ServerdefinedIu serverdefinedIu = serverdefinedIuService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(serverdefinedIu, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the ServerdefinedIu instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerdefinedIu editServerdefinedIu(@PathVariable("id") Integer id, @RequestBody ServerdefinedIu serverdefinedIu) throws EntityNotFoundException {
        LOGGER.debug("Editing ServerdefinedIu with id: {}" , serverdefinedIu.getServerdefinedId());

        serverdefinedIu.setServerdefinedId(id);
        serverdefinedIu = serverdefinedIuService.update(serverdefinedIu);
        LOGGER.debug("ServerdefinedIu details with id: {}" , serverdefinedIu);

        return serverdefinedIu;
    }

    @ApiOperation(value = "Updates the ServerdefinedIu instance associated with the given id.This API should be used when ServerdefinedIu instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerdefinedIu editServerdefinedIu(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        ServerdefinedIu newServerdefinedIu = WMMultipartUtils.toObject(multipartHttpServletRequest, ServerdefinedIu.class, "WMSTUDIO");
        newServerdefinedIu.setServerdefinedId(id);

        ServerdefinedIu oldServerdefinedIu = serverdefinedIuService.getById(id);
        WMMultipartUtils.updateLobsContent(oldServerdefinedIu, newServerdefinedIu);
        LOGGER.debug("Updating ServerdefinedIu with information: {}" , newServerdefinedIu);

        return serverdefinedIuService.update(newServerdefinedIu);
    }

    @ApiOperation(value = "Deletes the ServerdefinedIu instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteServerdefinedIu(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ServerdefinedIu with id: {}" , id);

        ServerdefinedIu deletedServerdefinedIu = serverdefinedIuService.delete(id);

        return deletedServerdefinedIu != null;
    }

    /**
     * @deprecated Use {@link #findServerdefinedIus(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ServerdefinedIu instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerdefinedIu> searchServerdefinedIusByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ServerdefinedIus list");
        return serverdefinedIuService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServerdefinedIu instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerdefinedIu> findServerdefinedIus(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServerdefinedIus list");
        return serverdefinedIuService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServerdefinedIu instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerdefinedIu> filterServerdefinedIus(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServerdefinedIus list");
        return serverdefinedIuService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportServerdefinedIus(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return serverdefinedIuService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ServerdefinedIu instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countServerdefinedIus( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ServerdefinedIus");
		return serverdefinedIuService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getServerdefinedIuAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return serverdefinedIuService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ServerdefinedIuService instance
	 */
	protected void setServerdefinedIuService(ServerdefinedIuService service) {
		this.serverdefinedIuService = service;
	}

}

