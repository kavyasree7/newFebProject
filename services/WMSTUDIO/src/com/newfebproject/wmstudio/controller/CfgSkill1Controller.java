/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.CfgSkill1;
import com.newfebproject.wmstudio.Skill;
import com.newfebproject.wmstudio.service.CfgSkill1Service;


/**
 * Controller object for domain model class CfgSkill1.
 * @see CfgSkill1
 */
@RestController("WMSTUDIO.CfgSkill1Controller")
@Api(value = "CfgSkill1Controller", description = "Exposes APIs to work with CfgSkill1 resource.")
@RequestMapping("/WMSTUDIO/CfgSkill1")
public class CfgSkill1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(CfgSkill1Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.CfgSkill1Service")
	private CfgSkill1Service cfgSkill1Service;

	@ApiOperation(value = "Creates a new CfgSkill1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CfgSkill1 createCfgSkill1(@RequestBody CfgSkill1 cfgSkill1) {
		LOGGER.debug("Create CfgSkill1 with information: {}" , cfgSkill1);

		cfgSkill1 = cfgSkill1Service.create(cfgSkill1);
		LOGGER.debug("Created CfgSkill1 with information: {}" , cfgSkill1);

	    return cfgSkill1;
	}


    @ApiOperation(value = "Returns the CfgSkill1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CfgSkill1 getCfgSkill1(@PathVariable("id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting CfgSkill1 with id: {}" , id);

        CfgSkill1 foundCfgSkill1 = cfgSkill1Service.getById(id);
        LOGGER.debug("CfgSkill1 details with id: {}" , foundCfgSkill1);

        return foundCfgSkill1;
    }

    @ApiOperation(value = "Updates the CfgSkill1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CfgSkill1 editCfgSkill1(@PathVariable("id") Double id, @RequestBody CfgSkill1 cfgSkill1) throws EntityNotFoundException {
        LOGGER.debug("Editing CfgSkill1 with id: {}" , cfgSkill1.getId());

        cfgSkill1.setId(id);
        cfgSkill1 = cfgSkill1Service.update(cfgSkill1);
        LOGGER.debug("CfgSkill1 details with id: {}" , cfgSkill1);

        return cfgSkill1;
    }

    @ApiOperation(value = "Deletes the CfgSkill1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCfgSkill1(@PathVariable("id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CfgSkill1 with id: {}" , id);

        CfgSkill1 deletedCfgSkill1 = cfgSkill1Service.delete(id);

        return deletedCfgSkill1 != null;
    }

    /**
     * @deprecated Use {@link #findCfgSkill1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CfgSkill1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CfgSkill1> searchCfgSkill1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CfgSkill1s list");
        return cfgSkill1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CfgSkill1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CfgSkill1> findCfgSkill1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CfgSkill1s list");
        return cfgSkill1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CfgSkill1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CfgSkill1> filterCfgSkill1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CfgSkill1s list");
        return cfgSkill1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCfgSkill1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cfgSkill1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CfgSkill1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCfgSkill1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CfgSkill1s");
		return cfgSkill1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCfgSkill1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cfgSkill1Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/skills", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the skills instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Skill> findAssociatedSkills(@PathVariable("id") Double id, Pageable pageable) {

        LOGGER.debug("Fetching all associated skills");
        return cfgSkill1Service.findAssociatedSkills(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CfgSkill1Service instance
	 */
	protected void setCfgSkill1Service(CfgSkill1Service service) {
		this.cfgSkill1Service = service;
	}

}

