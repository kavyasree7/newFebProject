/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.UdIfUtNullWithValues;
import com.newfebproject.wmstudio.service.UdIfUtNullWithValuesService;


/**
 * Controller object for domain model class UdIfUtNullWithValues.
 * @see UdIfUtNullWithValues
 */
@RestController("WMSTUDIO.UdIfUtNullWithValuesController")
@Api(value = "UdIfUtNullWithValuesController", description = "Exposes APIs to work with UdIfUtNullWithValues resource.")
@RequestMapping("/WMSTUDIO/UdIfUtNullWithValues")
public class UdIfUtNullWithValuesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdIfUtNullWithValuesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.UdIfUtNullWithValuesService")
	private UdIfUtNullWithValuesService udIfUtNullWithValuesService;

	@ApiOperation(value = "Creates a new UdIfUtNullWithValues instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UdIfUtNullWithValues createUdIfUtNullWithValues(@RequestBody UdIfUtNullWithValues udIfUtNullWithValues) {
		LOGGER.debug("Create UdIfUtNullWithValues with information: {}" , udIfUtNullWithValues);

		udIfUtNullWithValues = udIfUtNullWithValuesService.create(udIfUtNullWithValues);
		LOGGER.debug("Created UdIfUtNullWithValues with information: {}" , udIfUtNullWithValues);

	    return udIfUtNullWithValues;
	}

	@ApiOperation(value = "Creates a new UdIfUtNullWithValues instance.This API should be used when the UdIfUtNullWithValues instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdIfUtNullWithValues createUdIfUtNullWithValues(MultipartHttpServletRequest multipartHttpServletRequest) {
    	UdIfUtNullWithValues udIfUtNullWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdIfUtNullWithValues.class, "WMSTUDIO"); 
        LOGGER.debug("Creating a new UdIfUtNullWithValues with information: {}" , udIfUtNullWithValues);
        return udIfUtNullWithValuesService.create(udIfUtNullWithValues);
    }


    @ApiOperation(value = "Returns the UdIfUtNullWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdIfUtNullWithValues getUdIfUtNullWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UdIfUtNullWithValues with id: {}" , id);

        UdIfUtNullWithValues foundUdIfUtNullWithValues = udIfUtNullWithValuesService.getById(id);
        LOGGER.debug("UdIfUtNullWithValues details with id: {}" , foundUdIfUtNullWithValues);

        return foundUdIfUtNullWithValues;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in UdIfUtNullWithValues instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getUdIfUtNullWithValuesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in UdIfUtNullWithValues instance" , fieldName);

        if(!WMRuntimeUtils.isLob(UdIfUtNullWithValues.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        UdIfUtNullWithValues udIfUtNullWithValues = udIfUtNullWithValuesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(udIfUtNullWithValues, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the UdIfUtNullWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdIfUtNullWithValues editUdIfUtNullWithValues(@PathVariable("id") Integer id, @RequestBody UdIfUtNullWithValues udIfUtNullWithValues) throws EntityNotFoundException {
        LOGGER.debug("Editing UdIfUtNullWithValues with id: {}" , udIfUtNullWithValues.getIdCol());

        udIfUtNullWithValues.setIdCol(id);
        udIfUtNullWithValues = udIfUtNullWithValuesService.update(udIfUtNullWithValues);
        LOGGER.debug("UdIfUtNullWithValues details with id: {}" , udIfUtNullWithValues);

        return udIfUtNullWithValues;
    }

    @ApiOperation(value = "Updates the UdIfUtNullWithValues instance associated with the given id.This API should be used when UdIfUtNullWithValues instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdIfUtNullWithValues editUdIfUtNullWithValues(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        UdIfUtNullWithValues newUdIfUtNullWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdIfUtNullWithValues.class, "WMSTUDIO");
        newUdIfUtNullWithValues.setIdCol(id);

        UdIfUtNullWithValues oldUdIfUtNullWithValues = udIfUtNullWithValuesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldUdIfUtNullWithValues, newUdIfUtNullWithValues);
        LOGGER.debug("Updating UdIfUtNullWithValues with information: {}" , newUdIfUtNullWithValues);

        return udIfUtNullWithValuesService.update(newUdIfUtNullWithValues);
    }

    @ApiOperation(value = "Deletes the UdIfUtNullWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUdIfUtNullWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdIfUtNullWithValues with id: {}" , id);

        UdIfUtNullWithValues deletedUdIfUtNullWithValues = udIfUtNullWithValuesService.delete(id);

        return deletedUdIfUtNullWithValues != null;
    }

    /**
     * @deprecated Use {@link #findUdIfUtNullWithValues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UdIfUtNullWithValues instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdIfUtNullWithValues> searchUdIfUtNullWithValuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UdIfUtNullWithValues list");
        return udIfUtNullWithValuesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdIfUtNullWithValues instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdIfUtNullWithValues> findUdIfUtNullWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdIfUtNullWithValues list");
        return udIfUtNullWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdIfUtNullWithValues instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdIfUtNullWithValues> filterUdIfUtNullWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdIfUtNullWithValues list");
        return udIfUtNullWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUdIfUtNullWithValues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return udIfUtNullWithValuesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UdIfUtNullWithValues instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUdIfUtNullWithValues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UdIfUtNullWithValues");
		return udIfUtNullWithValuesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUdIfUtNullWithValuesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return udIfUtNullWithValuesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UdIfUtNullWithValuesService instance
	 */
	protected void setUdIfUtNullWithValuesService(UdIfUtNullWithValuesService service) {
		this.udIfUtNullWithValuesService = service;
	}

}

