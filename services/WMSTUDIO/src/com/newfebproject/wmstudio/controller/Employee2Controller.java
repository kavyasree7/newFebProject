/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.Employee2;
import com.newfebproject.wmstudio.service.Employee2Service;


/**
 * Controller object for domain model class Employee2.
 * @see Employee2
 */
@RestController("WMSTUDIO.Employee2Controller")
@Api(value = "Employee2Controller", description = "Exposes APIs to work with Employee2 resource.")
@RequestMapping("/WMSTUDIO/Employee2")
public class Employee2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Employee2Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.Employee2Service")
	private Employee2Service employee2Service;

	@ApiOperation(value = "Creates a new Employee2 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Employee2 createEmployee2(@RequestBody Employee2 employee2) {
		LOGGER.debug("Create Employee2 with information: {}" , employee2);

		employee2 = employee2Service.create(employee2);
		LOGGER.debug("Created Employee2 with information: {}" , employee2);

	    return employee2;
	}


    @ApiOperation(value = "Returns the Employee2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employee2 getEmployee2(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Employee2 with id: {}" , id);

        Employee2 foundEmployee2 = employee2Service.getById(id);
        LOGGER.debug("Employee2 details with id: {}" , foundEmployee2);

        return foundEmployee2;
    }

    @ApiOperation(value = "Updates the Employee2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employee2 editEmployee2(@PathVariable("id") Integer id, @RequestBody Employee2 employee2) throws EntityNotFoundException {
        LOGGER.debug("Editing Employee2 with id: {}" , employee2.getId());

        employee2.setId(id);
        employee2 = employee2Service.update(employee2);
        LOGGER.debug("Employee2 details with id: {}" , employee2);

        return employee2;
    }

    @ApiOperation(value = "Deletes the Employee2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployee2(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employee2 with id: {}" , id);

        Employee2 deletedEmployee2 = employee2Service.delete(id);

        return deletedEmployee2 != null;
    }

    /**
     * @deprecated Use {@link #findEmployee2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Employee2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employee2> searchEmployee2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Employee2s list");
        return employee2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Employee2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employee2> findEmployee2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employee2s list");
        return employee2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Employee2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employee2> filterEmployee2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employee2s list");
        return employee2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployee2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employee2Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Employee2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmployee2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Employee2s");
		return employee2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmployee2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return employee2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Employee2Service instance
	 */
	protected void setEmployee2Service(Employee2Service service) {
		this.employee2Service = service;
	}

}

