/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.Withoutpk2;
import com.newfebproject.wmstudio.Withoutpk2Id;
import com.newfebproject.wmstudio.service.Withoutpk2Service;


/**
 * Controller object for domain model class Withoutpk2.
 * @see Withoutpk2
 */
@RestController("WMSTUDIO.Withoutpk2Controller")
@Api(value = "Withoutpk2Controller", description = "Exposes APIs to work with Withoutpk2 resource.")
@RequestMapping("/WMSTUDIO/Withoutpk2")
public class Withoutpk2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Withoutpk2Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.Withoutpk2Service")
	private Withoutpk2Service withoutpk2Service;

	@ApiOperation(value = "Creates a new Withoutpk2 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Withoutpk2 createWithoutpk2(@RequestBody Withoutpk2 withoutpk2) {
		LOGGER.debug("Create Withoutpk2 with information: {}" , withoutpk2);

		withoutpk2 = withoutpk2Service.create(withoutpk2);
		LOGGER.debug("Created Withoutpk2 with information: {}" , withoutpk2);

	    return withoutpk2;
	}

    @ApiOperation(value = "Returns the Withoutpk2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Withoutpk2 getWithoutpk2(@RequestParam("id") String id,@RequestParam("string") String string,@RequestParam("short_") Short short_,@RequestParam("dateCol") LocalDateTime dateCol) throws EntityNotFoundException {

        Withoutpk2Id withoutpk2Id = new Withoutpk2Id();
        withoutpk2Id.setId(id);
        withoutpk2Id.setString(string);
        withoutpk2Id.setShort_(short_);
        withoutpk2Id.setDateCol(dateCol);

        LOGGER.debug("Getting Withoutpk2 with id: {}" , withoutpk2Id);
        Withoutpk2 withoutpk2 = withoutpk2Service.getById(withoutpk2Id);
        LOGGER.debug("Withoutpk2 details with id: {}" , withoutpk2);

        return withoutpk2;
    }



    @ApiOperation(value = "Updates the Withoutpk2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Withoutpk2 editWithoutpk2(@RequestParam("id") String id,@RequestParam("string") String string,@RequestParam("short_") Short short_,@RequestParam("dateCol") LocalDateTime dateCol, @RequestBody Withoutpk2 withoutpk2) throws EntityNotFoundException {

        withoutpk2.setId(id);
        withoutpk2.setString(string);
        withoutpk2.setShort_(short_);
        withoutpk2.setDateCol(dateCol);

        LOGGER.debug("Withoutpk2 details with id is updated with: {}" , withoutpk2);

        return withoutpk2Service.update(withoutpk2);
    }


    @ApiOperation(value = "Deletes the Withoutpk2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteWithoutpk2(@RequestParam("id") String id,@RequestParam("string") String string,@RequestParam("short_") Short short_,@RequestParam("dateCol") LocalDateTime dateCol) throws EntityNotFoundException {

        Withoutpk2Id withoutpk2Id = new Withoutpk2Id();
        withoutpk2Id.setId(id);
        withoutpk2Id.setString(string);
        withoutpk2Id.setShort_(short_);
        withoutpk2Id.setDateCol(dateCol);

        LOGGER.debug("Deleting Withoutpk2 with id: {}" , withoutpk2Id);
        Withoutpk2 withoutpk2 = withoutpk2Service.delete(withoutpk2Id);

        return withoutpk2 != null;
    }


    /**
     * @deprecated Use {@link #findWithoutpk2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Withoutpk2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Withoutpk2> searchWithoutpk2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Withoutpk2s list");
        return withoutpk2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Withoutpk2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Withoutpk2> findWithoutpk2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Withoutpk2s list");
        return withoutpk2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Withoutpk2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Withoutpk2> filterWithoutpk2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Withoutpk2s list");
        return withoutpk2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWithoutpk2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return withoutpk2Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Withoutpk2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWithoutpk2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Withoutpk2s");
		return withoutpk2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWithoutpk2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return withoutpk2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Withoutpk2Service instance
	 */
	protected void setWithoutpk2Service(Withoutpk2Service service) {
		this.withoutpk2Service = service;
	}

}

