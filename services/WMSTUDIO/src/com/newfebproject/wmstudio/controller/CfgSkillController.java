/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.CfgSkill;
import com.newfebproject.wmstudio.CfgSkillId;
import com.newfebproject.wmstudio.service.CfgSkillService;


/**
 * Controller object for domain model class CfgSkill.
 * @see CfgSkill
 */
@RestController("WMSTUDIO.CfgSkillController")
@Api(value = "CfgSkillController", description = "Exposes APIs to work with CfgSkill resource.")
@RequestMapping("/WMSTUDIO/CfgSkill")
public class CfgSkillController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CfgSkillController.class);

    @Autowired
	@Qualifier("WMSTUDIO.CfgSkillService")
	private CfgSkillService cfgSkillService;

	@ApiOperation(value = "Creates a new CfgSkill instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CfgSkill createCfgSkill(@RequestBody CfgSkill cfgSkill) {
		LOGGER.debug("Create CfgSkill with information: {}" , cfgSkill);

		cfgSkill = cfgSkillService.create(cfgSkill);
		LOGGER.debug("Created CfgSkill with information: {}" , cfgSkill);

	    return cfgSkill;
	}

    @ApiOperation(value = "Returns the CfgSkill instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CfgSkill getCfgSkill(@RequestParam("id") Double id,@RequestParam("name") String name,@RequestParam("column3") String column3,@RequestParam("column4") String column4) throws EntityNotFoundException {

        CfgSkillId cfgskillId = new CfgSkillId();
        cfgskillId.setId(id);
        cfgskillId.setName(name);
        cfgskillId.setColumn3(column3);
        cfgskillId.setColumn4(column4);

        LOGGER.debug("Getting CfgSkill with id: {}" , cfgskillId);
        CfgSkill cfgSkill = cfgSkillService.getById(cfgskillId);
        LOGGER.debug("CfgSkill details with id: {}" , cfgSkill);

        return cfgSkill;
    }



    @ApiOperation(value = "Updates the CfgSkill instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CfgSkill editCfgSkill(@RequestParam("id") Double id,@RequestParam("name") String name,@RequestParam("column3") String column3,@RequestParam("column4") String column4, @RequestBody CfgSkill cfgSkill) throws EntityNotFoundException {

        cfgSkill.setId(id);
        cfgSkill.setName(name);
        cfgSkill.setColumn3(column3);
        cfgSkill.setColumn4(column4);

        LOGGER.debug("CfgSkill details with id is updated with: {}" , cfgSkill);

        return cfgSkillService.update(cfgSkill);
    }


    @ApiOperation(value = "Deletes the CfgSkill instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCfgSkill(@RequestParam("id") Double id,@RequestParam("name") String name,@RequestParam("column3") String column3,@RequestParam("column4") String column4) throws EntityNotFoundException {

        CfgSkillId cfgskillId = new CfgSkillId();
        cfgskillId.setId(id);
        cfgskillId.setName(name);
        cfgskillId.setColumn3(column3);
        cfgskillId.setColumn4(column4);

        LOGGER.debug("Deleting CfgSkill with id: {}" , cfgskillId);
        CfgSkill cfgSkill = cfgSkillService.delete(cfgskillId);

        return cfgSkill != null;
    }


    /**
     * @deprecated Use {@link #findCfgSkills(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CfgSkill instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CfgSkill> searchCfgSkillsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CfgSkills list");
        return cfgSkillService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CfgSkill instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CfgSkill> findCfgSkills(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CfgSkills list");
        return cfgSkillService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CfgSkill instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CfgSkill> filterCfgSkills(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CfgSkills list");
        return cfgSkillService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCfgSkills(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cfgSkillService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CfgSkill instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCfgSkills( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CfgSkills");
		return cfgSkillService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCfgSkillAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cfgSkillService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CfgSkillService instance
	 */
	protected void setCfgSkillService(CfgSkillService service) {
		this.cfgSkillService = service;
	}

}

