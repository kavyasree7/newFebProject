/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.Testbigdectab;
import com.newfebproject.wmstudio.service.TestbigdectabService;


/**
 * Controller object for domain model class Testbigdectab.
 * @see Testbigdectab
 */
@RestController("WMSTUDIO.TestbigdectabController")
@Api(value = "TestbigdectabController", description = "Exposes APIs to work with Testbigdectab resource.")
@RequestMapping("/WMSTUDIO/Testbigdectab")
public class TestbigdectabController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestbigdectabController.class);

    @Autowired
	@Qualifier("WMSTUDIO.TestbigdectabService")
	private TestbigdectabService testbigdectabService;

	@ApiOperation(value = "Creates a new Testbigdectab instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Testbigdectab createTestbigdectab(@RequestBody Testbigdectab testbigdectab) {
		LOGGER.debug("Create Testbigdectab with information: {}" , testbigdectab);

		testbigdectab = testbigdectabService.create(testbigdectab);
		LOGGER.debug("Created Testbigdectab with information: {}" , testbigdectab);

	    return testbigdectab;
	}


    @ApiOperation(value = "Returns the Testbigdectab instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testbigdectab getTestbigdectab(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting Testbigdectab with id: {}" , id);

        Testbigdectab foundTestbigdectab = testbigdectabService.getById(id);
        LOGGER.debug("Testbigdectab details with id: {}" , foundTestbigdectab);

        return foundTestbigdectab;
    }

    @ApiOperation(value = "Updates the Testbigdectab instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testbigdectab editTestbigdectab(@PathVariable("id") BigInteger id, @RequestBody Testbigdectab testbigdectab) throws EntityNotFoundException {
        LOGGER.debug("Editing Testbigdectab with id: {}" , testbigdectab.getNumbercol());

        testbigdectab.setNumbercol(id);
        testbigdectab = testbigdectabService.update(testbigdectab);
        LOGGER.debug("Testbigdectab details with id: {}" , testbigdectab);

        return testbigdectab;
    }

    @ApiOperation(value = "Deletes the Testbigdectab instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestbigdectab(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Testbigdectab with id: {}" , id);

        Testbigdectab deletedTestbigdectab = testbigdectabService.delete(id);

        return deletedTestbigdectab != null;
    }

    /**
     * @deprecated Use {@link #findTestbigdectabs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testbigdectab instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testbigdectab> searchTestbigdectabsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testbigdectabs list");
        return testbigdectabService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testbigdectab instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testbigdectab> findTestbigdectabs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testbigdectabs list");
        return testbigdectabService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testbigdectab instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testbigdectab> filterTestbigdectabs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testbigdectabs list");
        return testbigdectabService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestbigdectabs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testbigdectabService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Testbigdectab instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestbigdectabs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testbigdectabs");
		return testbigdectabService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestbigdectabAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testbigdectabService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestbigdectabService instance
	 */
	protected void setTestbigdectabService(TestbigdectabService service) {
		this.testbigdectabService = service;
	}

}

