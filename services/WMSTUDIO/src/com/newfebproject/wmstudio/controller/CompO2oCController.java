/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.CompO2oC;
import com.newfebproject.wmstudio.CompO2oPId;
import com.newfebproject.wmstudio.service.CompO2oCService;


/**
 * Controller object for domain model class CompO2oC.
 * @see CompO2oC
 */
@RestController("WMSTUDIO.CompO2oCController")
@Api(value = "CompO2oCController", description = "Exposes APIs to work with CompO2oC resource.")
@RequestMapping("/WMSTUDIO/CompO2oC")
public class CompO2oCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompO2oCController.class);

    @Autowired
	@Qualifier("WMSTUDIO.CompO2oCService")
	private CompO2oCService compO2oCService;

	@ApiOperation(value = "Creates a new CompO2oC instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CompO2oC createCompO2oC(@RequestBody CompO2oC compO2oC) {
		LOGGER.debug("Create CompO2oC with information: {}" , compO2oC);

		compO2oC = compO2oCService.create(compO2oC);
		LOGGER.debug("Created CompO2oC with information: {}" , compO2oC);

	    return compO2oC;
	}

    @ApiOperation(value = "Returns the CompO2oC instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompO2oC getCompO2oC(@RequestParam("id") Integer id,@RequestParam("column2") String column2) throws EntityNotFoundException {

        CompO2oPId compo2ocId = new CompO2oPId();
        compo2ocId.setId(id);
        compo2ocId.setColumn2(column2);

        LOGGER.debug("Getting CompO2oC with id: {}" , compo2ocId);
        CompO2oC compO2oC = compO2oCService.getById(compo2ocId);
        LOGGER.debug("CompO2oC details with id: {}" , compO2oC);

        return compO2oC;
    }



    @ApiOperation(value = "Updates the CompO2oC instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompO2oC editCompO2oC(@RequestParam("id") Integer id,@RequestParam("column2") String column2, @RequestBody CompO2oC compO2oC) throws EntityNotFoundException {

        compO2oC.setId(id);
        compO2oC.setColumn2(column2);

        LOGGER.debug("CompO2oC details with id is updated with: {}" , compO2oC);

        return compO2oCService.update(compO2oC);
    }


    @ApiOperation(value = "Deletes the CompO2oC instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompO2oC(@RequestParam("id") Integer id,@RequestParam("column2") String column2) throws EntityNotFoundException {

        CompO2oPId compo2ocId = new CompO2oPId();
        compo2ocId.setId(id);
        compo2ocId.setColumn2(column2);

        LOGGER.debug("Deleting CompO2oC with id: {}" , compo2ocId);
        CompO2oC compO2oC = compO2oCService.delete(compo2ocId);

        return compO2oC != null;
    }


    /**
     * @deprecated Use {@link #findCompO2oCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CompO2oC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompO2oC> searchCompO2oCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompO2oCs list");
        return compO2oCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompO2oC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompO2oC> findCompO2oCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompO2oCs list");
        return compO2oCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompO2oC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompO2oC> filterCompO2oCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompO2oCs list");
        return compO2oCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompO2oCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compO2oCService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CompO2oC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompO2oCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompO2oCs");
		return compO2oCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompO2oCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compO2oCService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompO2oCService instance
	 */
	protected void setCompO2oCService(CompO2oCService service) {
		this.compO2oCService = service;
	}

}

