/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.VirtualO2oParent1;
import com.newfebproject.wmstudio.VirtualO2oParent1Id;
import com.newfebproject.wmstudio.service.VirtualO2oParent1Service;


/**
 * Controller object for domain model class VirtualO2oParent1.
 * @see VirtualO2oParent1
 */
@RestController("WMSTUDIO.VirtualO2oParent1Controller")
@Api(value = "VirtualO2oParent1Controller", description = "Exposes APIs to work with VirtualO2oParent1 resource.")
@RequestMapping("/WMSTUDIO/VirtualO2oParent1")
public class VirtualO2oParent1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualO2oParent1Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.VirtualO2oParent1Service")
	private VirtualO2oParent1Service virtualO2oParent1Service;

	@ApiOperation(value = "Creates a new VirtualO2oParent1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public VirtualO2oParent1 createVirtualO2oParent1(@RequestBody VirtualO2oParent1 virtualO2oParent1) {
		LOGGER.debug("Create VirtualO2oParent1 with information: {}" , virtualO2oParent1);

		virtualO2oParent1 = virtualO2oParent1Service.create(virtualO2oParent1);
		LOGGER.debug("Created VirtualO2oParent1 with information: {}" , virtualO2oParent1);

	    return virtualO2oParent1;
	}

    @ApiOperation(value = "Returns the VirtualO2oParent1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualO2oParent1 getVirtualO2oParent1(@RequestParam("id") BigInteger id,@RequestParam("stringColumn") String stringColumn,@RequestParam("bigdecimalColumn") BigDecimal bigdecimalColumn,@RequestParam("descColumn") String descColumn) throws EntityNotFoundException {

        VirtualO2oParent1Id virtualo2oparent1Id = new VirtualO2oParent1Id();
        virtualo2oparent1Id.setId(id);
        virtualo2oparent1Id.setStringColumn(stringColumn);
        virtualo2oparent1Id.setBigdecimalColumn(bigdecimalColumn);
        virtualo2oparent1Id.setDescColumn(descColumn);

        LOGGER.debug("Getting VirtualO2oParent1 with id: {}" , virtualo2oparent1Id);
        VirtualO2oParent1 virtualO2oParent1 = virtualO2oParent1Service.getById(virtualo2oparent1Id);
        LOGGER.debug("VirtualO2oParent1 details with id: {}" , virtualO2oParent1);

        return virtualO2oParent1;
    }



    @ApiOperation(value = "Updates the VirtualO2oParent1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualO2oParent1 editVirtualO2oParent1(@RequestParam("id") BigInteger id,@RequestParam("stringColumn") String stringColumn,@RequestParam("bigdecimalColumn") BigDecimal bigdecimalColumn,@RequestParam("descColumn") String descColumn, @RequestBody VirtualO2oParent1 virtualO2oParent1) throws EntityNotFoundException {

        virtualO2oParent1.setId(id);
        virtualO2oParent1.setStringColumn(stringColumn);
        virtualO2oParent1.setBigdecimalColumn(bigdecimalColumn);
        virtualO2oParent1.setDescColumn(descColumn);

        LOGGER.debug("VirtualO2oParent1 details with id is updated with: {}" , virtualO2oParent1);

        return virtualO2oParent1Service.update(virtualO2oParent1);
    }


    @ApiOperation(value = "Deletes the VirtualO2oParent1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualO2oParent1(@RequestParam("id") BigInteger id,@RequestParam("stringColumn") String stringColumn,@RequestParam("bigdecimalColumn") BigDecimal bigdecimalColumn,@RequestParam("descColumn") String descColumn) throws EntityNotFoundException {

        VirtualO2oParent1Id virtualo2oparent1Id = new VirtualO2oParent1Id();
        virtualo2oparent1Id.setId(id);
        virtualo2oparent1Id.setStringColumn(stringColumn);
        virtualo2oparent1Id.setBigdecimalColumn(bigdecimalColumn);
        virtualo2oparent1Id.setDescColumn(descColumn);

        LOGGER.debug("Deleting VirtualO2oParent1 with id: {}" , virtualo2oparent1Id);
        VirtualO2oParent1 virtualO2oParent1 = virtualO2oParent1Service.delete(virtualo2oparent1Id);

        return virtualO2oParent1 != null;
    }


    /**
     * @deprecated Use {@link #findVirtualO2oParent1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualO2oParent1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oParent1> searchVirtualO2oParent1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualO2oParent1s list");
        return virtualO2oParent1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualO2oParent1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oParent1> findVirtualO2oParent1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualO2oParent1s list");
        return virtualO2oParent1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualO2oParent1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oParent1> filterVirtualO2oParent1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualO2oParent1s list");
        return virtualO2oParent1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualO2oParent1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualO2oParent1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of VirtualO2oParent1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualO2oParent1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualO2oParent1s");
		return virtualO2oParent1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualO2oParent1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualO2oParent1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualO2oParent1Service instance
	 */
	protected void setVirtualO2oParent1Service(VirtualO2oParent1Service service) {
		this.virtualO2oParent1Service = service;
	}

}

