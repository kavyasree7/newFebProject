/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.UdInsertableWithValues;
import com.newfebproject.wmstudio.service.UdInsertableWithValuesService;


/**
 * Controller object for domain model class UdInsertableWithValues.
 * @see UdInsertableWithValues
 */
@RestController("WMSTUDIO.UdInsertableWithValuesController")
@Api(value = "UdInsertableWithValuesController", description = "Exposes APIs to work with UdInsertableWithValues resource.")
@RequestMapping("/WMSTUDIO/UdInsertableWithValues")
public class UdInsertableWithValuesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdInsertableWithValuesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.UdInsertableWithValuesService")
	private UdInsertableWithValuesService udInsertableWithValuesService;

	@ApiOperation(value = "Creates a new UdInsertableWithValues instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UdInsertableWithValues createUdInsertableWithValues(@RequestBody UdInsertableWithValues udInsertableWithValues) {
		LOGGER.debug("Create UdInsertableWithValues with information: {}" , udInsertableWithValues);

		udInsertableWithValues = udInsertableWithValuesService.create(udInsertableWithValues);
		LOGGER.debug("Created UdInsertableWithValues with information: {}" , udInsertableWithValues);

	    return udInsertableWithValues;
	}

	@ApiOperation(value = "Creates a new UdInsertableWithValues instance.This API should be used when the UdInsertableWithValues instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdInsertableWithValues createUdInsertableWithValues(MultipartHttpServletRequest multipartHttpServletRequest) {
    	UdInsertableWithValues udInsertableWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdInsertableWithValues.class, "WMSTUDIO"); 
        LOGGER.debug("Creating a new UdInsertableWithValues with information: {}" , udInsertableWithValues);
        return udInsertableWithValuesService.create(udInsertableWithValues);
    }


    @ApiOperation(value = "Returns the UdInsertableWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdInsertableWithValues getUdInsertableWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UdInsertableWithValues with id: {}" , id);

        UdInsertableWithValues foundUdInsertableWithValues = udInsertableWithValuesService.getById(id);
        LOGGER.debug("UdInsertableWithValues details with id: {}" , foundUdInsertableWithValues);

        return foundUdInsertableWithValues;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in UdInsertableWithValues instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getUdInsertableWithValuesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in UdInsertableWithValues instance" , fieldName);

        if(!WMRuntimeUtils.isLob(UdInsertableWithValues.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        UdInsertableWithValues udInsertableWithValues = udInsertableWithValuesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(udInsertableWithValues, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the UdInsertableWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdInsertableWithValues editUdInsertableWithValues(@PathVariable("id") Integer id, @RequestBody UdInsertableWithValues udInsertableWithValues) throws EntityNotFoundException {
        LOGGER.debug("Editing UdInsertableWithValues with id: {}" , udInsertableWithValues.getIdCol());

        udInsertableWithValues.setIdCol(id);
        udInsertableWithValues = udInsertableWithValuesService.update(udInsertableWithValues);
        LOGGER.debug("UdInsertableWithValues details with id: {}" , udInsertableWithValues);

        return udInsertableWithValues;
    }

    @ApiOperation(value = "Updates the UdInsertableWithValues instance associated with the given id.This API should be used when UdInsertableWithValues instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdInsertableWithValues editUdInsertableWithValues(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        UdInsertableWithValues newUdInsertableWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdInsertableWithValues.class, "WMSTUDIO");
        newUdInsertableWithValues.setIdCol(id);

        UdInsertableWithValues oldUdInsertableWithValues = udInsertableWithValuesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldUdInsertableWithValues, newUdInsertableWithValues);
        LOGGER.debug("Updating UdInsertableWithValues with information: {}" , newUdInsertableWithValues);

        return udInsertableWithValuesService.update(newUdInsertableWithValues);
    }

    @ApiOperation(value = "Deletes the UdInsertableWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUdInsertableWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdInsertableWithValues with id: {}" , id);

        UdInsertableWithValues deletedUdInsertableWithValues = udInsertableWithValuesService.delete(id);

        return deletedUdInsertableWithValues != null;
    }

    /**
     * @deprecated Use {@link #findUdInsertableWithValues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UdInsertableWithValues instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdInsertableWithValues> searchUdInsertableWithValuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UdInsertableWithValues list");
        return udInsertableWithValuesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdInsertableWithValues instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdInsertableWithValues> findUdInsertableWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdInsertableWithValues list");
        return udInsertableWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdInsertableWithValues instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdInsertableWithValues> filterUdInsertableWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdInsertableWithValues list");
        return udInsertableWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUdInsertableWithValues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return udInsertableWithValuesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UdInsertableWithValues instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUdInsertableWithValues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UdInsertableWithValues");
		return udInsertableWithValuesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUdInsertableWithValuesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return udInsertableWithValuesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UdInsertableWithValuesService instance
	 */
	protected void setUdInsertableWithValuesService(UdInsertableWithValuesService service) {
		this.udInsertableWithValuesService = service;
	}

}

