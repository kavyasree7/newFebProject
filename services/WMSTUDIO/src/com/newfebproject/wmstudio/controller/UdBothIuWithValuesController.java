/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.UdBothIuWithValues;
import com.newfebproject.wmstudio.service.UdBothIuWithValuesService;


/**
 * Controller object for domain model class UdBothIuWithValues.
 * @see UdBothIuWithValues
 */
@RestController("WMSTUDIO.UdBothIuWithValuesController")
@Api(value = "UdBothIuWithValuesController", description = "Exposes APIs to work with UdBothIuWithValues resource.")
@RequestMapping("/WMSTUDIO/UdBothIuWithValues")
public class UdBothIuWithValuesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdBothIuWithValuesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.UdBothIuWithValuesService")
	private UdBothIuWithValuesService udBothIuWithValuesService;

	@ApiOperation(value = "Creates a new UdBothIuWithValues instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UdBothIuWithValues createUdBothIuWithValues(@RequestBody UdBothIuWithValues udBothIuWithValues) {
		LOGGER.debug("Create UdBothIuWithValues with information: {}" , udBothIuWithValues);

		udBothIuWithValues = udBothIuWithValuesService.create(udBothIuWithValues);
		LOGGER.debug("Created UdBothIuWithValues with information: {}" , udBothIuWithValues);

	    return udBothIuWithValues;
	}

	@ApiOperation(value = "Creates a new UdBothIuWithValues instance.This API should be used when the UdBothIuWithValues instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithValues createUdBothIuWithValues(MultipartHttpServletRequest multipartHttpServletRequest) {
    	UdBothIuWithValues udBothIuWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdBothIuWithValues.class, "WMSTUDIO"); 
        LOGGER.debug("Creating a new UdBothIuWithValues with information: {}" , udBothIuWithValues);
        return udBothIuWithValuesService.create(udBothIuWithValues);
    }


    @ApiOperation(value = "Returns the UdBothIuWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithValues getUdBothIuWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UdBothIuWithValues with id: {}" , id);

        UdBothIuWithValues foundUdBothIuWithValues = udBothIuWithValuesService.getById(id);
        LOGGER.debug("UdBothIuWithValues details with id: {}" , foundUdBothIuWithValues);

        return foundUdBothIuWithValues;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in UdBothIuWithValues instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getUdBothIuWithValuesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in UdBothIuWithValues instance" , fieldName);

        if(!WMRuntimeUtils.isLob(UdBothIuWithValues.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        UdBothIuWithValues udBothIuWithValues = udBothIuWithValuesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(udBothIuWithValues, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the UdBothIuWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithValues editUdBothIuWithValues(@PathVariable("id") Integer id, @RequestBody UdBothIuWithValues udBothIuWithValues) throws EntityNotFoundException {
        LOGGER.debug("Editing UdBothIuWithValues with id: {}" , udBothIuWithValues.getIdCol());

        udBothIuWithValues.setIdCol(id);
        udBothIuWithValues = udBothIuWithValuesService.update(udBothIuWithValues);
        LOGGER.debug("UdBothIuWithValues details with id: {}" , udBothIuWithValues);

        return udBothIuWithValues;
    }

    @ApiOperation(value = "Updates the UdBothIuWithValues instance associated with the given id.This API should be used when UdBothIuWithValues instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithValues editUdBothIuWithValues(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        UdBothIuWithValues newUdBothIuWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdBothIuWithValues.class, "WMSTUDIO");
        newUdBothIuWithValues.setIdCol(id);

        UdBothIuWithValues oldUdBothIuWithValues = udBothIuWithValuesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldUdBothIuWithValues, newUdBothIuWithValues);
        LOGGER.debug("Updating UdBothIuWithValues with information: {}" , newUdBothIuWithValues);

        return udBothIuWithValuesService.update(newUdBothIuWithValues);
    }

    @ApiOperation(value = "Deletes the UdBothIuWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUdBothIuWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdBothIuWithValues with id: {}" , id);

        UdBothIuWithValues deletedUdBothIuWithValues = udBothIuWithValuesService.delete(id);

        return deletedUdBothIuWithValues != null;
    }

    /**
     * @deprecated Use {@link #findUdBothIuWithValues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UdBothIuWithValues instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdBothIuWithValues> searchUdBothIuWithValuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UdBothIuWithValues list");
        return udBothIuWithValuesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdBothIuWithValues instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdBothIuWithValues> findUdBothIuWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdBothIuWithValues list");
        return udBothIuWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdBothIuWithValues instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdBothIuWithValues> filterUdBothIuWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdBothIuWithValues list");
        return udBothIuWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUdBothIuWithValues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return udBothIuWithValuesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UdBothIuWithValues instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUdBothIuWithValues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UdBothIuWithValues");
		return udBothIuWithValuesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUdBothIuWithValuesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return udBothIuWithValuesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UdBothIuWithValuesService instance
	 */
	protected void setUdBothIuWithValuesService(UdBothIuWithValuesService service) {
		this.udBothIuWithValuesService = service;
	}

}

