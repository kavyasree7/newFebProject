/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.Table5;
import com.newfebproject.wmstudio.service.Table5Service;


/**
 * Controller object for domain model class Table5.
 * @see Table5
 */
@RestController("WMSTUDIO.Table5Controller")
@Api(value = "Table5Controller", description = "Exposes APIs to work with Table5 resource.")
@RequestMapping("/WMSTUDIO/Table5")
public class Table5Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table5Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.Table5Service")
	private Table5Service table5Service;

	@ApiOperation(value = "Creates a new Table5 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table5 createTable5(@RequestBody Table5 table5) {
		LOGGER.debug("Create Table5 with information: {}" , table5);

		table5 = table5Service.create(table5);
		LOGGER.debug("Created Table5 with information: {}" , table5);

	    return table5;
	}


    @ApiOperation(value = "Returns the Table5 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table5 getTable5(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table5 with id: {}" , id);

        Table5 foundTable5 = table5Service.getById(id);
        LOGGER.debug("Table5 details with id: {}" , foundTable5);

        return foundTable5;
    }

    @ApiOperation(value = "Updates the Table5 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table5 editTable5(@PathVariable("id") Integer id, @RequestBody Table5 table5) throws EntityNotFoundException {
        LOGGER.debug("Editing Table5 with id: {}" , table5.getId());

        table5.setId(id);
        table5 = table5Service.update(table5);
        LOGGER.debug("Table5 details with id: {}" , table5);

        return table5;
    }

    @ApiOperation(value = "Deletes the Table5 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable5(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table5 with id: {}" , id);

        Table5 deletedTable5 = table5Service.delete(id);

        return deletedTable5 != null;
    }

    /**
     * @deprecated Use {@link #findTable5s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table5 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table5> searchTable5sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table5s list");
        return table5Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table5 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table5> findTable5s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table5s list");
        return table5Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table5 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table5> filterTable5s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table5s list");
        return table5Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable5s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table5Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table5 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable5s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table5s");
		return table5Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable5AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table5Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table5Service instance
	 */
	protected void setTable5Service(Table5Service service) {
		this.table5Service = service;
	}

}

