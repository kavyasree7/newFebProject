/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.MandatorycolumnView;
import com.newfebproject.wmstudio.MandatorycolumnViewId;
import com.newfebproject.wmstudio.service.MandatorycolumnViewService;


/**
 * Controller object for domain model class MandatorycolumnView.
 * @see MandatorycolumnView
 */
@RestController("WMSTUDIO.MandatorycolumnViewController")
@Api(value = "MandatorycolumnViewController", description = "Exposes APIs to work with MandatorycolumnView resource.")
@RequestMapping("/WMSTUDIO/MandatorycolumnView")
public class MandatorycolumnViewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MandatorycolumnViewController.class);

    @Autowired
	@Qualifier("WMSTUDIO.MandatorycolumnViewService")
	private MandatorycolumnViewService mandatorycolumnViewService;

	@ApiOperation(value = "Creates a new MandatorycolumnView instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public MandatorycolumnView createMandatorycolumnView(@RequestBody MandatorycolumnView mandatorycolumnView) {
		LOGGER.debug("Create MandatorycolumnView with information: {}" , mandatorycolumnView);

		mandatorycolumnView = mandatorycolumnViewService.create(mandatorycolumnView);
		LOGGER.debug("Created MandatorycolumnView with information: {}" , mandatorycolumnView);

	    return mandatorycolumnView;
	}

    @ApiOperation(value = "Returns the MandatorycolumnView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MandatorycolumnView getMandatorycolumnView(@RequestParam("id") Integer id,@RequestParam("column1") String column1,@RequestParam("column3Optional") String column3Optional) throws EntityNotFoundException {

        MandatorycolumnViewId mandatorycolumnviewId = new MandatorycolumnViewId();
        mandatorycolumnviewId.setId(id);
        mandatorycolumnviewId.setColumn1(column1);
        mandatorycolumnviewId.setColumn3Optional(column3Optional);

        LOGGER.debug("Getting MandatorycolumnView with id: {}" , mandatorycolumnviewId);
        MandatorycolumnView mandatorycolumnView = mandatorycolumnViewService.getById(mandatorycolumnviewId);
        LOGGER.debug("MandatorycolumnView details with id: {}" , mandatorycolumnView);

        return mandatorycolumnView;
    }



    @ApiOperation(value = "Updates the MandatorycolumnView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MandatorycolumnView editMandatorycolumnView(@RequestParam("id") Integer id,@RequestParam("column1") String column1,@RequestParam("column3Optional") String column3Optional, @RequestBody MandatorycolumnView mandatorycolumnView) throws EntityNotFoundException {

        mandatorycolumnView.setId(id);
        mandatorycolumnView.setColumn1(column1);
        mandatorycolumnView.setColumn3Optional(column3Optional);

        LOGGER.debug("MandatorycolumnView details with id is updated with: {}" , mandatorycolumnView);

        return mandatorycolumnViewService.update(mandatorycolumnView);
    }


    @ApiOperation(value = "Deletes the MandatorycolumnView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMandatorycolumnView(@RequestParam("id") Integer id,@RequestParam("column1") String column1,@RequestParam("column3Optional") String column3Optional) throws EntityNotFoundException {

        MandatorycolumnViewId mandatorycolumnviewId = new MandatorycolumnViewId();
        mandatorycolumnviewId.setId(id);
        mandatorycolumnviewId.setColumn1(column1);
        mandatorycolumnviewId.setColumn3Optional(column3Optional);

        LOGGER.debug("Deleting MandatorycolumnView with id: {}" , mandatorycolumnviewId);
        MandatorycolumnView mandatorycolumnView = mandatorycolumnViewService.delete(mandatorycolumnviewId);

        return mandatorycolumnView != null;
    }


    /**
     * @deprecated Use {@link #findMandatorycolumnViews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MandatorycolumnView instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MandatorycolumnView> searchMandatorycolumnViewsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MandatorycolumnViews list");
        return mandatorycolumnViewService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MandatorycolumnView instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MandatorycolumnView> findMandatorycolumnViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MandatorycolumnViews list");
        return mandatorycolumnViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MandatorycolumnView instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MandatorycolumnView> filterMandatorycolumnViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MandatorycolumnViews list");
        return mandatorycolumnViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMandatorycolumnViews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return mandatorycolumnViewService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of MandatorycolumnView instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMandatorycolumnViews( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MandatorycolumnViews");
		return mandatorycolumnViewService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMandatorycolumnViewAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return mandatorycolumnViewService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MandatorycolumnViewService instance
	 */
	protected void setMandatorycolumnViewService(MandatorycolumnViewService service) {
		this.mandatorycolumnViewService = service;
	}

}

