/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.UdBothIuWithOutValues;
import com.newfebproject.wmstudio.service.UdBothIuWithOutValuesService;


/**
 * Controller object for domain model class UdBothIuWithOutValues.
 * @see UdBothIuWithOutValues
 */
@RestController("WMSTUDIO.UdBothIuWithOutValuesController")
@Api(value = "UdBothIuWithOutValuesController", description = "Exposes APIs to work with UdBothIuWithOutValues resource.")
@RequestMapping("/WMSTUDIO/UdBothIuWithOutValues")
public class UdBothIuWithOutValuesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdBothIuWithOutValuesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.UdBothIuWithOutValuesService")
	private UdBothIuWithOutValuesService udBothIuWithOutValuesService;

	@ApiOperation(value = "Creates a new UdBothIuWithOutValues instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UdBothIuWithOutValues createUdBothIuWithOutValues(@RequestBody UdBothIuWithOutValues udBothIuWithOutValues) {
		LOGGER.debug("Create UdBothIuWithOutValues with information: {}" , udBothIuWithOutValues);

		udBothIuWithOutValues = udBothIuWithOutValuesService.create(udBothIuWithOutValues);
		LOGGER.debug("Created UdBothIuWithOutValues with information: {}" , udBothIuWithOutValues);

	    return udBothIuWithOutValues;
	}

	@ApiOperation(value = "Creates a new UdBothIuWithOutValues instance.This API should be used when the UdBothIuWithOutValues instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithOutValues createUdBothIuWithOutValues(MultipartHttpServletRequest multipartHttpServletRequest) {
    	UdBothIuWithOutValues udBothIuWithOutValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdBothIuWithOutValues.class, "WMSTUDIO"); 
        LOGGER.debug("Creating a new UdBothIuWithOutValues with information: {}" , udBothIuWithOutValues);
        return udBothIuWithOutValuesService.create(udBothIuWithOutValues);
    }


    @ApiOperation(value = "Returns the UdBothIuWithOutValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithOutValues getUdBothIuWithOutValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UdBothIuWithOutValues with id: {}" , id);

        UdBothIuWithOutValues foundUdBothIuWithOutValues = udBothIuWithOutValuesService.getById(id);
        LOGGER.debug("UdBothIuWithOutValues details with id: {}" , foundUdBothIuWithOutValues);

        return foundUdBothIuWithOutValues;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in UdBothIuWithOutValues instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getUdBothIuWithOutValuesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in UdBothIuWithOutValues instance" , fieldName);

        if(!WMRuntimeUtils.isLob(UdBothIuWithOutValues.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        UdBothIuWithOutValues udBothIuWithOutValues = udBothIuWithOutValuesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(udBothIuWithOutValues, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the UdBothIuWithOutValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithOutValues editUdBothIuWithOutValues(@PathVariable("id") Integer id, @RequestBody UdBothIuWithOutValues udBothIuWithOutValues) throws EntityNotFoundException {
        LOGGER.debug("Editing UdBothIuWithOutValues with id: {}" , udBothIuWithOutValues.getIdCol());

        udBothIuWithOutValues.setIdCol(id);
        udBothIuWithOutValues = udBothIuWithOutValuesService.update(udBothIuWithOutValues);
        LOGGER.debug("UdBothIuWithOutValues details with id: {}" , udBothIuWithOutValues);

        return udBothIuWithOutValues;
    }

    @ApiOperation(value = "Updates the UdBothIuWithOutValues instance associated with the given id.This API should be used when UdBothIuWithOutValues instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdBothIuWithOutValues editUdBothIuWithOutValues(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        UdBothIuWithOutValues newUdBothIuWithOutValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdBothIuWithOutValues.class, "WMSTUDIO");
        newUdBothIuWithOutValues.setIdCol(id);

        UdBothIuWithOutValues oldUdBothIuWithOutValues = udBothIuWithOutValuesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldUdBothIuWithOutValues, newUdBothIuWithOutValues);
        LOGGER.debug("Updating UdBothIuWithOutValues with information: {}" , newUdBothIuWithOutValues);

        return udBothIuWithOutValuesService.update(newUdBothIuWithOutValues);
    }

    @ApiOperation(value = "Deletes the UdBothIuWithOutValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUdBothIuWithOutValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdBothIuWithOutValues with id: {}" , id);

        UdBothIuWithOutValues deletedUdBothIuWithOutValues = udBothIuWithOutValuesService.delete(id);

        return deletedUdBothIuWithOutValues != null;
    }

    /**
     * @deprecated Use {@link #findUdBothIuWithOutValues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UdBothIuWithOutValues instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdBothIuWithOutValues> searchUdBothIuWithOutValuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UdBothIuWithOutValues list");
        return udBothIuWithOutValuesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdBothIuWithOutValues instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdBothIuWithOutValues> findUdBothIuWithOutValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdBothIuWithOutValues list");
        return udBothIuWithOutValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdBothIuWithOutValues instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdBothIuWithOutValues> filterUdBothIuWithOutValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdBothIuWithOutValues list");
        return udBothIuWithOutValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUdBothIuWithOutValues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return udBothIuWithOutValuesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UdBothIuWithOutValues instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUdBothIuWithOutValues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UdBothIuWithOutValues");
		return udBothIuWithOutValuesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUdBothIuWithOutValuesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return udBothIuWithOutValuesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UdBothIuWithOutValuesService instance
	 */
	protected void setUdBothIuWithOutValuesService(UdBothIuWithOutValuesService service) {
		this.udBothIuWithOutValuesService = service;
	}

}

