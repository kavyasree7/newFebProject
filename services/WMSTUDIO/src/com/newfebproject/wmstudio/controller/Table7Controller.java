/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.Table7;
import com.newfebproject.wmstudio.service.Table7Service;


/**
 * Controller object for domain model class Table7.
 * @see Table7
 */
@RestController("WMSTUDIO.Table7Controller")
@Api(value = "Table7Controller", description = "Exposes APIs to work with Table7 resource.")
@RequestMapping("/WMSTUDIO/Table7")
public class Table7Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table7Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.Table7Service")
	private Table7Service table7Service;

	@ApiOperation(value = "Creates a new Table7 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table7 createTable7(@RequestBody Table7 table7) {
		LOGGER.debug("Create Table7 with information: {}" , table7);

		table7 = table7Service.create(table7);
		LOGGER.debug("Created Table7 with information: {}" , table7);

	    return table7;
	}


    @ApiOperation(value = "Returns the Table7 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table7 getTable7(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table7 with id: {}" , id);

        Table7 foundTable7 = table7Service.getById(id);
        LOGGER.debug("Table7 details with id: {}" , foundTable7);

        return foundTable7;
    }

    @ApiOperation(value = "Updates the Table7 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table7 editTable7(@PathVariable("id") Integer id, @RequestBody Table7 table7) throws EntityNotFoundException {
        LOGGER.debug("Editing Table7 with id: {}" , table7.getId());

        table7.setId(id);
        table7 = table7Service.update(table7);
        LOGGER.debug("Table7 details with id: {}" , table7);

        return table7;
    }

    @ApiOperation(value = "Deletes the Table7 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable7(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table7 with id: {}" , id);

        Table7 deletedTable7 = table7Service.delete(id);

        return deletedTable7 != null;
    }

    /**
     * @deprecated Use {@link #findTable7s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table7 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table7> searchTable7sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table7s list");
        return table7Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table7 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table7> findTable7s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table7s list");
        return table7Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table7 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table7> filterTable7s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table7s list");
        return table7Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable7s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table7Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table7 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable7s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table7s");
		return table7Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable7AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table7Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table7Service instance
	 */
	protected void setTable7Service(Table7Service service) {
		this.table7Service = service;
	}

}

