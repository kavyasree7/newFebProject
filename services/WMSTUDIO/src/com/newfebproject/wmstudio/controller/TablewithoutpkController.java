/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.Tablewithoutpk;
import com.newfebproject.wmstudio.TablewithoutpkId;
import com.newfebproject.wmstudio.service.TablewithoutpkService;


/**
 * Controller object for domain model class Tablewithoutpk.
 * @see Tablewithoutpk
 */
@RestController("WMSTUDIO.TablewithoutpkController")
@Api(value = "TablewithoutpkController", description = "Exposes APIs to work with Tablewithoutpk resource.")
@RequestMapping("/WMSTUDIO/Tablewithoutpk")
public class TablewithoutpkController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TablewithoutpkController.class);

    @Autowired
	@Qualifier("WMSTUDIO.TablewithoutpkService")
	private TablewithoutpkService tablewithoutpkService;

	@ApiOperation(value = "Creates a new Tablewithoutpk instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Tablewithoutpk createTablewithoutpk(@RequestBody Tablewithoutpk tablewithoutpk) {
		LOGGER.debug("Create Tablewithoutpk with information: {}" , tablewithoutpk);

		tablewithoutpk = tablewithoutpkService.create(tablewithoutpk);
		LOGGER.debug("Created Tablewithoutpk with information: {}" , tablewithoutpk);

	    return tablewithoutpk;
	}

    @ApiOperation(value = "Returns the Tablewithoutpk instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tablewithoutpk getTablewithoutpk(@RequestParam("idColumn") String idColumn,@RequestParam("pkColumn") String pkColumn,@RequestParam("stringColumn") String stringColumn,@RequestParam("uniqueColumn") String uniqueColumn,@RequestParam("notNullColumn") String notNullColumn,@RequestParam("defaultValueColumn") String defaultValueColumn) throws EntityNotFoundException {

        TablewithoutpkId tablewithoutpkId = new TablewithoutpkId();
        tablewithoutpkId.setIdColumn(idColumn);
        tablewithoutpkId.setPkColumn(pkColumn);
        tablewithoutpkId.setStringColumn(stringColumn);
        tablewithoutpkId.setUniqueColumn(uniqueColumn);
        tablewithoutpkId.setNotNullColumn(notNullColumn);
        tablewithoutpkId.setDefaultValueColumn(defaultValueColumn);

        LOGGER.debug("Getting Tablewithoutpk with id: {}" , tablewithoutpkId);
        Tablewithoutpk tablewithoutpk = tablewithoutpkService.getById(tablewithoutpkId);
        LOGGER.debug("Tablewithoutpk details with id: {}" , tablewithoutpk);

        return tablewithoutpk;
    }



    @ApiOperation(value = "Updates the Tablewithoutpk instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tablewithoutpk editTablewithoutpk(@RequestParam("idColumn") String idColumn,@RequestParam("pkColumn") String pkColumn,@RequestParam("stringColumn") String stringColumn,@RequestParam("uniqueColumn") String uniqueColumn,@RequestParam("notNullColumn") String notNullColumn,@RequestParam("defaultValueColumn") String defaultValueColumn, @RequestBody Tablewithoutpk tablewithoutpk) throws EntityNotFoundException {

        tablewithoutpk.setIdColumn(idColumn);
        tablewithoutpk.setPkColumn(pkColumn);
        tablewithoutpk.setStringColumn(stringColumn);
        tablewithoutpk.setUniqueColumn(uniqueColumn);
        tablewithoutpk.setNotNullColumn(notNullColumn);
        tablewithoutpk.setDefaultValueColumn(defaultValueColumn);

        LOGGER.debug("Tablewithoutpk details with id is updated with: {}" , tablewithoutpk);

        return tablewithoutpkService.update(tablewithoutpk);
    }


    @ApiOperation(value = "Deletes the Tablewithoutpk instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTablewithoutpk(@RequestParam("idColumn") String idColumn,@RequestParam("pkColumn") String pkColumn,@RequestParam("stringColumn") String stringColumn,@RequestParam("uniqueColumn") String uniqueColumn,@RequestParam("notNullColumn") String notNullColumn,@RequestParam("defaultValueColumn") String defaultValueColumn) throws EntityNotFoundException {

        TablewithoutpkId tablewithoutpkId = new TablewithoutpkId();
        tablewithoutpkId.setIdColumn(idColumn);
        tablewithoutpkId.setPkColumn(pkColumn);
        tablewithoutpkId.setStringColumn(stringColumn);
        tablewithoutpkId.setUniqueColumn(uniqueColumn);
        tablewithoutpkId.setNotNullColumn(notNullColumn);
        tablewithoutpkId.setDefaultValueColumn(defaultValueColumn);

        LOGGER.debug("Deleting Tablewithoutpk with id: {}" , tablewithoutpkId);
        Tablewithoutpk tablewithoutpk = tablewithoutpkService.delete(tablewithoutpkId);

        return tablewithoutpk != null;
    }


    @RequestMapping(value = "/uniqueColumn/{uniqueColumn}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Tablewithoutpk with given unique key values.")
    public Tablewithoutpk getByUniqueColumn(@PathVariable("uniqueColumn") String uniqueColumn) {
        LOGGER.debug("Getting Tablewithoutpk with uniques key UniqueColumn");
        return tablewithoutpkService.getByUniqueColumn(uniqueColumn);
    }

    /**
     * @deprecated Use {@link #findTablewithoutpks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Tablewithoutpk instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tablewithoutpk> searchTablewithoutpksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Tablewithoutpks list");
        return tablewithoutpkService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tablewithoutpk instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tablewithoutpk> findTablewithoutpks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Tablewithoutpks list");
        return tablewithoutpkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tablewithoutpk instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tablewithoutpk> filterTablewithoutpks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Tablewithoutpks list");
        return tablewithoutpkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTablewithoutpks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tablewithoutpkService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Tablewithoutpk instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTablewithoutpks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Tablewithoutpks");
		return tablewithoutpkService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTablewithoutpkAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tablewithoutpkService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TablewithoutpkService instance
	 */
	protected void setTablewithoutpkService(TablewithoutpkService service) {
		this.tablewithoutpkService = service;
	}

}

