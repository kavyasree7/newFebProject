/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.OtherTypes;
import com.newfebproject.wmstudio.service.OtherTypesService;


/**
 * Controller object for domain model class OtherTypes.
 * @see OtherTypes
 */
@RestController("WMSTUDIO.OtherTypesController")
@Api(value = "OtherTypesController", description = "Exposes APIs to work with OtherTypes resource.")
@RequestMapping("/WMSTUDIO/OtherTypes")
public class OtherTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OtherTypesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.OtherTypesService")
	private OtherTypesService otherTypesService;

	@ApiOperation(value = "Creates a new OtherTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public OtherTypes createOtherTypes(@RequestBody OtherTypes otherTypes) {
		LOGGER.debug("Create OtherTypes with information: {}" , otherTypes);

		otherTypes = otherTypesService.create(otherTypes);
		LOGGER.debug("Created OtherTypes with information: {}" , otherTypes);

	    return otherTypes;
	}


    @ApiOperation(value = "Returns the OtherTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OtherTypes getOtherTypes(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting OtherTypes with id: {}" , id);

        OtherTypes foundOtherTypes = otherTypesService.getById(id);
        LOGGER.debug("OtherTypes details with id: {}" , foundOtherTypes);

        return foundOtherTypes;
    }

    @ApiOperation(value = "Updates the OtherTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OtherTypes editOtherTypes(@PathVariable("id") BigInteger id, @RequestBody OtherTypes otherTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing OtherTypes with id: {}" , otherTypes.getOthertypeid());

        otherTypes.setOthertypeid(id);
        otherTypes = otherTypesService.update(otherTypes);
        LOGGER.debug("OtherTypes details with id: {}" , otherTypes);

        return otherTypes;
    }

    @ApiOperation(value = "Deletes the OtherTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOtherTypes(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting OtherTypes with id: {}" , id);

        OtherTypes deletedOtherTypes = otherTypesService.delete(id);

        return deletedOtherTypes != null;
    }

    @RequestMapping(value = "/column4/{column4}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching OtherTypes with given unique key values.")
    public OtherTypes getByColumn4(@PathVariable("column4") String column4) {
        LOGGER.debug("Getting OtherTypes with uniques key Column4");
        return otherTypesService.getByColumn4(column4);
    }

    @RequestMapping(value = "/column5-column6", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching OtherTypes with given unique key values.")
    public OtherTypes getByColumn5AndColumn6(@RequestParam("column5") String column5, @RequestParam("column6") String column6) {
        LOGGER.debug("Getting OtherTypes with uniques key Column5AndColumn6");
        return otherTypesService.getByColumn5AndColumn6(column5, column6);
    }

    @RequestMapping(value = "/column4-column5", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching OtherTypes with given unique key values.")
    public OtherTypes getByColumn4AndColumn5(@RequestParam("column4") String column4, @RequestParam("column5") String column5) {
        LOGGER.debug("Getting OtherTypes with uniques key Column4AndColumn5");
        return otherTypesService.getByColumn4AndColumn5(column4, column5);
    }

    /**
     * @deprecated Use {@link #findOtherTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OtherTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherTypes> searchOtherTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OtherTypes list");
        return otherTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OtherTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherTypes> findOtherTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OtherTypes list");
        return otherTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OtherTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherTypes> filterOtherTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OtherTypes list");
        return otherTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOtherTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return otherTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of OtherTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOtherTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OtherTypes");
		return otherTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOtherTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return otherTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OtherTypesService instance
	 */
	protected void setOtherTypesService(OtherTypesService service) {
		this.otherTypesService = service;
	}

}

