/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.CrossjoinView;
import com.newfebproject.wmstudio.CrossjoinViewId;
import com.newfebproject.wmstudio.service.CrossjoinViewService;


/**
 * Controller object for domain model class CrossjoinView.
 * @see CrossjoinView
 */
@RestController("WMSTUDIO.CrossjoinViewController")
@Api(value = "CrossjoinViewController", description = "Exposes APIs to work with CrossjoinView resource.")
@RequestMapping("/WMSTUDIO/CrossjoinView")
public class CrossjoinViewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CrossjoinViewController.class);

    @Autowired
	@Qualifier("WMSTUDIO.CrossjoinViewService")
	private CrossjoinViewService crossjoinViewService;

	@ApiOperation(value = "Creates a new CrossjoinView instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CrossjoinView createCrossjoinView(@RequestBody CrossjoinView crossjoinView) {
		LOGGER.debug("Create CrossjoinView with information: {}" , crossjoinView);

		crossjoinView = crossjoinViewService.create(crossjoinView);
		LOGGER.debug("Created CrossjoinView with information: {}" , crossjoinView);

	    return crossjoinView;
	}

    @ApiOperation(value = "Returns the CrossjoinView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CrossjoinView getCrossjoinView(@RequestParam("employee1Id") Integer employee1Id,@RequestParam("employee1Column2") String employee1Column2,@RequestParam("employee1Column3") String employee1Column3,@RequestParam("id") Integer id,@RequestParam("column2") String column2,@RequestParam("column3") String column3) throws EntityNotFoundException {

        CrossjoinViewId crossjoinviewId = new CrossjoinViewId();
        crossjoinviewId.setEmployee1Id(employee1Id);
        crossjoinviewId.setEmployee1Column2(employee1Column2);
        crossjoinviewId.setEmployee1Column3(employee1Column3);
        crossjoinviewId.setId(id);
        crossjoinviewId.setColumn2(column2);
        crossjoinviewId.setColumn3(column3);

        LOGGER.debug("Getting CrossjoinView with id: {}" , crossjoinviewId);
        CrossjoinView crossjoinView = crossjoinViewService.getById(crossjoinviewId);
        LOGGER.debug("CrossjoinView details with id: {}" , crossjoinView);

        return crossjoinView;
    }



    @ApiOperation(value = "Updates the CrossjoinView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CrossjoinView editCrossjoinView(@RequestParam("employee1Id") Integer employee1Id,@RequestParam("employee1Column2") String employee1Column2,@RequestParam("employee1Column3") String employee1Column3,@RequestParam("id") Integer id,@RequestParam("column2") String column2,@RequestParam("column3") String column3, @RequestBody CrossjoinView crossjoinView) throws EntityNotFoundException {

        crossjoinView.setEmployee1Id(employee1Id);
        crossjoinView.setEmployee1Column2(employee1Column2);
        crossjoinView.setEmployee1Column3(employee1Column3);
        crossjoinView.setId(id);
        crossjoinView.setColumn2(column2);
        crossjoinView.setColumn3(column3);

        LOGGER.debug("CrossjoinView details with id is updated with: {}" , crossjoinView);

        return crossjoinViewService.update(crossjoinView);
    }


    @ApiOperation(value = "Deletes the CrossjoinView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCrossjoinView(@RequestParam("employee1Id") Integer employee1Id,@RequestParam("employee1Column2") String employee1Column2,@RequestParam("employee1Column3") String employee1Column3,@RequestParam("id") Integer id,@RequestParam("column2") String column2,@RequestParam("column3") String column3) throws EntityNotFoundException {

        CrossjoinViewId crossjoinviewId = new CrossjoinViewId();
        crossjoinviewId.setEmployee1Id(employee1Id);
        crossjoinviewId.setEmployee1Column2(employee1Column2);
        crossjoinviewId.setEmployee1Column3(employee1Column3);
        crossjoinviewId.setId(id);
        crossjoinviewId.setColumn2(column2);
        crossjoinviewId.setColumn3(column3);

        LOGGER.debug("Deleting CrossjoinView with id: {}" , crossjoinviewId);
        CrossjoinView crossjoinView = crossjoinViewService.delete(crossjoinviewId);

        return crossjoinView != null;
    }


    /**
     * @deprecated Use {@link #findCrossjoinViews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CrossjoinView instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CrossjoinView> searchCrossjoinViewsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CrossjoinViews list");
        return crossjoinViewService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CrossjoinView instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CrossjoinView> findCrossjoinViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CrossjoinViews list");
        return crossjoinViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CrossjoinView instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CrossjoinView> filterCrossjoinViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CrossjoinViews list");
        return crossjoinViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCrossjoinViews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return crossjoinViewService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CrossjoinView instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCrossjoinViews( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CrossjoinViews");
		return crossjoinViewService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCrossjoinViewAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return crossjoinViewService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CrossjoinViewService instance
	 */
	protected void setCrossjoinViewService(CrossjoinViewService service) {
		this.crossjoinViewService = service;
	}

}

