/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.UdItUfNoNullWithValues;
import com.newfebproject.wmstudio.service.UdItUfNoNullWithValuesService;


/**
 * Controller object for domain model class UdItUfNoNullWithValues.
 * @see UdItUfNoNullWithValues
 */
@RestController("WMSTUDIO.UdItUfNoNullWithValuesController")
@Api(value = "UdItUfNoNullWithValuesController", description = "Exposes APIs to work with UdItUfNoNullWithValues resource.")
@RequestMapping("/WMSTUDIO/UdItUfNoNullWithValues")
public class UdItUfNoNullWithValuesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UdItUfNoNullWithValuesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.UdItUfNoNullWithValuesService")
	private UdItUfNoNullWithValuesService udItUfNoNullWithValuesService;

	@ApiOperation(value = "Creates a new UdItUfNoNullWithValues instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UdItUfNoNullWithValues createUdItUfNoNullWithValues(@RequestBody UdItUfNoNullWithValues udItUfNoNullWithValues) {
		LOGGER.debug("Create UdItUfNoNullWithValues with information: {}" , udItUfNoNullWithValues);

		udItUfNoNullWithValues = udItUfNoNullWithValuesService.create(udItUfNoNullWithValues);
		LOGGER.debug("Created UdItUfNoNullWithValues with information: {}" , udItUfNoNullWithValues);

	    return udItUfNoNullWithValues;
	}

	@ApiOperation(value = "Creates a new UdItUfNoNullWithValues instance.This API should be used when the UdItUfNoNullWithValues instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdItUfNoNullWithValues createUdItUfNoNullWithValues(MultipartHttpServletRequest multipartHttpServletRequest) {
    	UdItUfNoNullWithValues udItUfNoNullWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdItUfNoNullWithValues.class, "WMSTUDIO"); 
        LOGGER.debug("Creating a new UdItUfNoNullWithValues with information: {}" , udItUfNoNullWithValues);
        return udItUfNoNullWithValuesService.create(udItUfNoNullWithValues);
    }


    @ApiOperation(value = "Returns the UdItUfNoNullWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdItUfNoNullWithValues getUdItUfNoNullWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UdItUfNoNullWithValues with id: {}" , id);

        UdItUfNoNullWithValues foundUdItUfNoNullWithValues = udItUfNoNullWithValuesService.getById(id);
        LOGGER.debug("UdItUfNoNullWithValues details with id: {}" , foundUdItUfNoNullWithValues);

        return foundUdItUfNoNullWithValues;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in UdItUfNoNullWithValues instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getUdItUfNoNullWithValuesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in UdItUfNoNullWithValues instance" , fieldName);

        if(!WMRuntimeUtils.isLob(UdItUfNoNullWithValues.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        UdItUfNoNullWithValues udItUfNoNullWithValues = udItUfNoNullWithValuesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(udItUfNoNullWithValues, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the UdItUfNoNullWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdItUfNoNullWithValues editUdItUfNoNullWithValues(@PathVariable("id") Integer id, @RequestBody UdItUfNoNullWithValues udItUfNoNullWithValues) throws EntityNotFoundException {
        LOGGER.debug("Editing UdItUfNoNullWithValues with id: {}" , udItUfNoNullWithValues.getId());

        udItUfNoNullWithValues.setId(id);
        udItUfNoNullWithValues = udItUfNoNullWithValuesService.update(udItUfNoNullWithValues);
        LOGGER.debug("UdItUfNoNullWithValues details with id: {}" , udItUfNoNullWithValues);

        return udItUfNoNullWithValues;
    }

    @ApiOperation(value = "Updates the UdItUfNoNullWithValues instance associated with the given id.This API should be used when UdItUfNoNullWithValues instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UdItUfNoNullWithValues editUdItUfNoNullWithValues(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        UdItUfNoNullWithValues newUdItUfNoNullWithValues = WMMultipartUtils.toObject(multipartHttpServletRequest, UdItUfNoNullWithValues.class, "WMSTUDIO");
        newUdItUfNoNullWithValues.setId(id);

        UdItUfNoNullWithValues oldUdItUfNoNullWithValues = udItUfNoNullWithValuesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldUdItUfNoNullWithValues, newUdItUfNoNullWithValues);
        LOGGER.debug("Updating UdItUfNoNullWithValues with information: {}" , newUdItUfNoNullWithValues);

        return udItUfNoNullWithValuesService.update(newUdItUfNoNullWithValues);
    }

    @ApiOperation(value = "Deletes the UdItUfNoNullWithValues instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUdItUfNoNullWithValues(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UdItUfNoNullWithValues with id: {}" , id);

        UdItUfNoNullWithValues deletedUdItUfNoNullWithValues = udItUfNoNullWithValuesService.delete(id);

        return deletedUdItUfNoNullWithValues != null;
    }

    /**
     * @deprecated Use {@link #findUdItUfNoNullWithValues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UdItUfNoNullWithValues instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdItUfNoNullWithValues> searchUdItUfNoNullWithValuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UdItUfNoNullWithValues list");
        return udItUfNoNullWithValuesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdItUfNoNullWithValues instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdItUfNoNullWithValues> findUdItUfNoNullWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdItUfNoNullWithValues list");
        return udItUfNoNullWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UdItUfNoNullWithValues instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UdItUfNoNullWithValues> filterUdItUfNoNullWithValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UdItUfNoNullWithValues list");
        return udItUfNoNullWithValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUdItUfNoNullWithValues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return udItUfNoNullWithValuesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UdItUfNoNullWithValues instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUdItUfNoNullWithValues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UdItUfNoNullWithValues");
		return udItUfNoNullWithValuesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUdItUfNoNullWithValuesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return udItUfNoNullWithValuesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UdItUfNoNullWithValuesService instance
	 */
	protected void setUdItUfNoNullWithValuesService(UdItUfNoNullWithValuesService service) {
		this.udItUfNoNullWithValuesService = service;
	}

}

