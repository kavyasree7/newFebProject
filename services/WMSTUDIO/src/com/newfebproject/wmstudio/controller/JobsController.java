/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.JobHistory;
import com.newfebproject.wmstudio.Jobs;
import com.newfebproject.wmstudio.service.JobsService;


/**
 * Controller object for domain model class Jobs.
 * @see Jobs
 */
@RestController("WMSTUDIO.JobsController")
@Api(value = "JobsController", description = "Exposes APIs to work with Jobs resource.")
@RequestMapping("/WMSTUDIO/Jobs")
public class JobsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobsController.class);

    @Autowired
	@Qualifier("WMSTUDIO.JobsService")
	private JobsService jobsService;

	@ApiOperation(value = "Creates a new Jobs instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Jobs createJobs(@RequestBody Jobs jobs) {
		LOGGER.debug("Create Jobs with information: {}" , jobs);

		jobs = jobsService.create(jobs);
		LOGGER.debug("Created Jobs with information: {}" , jobs);

	    return jobs;
	}


    @ApiOperation(value = "Returns the Jobs instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Jobs getJobs(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Jobs with id: {}" , id);

        Jobs foundJobs = jobsService.getById(id);
        LOGGER.debug("Jobs details with id: {}" , foundJobs);

        return foundJobs;
    }

    @ApiOperation(value = "Updates the Jobs instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Jobs editJobs(@PathVariable("id") String id, @RequestBody Jobs jobs) throws EntityNotFoundException {
        LOGGER.debug("Editing Jobs with id: {}" , jobs.getJobId());

        jobs.setJobId(id);
        jobs = jobsService.update(jobs);
        LOGGER.debug("Jobs details with id: {}" , jobs);

        return jobs;
    }

    @ApiOperation(value = "Deletes the Jobs instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteJobs(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Jobs with id: {}" , id);

        Jobs deletedJobs = jobsService.delete(id);

        return deletedJobs != null;
    }

    @RequestMapping(value = "/jobTitle/{jobTitle}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Jobs with given unique key values.")
    public Jobs getByJobTitle(@PathVariable("jobTitle") String jobTitle) {
        LOGGER.debug("Getting Jobs with uniques key JobTitle");
        return jobsService.getByJobTitle(jobTitle);
    }

    /**
     * @deprecated Use {@link #findJobs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Jobs instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Jobs> searchJobsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Jobs list");
        return jobsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Jobs instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Jobs> findJobs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Jobs list");
        return jobsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Jobs instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Jobs> filterJobs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Jobs list");
        return jobsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportJobs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return jobsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Jobs instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countJobs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Jobs");
		return jobsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getJobsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return jobsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/jobHistories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the jobHistories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<JobHistory> findAssociatedJobHistories(@PathVariable("id") String id, Pageable pageable) {

        LOGGER.debug("Fetching all associated jobHistories");
        return jobsService.findAssociatedJobHistories(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JobsService instance
	 */
	protected void setJobsService(JobsService service) {
		this.jobsService = service;
	}

}

