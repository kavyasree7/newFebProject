/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.BigintegerSequence;
import com.newfebproject.wmstudio.service.BigintegerSequenceService;


/**
 * Controller object for domain model class BigintegerSequence.
 * @see BigintegerSequence
 */
@RestController("WMSTUDIO.BigintegerSequenceController")
@Api(value = "BigintegerSequenceController", description = "Exposes APIs to work with BigintegerSequence resource.")
@RequestMapping("/WMSTUDIO/BigintegerSequence")
public class BigintegerSequenceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigintegerSequenceController.class);

    @Autowired
	@Qualifier("WMSTUDIO.BigintegerSequenceService")
	private BigintegerSequenceService bigintegerSequenceService;

	@ApiOperation(value = "Creates a new BigintegerSequence instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public BigintegerSequence createBigintegerSequence(@RequestBody BigintegerSequence bigintegerSequenceInstance) {
		LOGGER.debug("Create BigintegerSequence with information: {}" , bigintegerSequenceInstance);

		bigintegerSequenceInstance = bigintegerSequenceService.create(bigintegerSequenceInstance);
		LOGGER.debug("Created BigintegerSequence with information: {}" , bigintegerSequenceInstance);

	    return bigintegerSequenceInstance;
	}


    @ApiOperation(value = "Returns the BigintegerSequence instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BigintegerSequence getBigintegerSequence(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting BigintegerSequence with id: {}" , id);

        BigintegerSequence foundBigintegerSequence = bigintegerSequenceService.getById(id);
        LOGGER.debug("BigintegerSequence details with id: {}" , foundBigintegerSequence);

        return foundBigintegerSequence;
    }

    @ApiOperation(value = "Updates the BigintegerSequence instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BigintegerSequence editBigintegerSequence(@PathVariable("id") BigInteger id, @RequestBody BigintegerSequence bigintegerSequenceInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing BigintegerSequence with id: {}" , bigintegerSequenceInstance.getBigintegerSequence());

        bigintegerSequenceInstance.setBigintegerSequence(id);
        bigintegerSequenceInstance = bigintegerSequenceService.update(bigintegerSequenceInstance);
        LOGGER.debug("BigintegerSequence details with id: {}" , bigintegerSequenceInstance);

        return bigintegerSequenceInstance;
    }

    @ApiOperation(value = "Deletes the BigintegerSequence instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBigintegerSequence(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigintegerSequence with id: {}" , id);

        BigintegerSequence deletedBigintegerSequence = bigintegerSequenceService.delete(id);

        return deletedBigintegerSequence != null;
    }

    /**
     * @deprecated Use {@link #findBigintegerSequences(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BigintegerSequence instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BigintegerSequence> searchBigintegerSequencesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BigintegerSequences list");
        return bigintegerSequenceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BigintegerSequence instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BigintegerSequence> findBigintegerSequences(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BigintegerSequences list");
        return bigintegerSequenceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BigintegerSequence instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BigintegerSequence> filterBigintegerSequences(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BigintegerSequences list");
        return bigintegerSequenceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBigintegerSequences(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return bigintegerSequenceService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of BigintegerSequence instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBigintegerSequences( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BigintegerSequences");
		return bigintegerSequenceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBigintegerSequenceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return bigintegerSequenceService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BigintegerSequenceService instance
	 */
	protected void setBigintegerSequenceService(BigintegerSequenceService service) {
		this.bigintegerSequenceService = service;
	}

}

