/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.CompChild;
import com.newfebproject.wmstudio.Compparent;
import com.newfebproject.wmstudio.CompparentId;
import com.newfebproject.wmstudio.service.CompparentService;


/**
 * Controller object for domain model class Compparent.
 * @see Compparent
 */
@RestController("WMSTUDIO.CompparentController")
@Api(value = "CompparentController", description = "Exposes APIs to work with Compparent resource.")
@RequestMapping("/WMSTUDIO/Compparent")
public class CompparentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompparentController.class);

    @Autowired
	@Qualifier("WMSTUDIO.CompparentService")
	private CompparentService compparentService;

	@ApiOperation(value = "Creates a new Compparent instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Compparent createCompparent(@RequestBody Compparent compparent) {
		LOGGER.debug("Create Compparent with information: {}" , compparent);

		compparent = compparentService.create(compparent);
		LOGGER.debug("Created Compparent with information: {}" , compparent);

	    return compparent;
	}

	@ApiOperation(value = "Creates a new Compparent instance.This API should be used when the Compparent instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Compparent createCompparent(MultipartHttpServletRequest multipartHttpServletRequest) {
    	Compparent compparent = WMMultipartUtils.toObject(multipartHttpServletRequest, Compparent.class, "WMSTUDIO"); 
        LOGGER.debug("Creating a new Compparent with information: {}" , compparent);
        return compparentService.create(compparent);
    }

    @ApiOperation(value = "Returns the Compparent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Compparent getCompparent(@RequestParam("idColumn") Integer idColumn,@RequestParam("bigdecimalColumn") BigInteger bigdecimalColumn) throws EntityNotFoundException {

        CompparentId compparentId = new CompparentId();
        compparentId.setIdColumn(idColumn);
        compparentId.setBigdecimalColumn(bigdecimalColumn);

        LOGGER.debug("Getting Compparent with id: {}" , compparentId);
        Compparent compparent = compparentService.getById(compparentId);
        LOGGER.debug("Compparent details with id: {}" , compparent);

        return compparent;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Compparent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getCompparentBLOBContent(@RequestParam("idColumn") Integer idColumn,@RequestParam("bigdecimalColumn") BigInteger bigdecimalColumn, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws EntityNotFoundException {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Compparent instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Compparent.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        CompparentId compparentId = new CompparentId();
        compparentId.setIdColumn(idColumn);
        compparentId.setBigdecimalColumn(bigdecimalColumn);

        Compparent compparent = compparentService.getById(compparentId);
        WMMultipartUtils.buildHttpResponseForBlob(compparent, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the Compparent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Compparent editCompparent(@RequestParam("idColumn") Integer idColumn,@RequestParam("bigdecimalColumn") BigInteger bigdecimalColumn, @RequestBody Compparent compparent) throws EntityNotFoundException {

        compparent.setIdColumn(idColumn);
        compparent.setBigdecimalColumn(bigdecimalColumn);

        LOGGER.debug("Compparent details with id is updated with: {}" , compparent);

        return compparentService.update(compparent);
    }

    @ApiOperation(value = "Updates the Compparent instance associated with the given composite-id.This API should be used when Compparent instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Compparent editCompparent(@RequestParam("idColumn") Integer idColumn,@RequestParam("bigdecimalColumn") BigInteger bigdecimalColumn, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        return this.editCompparentAndMultiparts(idColumn, bigdecimalColumn, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the Compparent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Compparent editCompparentAndMultiparts(@RequestParam("idColumn") Integer idColumn,@RequestParam("bigdecimalColumn") BigInteger bigdecimalColumn, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException { 

        CompparentId compparentId = new CompparentId();
        compparentId.setIdColumn(idColumn);
        compparentId.setBigdecimalColumn(bigdecimalColumn);

        Compparent newCompparent = WMMultipartUtils.toObject(multipartHttpServletRequest, Compparent.class, "WMSTUDIO");
        Compparent oldCompparent = compparentService.getById(compparentId);

        WMMultipartUtils.updateLobsContent(oldCompparent, newCompparent);

        newCompparent.setIdColumn(idColumn);
        newCompparent.setBigdecimalColumn(bigdecimalColumn);

        LOGGER.debug("Compparent details with id is updated with: {}" , newCompparent);

        return compparentService.update(newCompparent);
    }


    @ApiOperation(value = "Deletes the Compparent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompparent(@RequestParam("idColumn") Integer idColumn,@RequestParam("bigdecimalColumn") BigInteger bigdecimalColumn) throws EntityNotFoundException {

        CompparentId compparentId = new CompparentId();
        compparentId.setIdColumn(idColumn);
        compparentId.setBigdecimalColumn(bigdecimalColumn);

        LOGGER.debug("Deleting Compparent with id: {}" , compparentId);
        Compparent compparent = compparentService.delete(compparentId);

        return compparent != null;
    }


    @RequestMapping(value = "/stringColumnm/{stringColumnm}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Compparent with given unique key values.")
    public Compparent getByStringColumnm(@PathVariable("stringColumnm") String stringColumnm) {
        LOGGER.debug("Getting Compparent with uniques key StringColumnm");
        return compparentService.getByStringColumnm(stringColumnm);
    }

    /**
     * @deprecated Use {@link #findCompparents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Compparent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Compparent> searchCompparentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Compparents list");
        return compparentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Compparent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Compparent> findCompparents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Compparents list");
        return compparentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Compparent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Compparent> filterCompparents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Compparents list");
        return compparentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompparents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compparentService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Compparent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompparents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Compparents");
		return compparentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompparentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compparentService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/compChilds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compChilds instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompChild> findAssociatedCompChilds(@RequestParam("idColumn") Integer idColumn,@RequestParam("bigdecimalColumn") BigInteger bigdecimalColumn, Pageable pageable) {

        LOGGER.debug("Fetching all associated compChilds");
        return compparentService.findAssociatedCompChilds(idColumn, bigdecimalColumn, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompparentService instance
	 */
	protected void setCompparentService(CompparentService service) {
		this.compparentService = service;
	}

}

