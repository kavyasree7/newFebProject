/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.EmployeeDepartmentView;
import com.newfebproject.wmstudio.EmployeeDepartmentViewId;
import com.newfebproject.wmstudio.service.EmployeeDepartmentViewService;


/**
 * Controller object for domain model class EmployeeDepartmentView.
 * @see EmployeeDepartmentView
 */
@RestController("WMSTUDIO.EmployeeDepartmentViewController")
@Api(value = "EmployeeDepartmentViewController", description = "Exposes APIs to work with EmployeeDepartmentView resource.")
@RequestMapping("/WMSTUDIO/EmployeeDepartmentView")
public class EmployeeDepartmentViewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeDepartmentViewController.class);

    @Autowired
	@Qualifier("WMSTUDIO.EmployeeDepartmentViewService")
	private EmployeeDepartmentViewService employeeDepartmentViewService;

	@ApiOperation(value = "Creates a new EmployeeDepartmentView instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EmployeeDepartmentView createEmployeeDepartmentView(@RequestBody EmployeeDepartmentView employeeDepartmentView) {
		LOGGER.debug("Create EmployeeDepartmentView with information: {}" , employeeDepartmentView);

		employeeDepartmentView = employeeDepartmentViewService.create(employeeDepartmentView);
		LOGGER.debug("Created EmployeeDepartmentView with information: {}" , employeeDepartmentView);

	    return employeeDepartmentView;
	}

    @ApiOperation(value = "Returns the EmployeeDepartmentView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeDepartmentView getEmployeeDepartmentView(@RequestParam("employeeId") Integer employeeId,@RequestParam("firstName") String firstName,@RequestParam("lastName") String lastName,@RequestParam("email") String email,@RequestParam("phoneNumber") String phoneNumber,@RequestParam("hireDate") LocalDateTime hireDate,@RequestParam("jobId") String jobId,@RequestParam("departmentId") Short departmentId,@RequestParam("departmentName") String departmentName) throws EntityNotFoundException {

        EmployeeDepartmentViewId employeedepartmentviewId = new EmployeeDepartmentViewId();
        employeedepartmentviewId.setEmployeeId(employeeId);
        employeedepartmentviewId.setFirstName(firstName);
        employeedepartmentviewId.setLastName(lastName);
        employeedepartmentviewId.setEmail(email);
        employeedepartmentviewId.setPhoneNumber(phoneNumber);
        employeedepartmentviewId.setHireDate(hireDate);
        employeedepartmentviewId.setJobId(jobId);
        employeedepartmentviewId.setDepartmentId(departmentId);
        employeedepartmentviewId.setDepartmentName(departmentName);

        LOGGER.debug("Getting EmployeeDepartmentView with id: {}" , employeedepartmentviewId);
        EmployeeDepartmentView employeeDepartmentView = employeeDepartmentViewService.getById(employeedepartmentviewId);
        LOGGER.debug("EmployeeDepartmentView details with id: {}" , employeeDepartmentView);

        return employeeDepartmentView;
    }



    @ApiOperation(value = "Updates the EmployeeDepartmentView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeDepartmentView editEmployeeDepartmentView(@RequestParam("employeeId") Integer employeeId,@RequestParam("firstName") String firstName,@RequestParam("lastName") String lastName,@RequestParam("email") String email,@RequestParam("phoneNumber") String phoneNumber,@RequestParam("hireDate") LocalDateTime hireDate,@RequestParam("jobId") String jobId,@RequestParam("departmentId") Short departmentId,@RequestParam("departmentName") String departmentName, @RequestBody EmployeeDepartmentView employeeDepartmentView) throws EntityNotFoundException {

        employeeDepartmentView.setEmployeeId(employeeId);
        employeeDepartmentView.setFirstName(firstName);
        employeeDepartmentView.setLastName(lastName);
        employeeDepartmentView.setEmail(email);
        employeeDepartmentView.setPhoneNumber(phoneNumber);
        employeeDepartmentView.setHireDate(hireDate);
        employeeDepartmentView.setJobId(jobId);
        employeeDepartmentView.setDepartmentId(departmentId);
        employeeDepartmentView.setDepartmentName(departmentName);

        LOGGER.debug("EmployeeDepartmentView details with id is updated with: {}" , employeeDepartmentView);

        return employeeDepartmentViewService.update(employeeDepartmentView);
    }


    @ApiOperation(value = "Deletes the EmployeeDepartmentView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployeeDepartmentView(@RequestParam("employeeId") Integer employeeId,@RequestParam("firstName") String firstName,@RequestParam("lastName") String lastName,@RequestParam("email") String email,@RequestParam("phoneNumber") String phoneNumber,@RequestParam("hireDate") LocalDateTime hireDate,@RequestParam("jobId") String jobId,@RequestParam("departmentId") Short departmentId,@RequestParam("departmentName") String departmentName) throws EntityNotFoundException {

        EmployeeDepartmentViewId employeedepartmentviewId = new EmployeeDepartmentViewId();
        employeedepartmentviewId.setEmployeeId(employeeId);
        employeedepartmentviewId.setFirstName(firstName);
        employeedepartmentviewId.setLastName(lastName);
        employeedepartmentviewId.setEmail(email);
        employeedepartmentviewId.setPhoneNumber(phoneNumber);
        employeedepartmentviewId.setHireDate(hireDate);
        employeedepartmentviewId.setJobId(jobId);
        employeedepartmentviewId.setDepartmentId(departmentId);
        employeedepartmentviewId.setDepartmentName(departmentName);

        LOGGER.debug("Deleting EmployeeDepartmentView with id: {}" , employeedepartmentviewId);
        EmployeeDepartmentView employeeDepartmentView = employeeDepartmentViewService.delete(employeedepartmentviewId);

        return employeeDepartmentView != null;
    }


    /**
     * @deprecated Use {@link #findEmployeeDepartmentViews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmployeeDepartmentView instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeDepartmentView> searchEmployeeDepartmentViewsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeDepartmentViews list");
        return employeeDepartmentViewService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeDepartmentView instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeDepartmentView> findEmployeeDepartmentViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeDepartmentViews list");
        return employeeDepartmentViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeDepartmentView instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeDepartmentView> filterEmployeeDepartmentViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeDepartmentViews list");
        return employeeDepartmentViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployeeDepartmentViews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeDepartmentViewService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EmployeeDepartmentView instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmployeeDepartmentViews( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeDepartmentViews");
		return employeeDepartmentViewService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmployeeDepartmentViewAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return employeeDepartmentViewService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeDepartmentViewService instance
	 */
	protected void setEmployeeDepartmentViewService(EmployeeDepartmentViewService service) {
		this.employeeDepartmentViewService = service;
	}

}

