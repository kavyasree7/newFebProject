/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.JoiningDetails;
import com.newfebproject.wmstudio.service.JoiningDetailsService;


/**
 * Controller object for domain model class JoiningDetails.
 * @see JoiningDetails
 */
@RestController("WMSTUDIO.JoiningDetailsController")
@Api(value = "JoiningDetailsController", description = "Exposes APIs to work with JoiningDetails resource.")
@RequestMapping("/WMSTUDIO/JoiningDetails")
public class JoiningDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JoiningDetailsController.class);

    @Autowired
	@Qualifier("WMSTUDIO.JoiningDetailsService")
	private JoiningDetailsService joiningDetailsService;

	@ApiOperation(value = "Creates a new JoiningDetails instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public JoiningDetails createJoiningDetails(@RequestBody JoiningDetails joiningDetails) {
		LOGGER.debug("Create JoiningDetails with information: {}" , joiningDetails);

		joiningDetails = joiningDetailsService.create(joiningDetails);
		LOGGER.debug("Created JoiningDetails with information: {}" , joiningDetails);

	    return joiningDetails;
	}


    @ApiOperation(value = "Returns the JoiningDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public JoiningDetails getJoiningDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting JoiningDetails with id: {}" , id);

        JoiningDetails foundJoiningDetails = joiningDetailsService.getById(id);
        LOGGER.debug("JoiningDetails details with id: {}" , foundJoiningDetails);

        return foundJoiningDetails;
    }

    @ApiOperation(value = "Updates the JoiningDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public JoiningDetails editJoiningDetails(@PathVariable("id") Integer id, @RequestBody JoiningDetails joiningDetails) throws EntityNotFoundException {
        LOGGER.debug("Editing JoiningDetails with id: {}" , joiningDetails.getUserId());

        joiningDetails.setUserId(id);
        joiningDetails = joiningDetailsService.update(joiningDetails);
        LOGGER.debug("JoiningDetails details with id: {}" , joiningDetails);

        return joiningDetails;
    }

    @ApiOperation(value = "Deletes the JoiningDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteJoiningDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting JoiningDetails with id: {}" , id);

        JoiningDetails deletedJoiningDetails = joiningDetailsService.delete(id);

        return deletedJoiningDetails != null;
    }

    @RequestMapping(value = "/userDetails-hike", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching JoiningDetails with given unique key values.")
    public JoiningDetails getByUserDetailsAndHike(@RequestParam("userDetails") Integer userDetails, @RequestParam("hike") Double hike) {
        LOGGER.debug("Getting JoiningDetails with uniques key UserDetailsAndHike");
        return joiningDetailsService.getByUserDetailsAndHike(userDetails, hike);
    }

    /**
     * @deprecated Use {@link #findJoiningDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of JoiningDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<JoiningDetails> searchJoiningDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering JoiningDetails list");
        return joiningDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of JoiningDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<JoiningDetails> findJoiningDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering JoiningDetails list");
        return joiningDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of JoiningDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<JoiningDetails> filterJoiningDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering JoiningDetails list");
        return joiningDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportJoiningDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return joiningDetailsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of JoiningDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countJoiningDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting JoiningDetails");
		return joiningDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getJoiningDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return joiningDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JoiningDetailsService instance
	 */
	protected void setJoiningDetailsService(JoiningDetailsService service) {
		this.joiningDetailsService = service;
	}

}

