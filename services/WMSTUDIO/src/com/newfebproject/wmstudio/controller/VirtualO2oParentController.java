/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.VirtualO2oParent;
import com.newfebproject.wmstudio.VirtualO2oParentId;
import com.newfebproject.wmstudio.service.VirtualO2oParentService;


/**
 * Controller object for domain model class VirtualO2oParent.
 * @see VirtualO2oParent
 */
@RestController("WMSTUDIO.VirtualO2oParentController")
@Api(value = "VirtualO2oParentController", description = "Exposes APIs to work with VirtualO2oParent resource.")
@RequestMapping("/WMSTUDIO/VirtualO2oParent")
public class VirtualO2oParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualO2oParentController.class);

    @Autowired
	@Qualifier("WMSTUDIO.VirtualO2oParentService")
	private VirtualO2oParentService virtualO2oParentService;

	@ApiOperation(value = "Creates a new VirtualO2oParent instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public VirtualO2oParent createVirtualO2oParent(@RequestBody VirtualO2oParent virtualO2oParent) {
		LOGGER.debug("Create VirtualO2oParent with information: {}" , virtualO2oParent);

		virtualO2oParent = virtualO2oParentService.create(virtualO2oParent);
		LOGGER.debug("Created VirtualO2oParent with information: {}" , virtualO2oParent);

	    return virtualO2oParent;
	}

    @ApiOperation(value = "Returns the VirtualO2oParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualO2oParent getVirtualO2oParent(@RequestParam("id") BigInteger id,@RequestParam("string") String string,@RequestParam("bigdecimal") BigDecimal bigdecimal,@RequestParam("_desc") String _desc) throws EntityNotFoundException {

        VirtualO2oParentId virtualo2oparentId = new VirtualO2oParentId();
        virtualo2oparentId.setId(id);
        virtualo2oparentId.setString(string);
        virtualo2oparentId.setBigdecimal(bigdecimal);
        virtualo2oparentId.set_desc(_desc);

        LOGGER.debug("Getting VirtualO2oParent with id: {}" , virtualo2oparentId);
        VirtualO2oParent virtualO2oParent = virtualO2oParentService.getById(virtualo2oparentId);
        LOGGER.debug("VirtualO2oParent details with id: {}" , virtualO2oParent);

        return virtualO2oParent;
    }



    @ApiOperation(value = "Updates the VirtualO2oParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualO2oParent editVirtualO2oParent(@RequestParam("id") BigInteger id,@RequestParam("string") String string,@RequestParam("bigdecimal") BigDecimal bigdecimal,@RequestParam("_desc") String _desc, @RequestBody VirtualO2oParent virtualO2oParent) throws EntityNotFoundException {

        virtualO2oParent.setId(id);
        virtualO2oParent.setString(string);
        virtualO2oParent.setBigdecimal(bigdecimal);
        virtualO2oParent.set_desc(_desc);

        LOGGER.debug("VirtualO2oParent details with id is updated with: {}" , virtualO2oParent);

        return virtualO2oParentService.update(virtualO2oParent);
    }


    @ApiOperation(value = "Deletes the VirtualO2oParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualO2oParent(@RequestParam("id") BigInteger id,@RequestParam("string") String string,@RequestParam("bigdecimal") BigDecimal bigdecimal,@RequestParam("_desc") String _desc) throws EntityNotFoundException {

        VirtualO2oParentId virtualo2oparentId = new VirtualO2oParentId();
        virtualo2oparentId.setId(id);
        virtualo2oparentId.setString(string);
        virtualo2oparentId.setBigdecimal(bigdecimal);
        virtualo2oparentId.set_desc(_desc);

        LOGGER.debug("Deleting VirtualO2oParent with id: {}" , virtualo2oparentId);
        VirtualO2oParent virtualO2oParent = virtualO2oParentService.delete(virtualo2oparentId);

        return virtualO2oParent != null;
    }


    /**
     * @deprecated Use {@link #findVirtualO2oParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualO2oParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oParent> searchVirtualO2oParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualO2oParents list");
        return virtualO2oParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualO2oParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oParent> findVirtualO2oParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualO2oParents list");
        return virtualO2oParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualO2oParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oParent> filterVirtualO2oParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualO2oParents list");
        return virtualO2oParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualO2oParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualO2oParentService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of VirtualO2oParent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualO2oParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualO2oParents");
		return virtualO2oParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualO2oParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualO2oParentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualO2oParentService instance
	 */
	protected void setVirtualO2oParentService(VirtualO2oParentService service) {
		this.virtualO2oParentService = service;
	}

}

