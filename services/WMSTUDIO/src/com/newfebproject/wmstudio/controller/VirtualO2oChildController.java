/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.wmstudio.VirtualO2oChild;
import com.newfebproject.wmstudio.VirtualO2oChildId;
import com.newfebproject.wmstudio.service.VirtualO2oChildService;


/**
 * Controller object for domain model class VirtualO2oChild.
 * @see VirtualO2oChild
 */
@RestController("WMSTUDIO.VirtualO2oChildController")
@Api(value = "VirtualO2oChildController", description = "Exposes APIs to work with VirtualO2oChild resource.")
@RequestMapping("/WMSTUDIO/VirtualO2oChild")
public class VirtualO2oChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualO2oChildController.class);

    @Autowired
	@Qualifier("WMSTUDIO.VirtualO2oChildService")
	private VirtualO2oChildService virtualO2oChildService;

	@ApiOperation(value = "Creates a new VirtualO2oChild instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public VirtualO2oChild createVirtualO2oChild(@RequestBody VirtualO2oChild virtualO2oChild) {
		LOGGER.debug("Create VirtualO2oChild with information: {}" , virtualO2oChild);

		virtualO2oChild = virtualO2oChildService.create(virtualO2oChild);
		LOGGER.debug("Created VirtualO2oChild with information: {}" , virtualO2oChild);

	    return virtualO2oChild;
	}

    @ApiOperation(value = "Returns the VirtualO2oChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualO2oChild getVirtualO2oChild(@RequestParam("id") BigInteger id,@RequestParam("stringColumn") String stringColumn,@RequestParam("bigdecimalColumn") BigDecimal bigdecimalColumn,@RequestParam("descColumn") String descColumn) throws EntityNotFoundException {

        VirtualO2oChildId virtualo2ochildId = new VirtualO2oChildId();
        virtualo2ochildId.setId(id);
        virtualo2ochildId.setStringColumn(stringColumn);
        virtualo2ochildId.setBigdecimalColumn(bigdecimalColumn);
        virtualo2ochildId.setDescColumn(descColumn);

        LOGGER.debug("Getting VirtualO2oChild with id: {}" , virtualo2ochildId);
        VirtualO2oChild virtualO2oChild = virtualO2oChildService.getById(virtualo2ochildId);
        LOGGER.debug("VirtualO2oChild details with id: {}" , virtualO2oChild);

        return virtualO2oChild;
    }



    @ApiOperation(value = "Updates the VirtualO2oChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualO2oChild editVirtualO2oChild(@RequestParam("id") BigInteger id,@RequestParam("stringColumn") String stringColumn,@RequestParam("bigdecimalColumn") BigDecimal bigdecimalColumn,@RequestParam("descColumn") String descColumn, @RequestBody VirtualO2oChild virtualO2oChild) throws EntityNotFoundException {

        virtualO2oChild.setId(id);
        virtualO2oChild.setStringColumn(stringColumn);
        virtualO2oChild.setBigdecimalColumn(bigdecimalColumn);
        virtualO2oChild.setDescColumn(descColumn);

        LOGGER.debug("VirtualO2oChild details with id is updated with: {}" , virtualO2oChild);

        return virtualO2oChildService.update(virtualO2oChild);
    }


    @ApiOperation(value = "Deletes the VirtualO2oChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualO2oChild(@RequestParam("id") BigInteger id,@RequestParam("stringColumn") String stringColumn,@RequestParam("bigdecimalColumn") BigDecimal bigdecimalColumn,@RequestParam("descColumn") String descColumn) throws EntityNotFoundException {

        VirtualO2oChildId virtualo2ochildId = new VirtualO2oChildId();
        virtualo2ochildId.setId(id);
        virtualo2ochildId.setStringColumn(stringColumn);
        virtualo2ochildId.setBigdecimalColumn(bigdecimalColumn);
        virtualo2ochildId.setDescColumn(descColumn);

        LOGGER.debug("Deleting VirtualO2oChild with id: {}" , virtualo2ochildId);
        VirtualO2oChild virtualO2oChild = virtualO2oChildService.delete(virtualo2ochildId);

        return virtualO2oChild != null;
    }


    /**
     * @deprecated Use {@link #findVirtualO2oChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualO2oChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oChild> searchVirtualO2oChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualO2oChilds list");
        return virtualO2oChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualO2oChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oChild> findVirtualO2oChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualO2oChilds list");
        return virtualO2oChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualO2oChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualO2oChild> filterVirtualO2oChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualO2oChilds list");
        return virtualO2oChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualO2oChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualO2oChildService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of VirtualO2oChild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualO2oChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualO2oChilds");
		return virtualO2oChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualO2oChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualO2oChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualO2oChildService instance
	 */
	protected void setVirtualO2oChildService(VirtualO2oChildService service) {
		this.virtualO2oChildService = service;
	}

}

