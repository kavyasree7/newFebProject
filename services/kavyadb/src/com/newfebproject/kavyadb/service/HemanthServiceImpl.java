/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.kavyadb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.kavyadb.Hemanth;


/**
 * ServiceImpl object for domain model class Hemanth.
 *
 * @see Hemanth
 */
@Service("kavyadb.HemanthService")
public class HemanthServiceImpl implements HemanthService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HemanthServiceImpl.class);


    @Autowired
    @Qualifier("kavyadb.HemanthDao")
    private WMGenericDao<Hemanth, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Hemanth, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "kavyadbTransactionManager")
    @Override
	public Hemanth create(Hemanth hemanth) {
        LOGGER.debug("Creating a new Hemanth with information: {}", hemanth);
        Hemanth hemanthCreated = this.wmGenericDao.create(hemanth);
        return hemanthCreated;
    }

	@Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public Hemanth getById(Integer hemanthId) throws EntityNotFoundException {
        LOGGER.debug("Finding Hemanth by id: {}", hemanthId);
        Hemanth hemanth = this.wmGenericDao.findById(hemanthId);
        if (hemanth == null){
            LOGGER.debug("No Hemanth found with id: {}", hemanthId);
            throw new EntityNotFoundException(String.valueOf(hemanthId));
        }
        return hemanth;
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public Hemanth findById(Integer hemanthId) {
        LOGGER.debug("Finding Hemanth by id: {}", hemanthId);
        return this.wmGenericDao.findById(hemanthId);
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
    @Override
    public Hemanth getByUniqueKeyId(Integer id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding Hemanth by unique keys: {}", uniqueKeyIdMap);
        Hemanth hemanth = this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);

        if (hemanth == null){
            LOGGER.debug("No Hemanth found with given unique key values: {}", uniqueKeyIdMap);
            throw new EntityNotFoundException(String.valueOf(uniqueKeyIdMap));
        }

        return hemanth;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "kavyadbTransactionManager")
	@Override
	public Hemanth update(Hemanth hemanth) throws EntityNotFoundException {
        LOGGER.debug("Updating Hemanth with information: {}", hemanth);
        this.wmGenericDao.update(hemanth);

        Integer hemanthId = hemanth.getId();

        return this.wmGenericDao.findById(hemanthId);
    }

    @Transactional(value = "kavyadbTransactionManager")
	@Override
	public Hemanth delete(Integer hemanthId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Hemanth with id: {}", hemanthId);
        Hemanth deleted = this.wmGenericDao.findById(hemanthId);
        if (deleted == null) {
            LOGGER.debug("No Hemanth found with id: {}", hemanthId);
            throw new EntityNotFoundException(String.valueOf(hemanthId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public Page<Hemanth> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Hemanths");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
    @Override
    public Page<Hemanth> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Hemanths");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service kavyadb for table Hemanth to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

