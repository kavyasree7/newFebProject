/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.kavyadb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.kavyadb.Table4;


/**
 * ServiceImpl object for domain model class Table4.
 *
 * @see Table4
 */
@Service("kavyadb.Table4Service")
public class Table4ServiceImpl implements Table4Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table4ServiceImpl.class);


    @Autowired
    @Qualifier("kavyadb.Table4Dao")
    private WMGenericDao<Table4, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table4, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "kavyadbTransactionManager")
    @Override
	public Table4 create(Table4 table4) {
        LOGGER.debug("Creating a new Table4 with information: {}", table4);
        Table4 table4Created = this.wmGenericDao.create(table4);
        return table4Created;
    }

	@Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public Table4 getById(Integer table4Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table4 by id: {}", table4Id);
        Table4 table4 = this.wmGenericDao.findById(table4Id);
        if (table4 == null){
            LOGGER.debug("No Table4 found with id: {}", table4Id);
            throw new EntityNotFoundException(String.valueOf(table4Id));
        }
        return table4;
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public Table4 findById(Integer table4Id) {
        LOGGER.debug("Finding Table4 by id: {}", table4Id);
        return this.wmGenericDao.findById(table4Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "kavyadbTransactionManager")
	@Override
	public Table4 update(Table4 table4) throws EntityNotFoundException {
        LOGGER.debug("Updating Table4 with information: {}", table4);
        this.wmGenericDao.update(table4);

        Integer table4Id = table4.getId();

        return this.wmGenericDao.findById(table4Id);
    }

    @Transactional(value = "kavyadbTransactionManager")
	@Override
	public Table4 delete(Integer table4Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table4 with id: {}", table4Id);
        Table4 deleted = this.wmGenericDao.findById(table4Id);
        if (deleted == null) {
            LOGGER.debug("No Table4 found with id: {}", table4Id);
            throw new EntityNotFoundException(String.valueOf(table4Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public Page<Table4> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table4s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
    @Override
    public Page<Table4> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table4s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service kavyadb for table Table4 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "kavyadbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

