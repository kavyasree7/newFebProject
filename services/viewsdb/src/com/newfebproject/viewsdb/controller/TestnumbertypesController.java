/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Testnumbertypes;
import com.newfebproject.viewsdb.TestnumbertypesId;
import com.newfebproject.viewsdb.service.TestnumbertypesService;


/**
 * Controller object for domain model class Testnumbertypes.
 * @see Testnumbertypes
 */
@RestController("viewsdb.TestnumbertypesController")
@Api(value = "TestnumbertypesController", description = "Exposes APIs to work with Testnumbertypes resource.")
@RequestMapping("/viewsdb/Testnumbertypes")
public class TestnumbertypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestnumbertypesController.class);

    @Autowired
	@Qualifier("viewsdb.TestnumbertypesService")
	private TestnumbertypesService testnumbertypesService;

	@ApiOperation(value = "Creates a new Testnumbertypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Testnumbertypes createTestnumbertypes(@RequestBody Testnumbertypes testnumbertypes) {
		LOGGER.debug("Create Testnumbertypes with information: {}" , testnumbertypes);

		testnumbertypes = testnumbertypesService.create(testnumbertypes);
		LOGGER.debug("Created Testnumbertypes with information: {}" , testnumbertypes);

	    return testnumbertypes;
	}

    @ApiOperation(value = "Returns the Testnumbertypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testnumbertypes getTestnumbertypes(@RequestParam("deccol") BigDecimal deccol,@RequestParam("numericcol") BigDecimal numericcol,@RequestParam("floatcol") Double floatcol,@RequestParam("realcol") Float realcol,@RequestParam("doupcol") Double doupcol) throws EntityNotFoundException {

        TestnumbertypesId testnumbertypesId = new TestnumbertypesId();
        testnumbertypesId.setDeccol(deccol);
        testnumbertypesId.setNumericcol(numericcol);
        testnumbertypesId.setFloatcol(floatcol);
        testnumbertypesId.setRealcol(realcol);
        testnumbertypesId.setDoupcol(doupcol);

        LOGGER.debug("Getting Testnumbertypes with id: {}" , testnumbertypesId);
        Testnumbertypes testnumbertypes = testnumbertypesService.getById(testnumbertypesId);
        LOGGER.debug("Testnumbertypes details with id: {}" , testnumbertypes);

        return testnumbertypes;
    }



    @ApiOperation(value = "Updates the Testnumbertypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Testnumbertypes editTestnumbertypes(@RequestParam("deccol") BigDecimal deccol,@RequestParam("numericcol") BigDecimal numericcol,@RequestParam("floatcol") Double floatcol,@RequestParam("realcol") Float realcol,@RequestParam("doupcol") Double doupcol, @RequestBody Testnumbertypes testnumbertypes) throws EntityNotFoundException {

        testnumbertypes.setDeccol(deccol);
        testnumbertypes.setNumericcol(numericcol);
        testnumbertypes.setFloatcol(floatcol);
        testnumbertypes.setRealcol(realcol);
        testnumbertypes.setDoupcol(doupcol);

        LOGGER.debug("Testnumbertypes details with id is updated with: {}" , testnumbertypes);

        return testnumbertypesService.update(testnumbertypes);
    }


    @ApiOperation(value = "Deletes the Testnumbertypes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestnumbertypes(@RequestParam("deccol") BigDecimal deccol,@RequestParam("numericcol") BigDecimal numericcol,@RequestParam("floatcol") Double floatcol,@RequestParam("realcol") Float realcol,@RequestParam("doupcol") Double doupcol) throws EntityNotFoundException {

        TestnumbertypesId testnumbertypesId = new TestnumbertypesId();
        testnumbertypesId.setDeccol(deccol);
        testnumbertypesId.setNumericcol(numericcol);
        testnumbertypesId.setFloatcol(floatcol);
        testnumbertypesId.setRealcol(realcol);
        testnumbertypesId.setDoupcol(doupcol);

        LOGGER.debug("Deleting Testnumbertypes with id: {}" , testnumbertypesId);
        Testnumbertypes testnumbertypes = testnumbertypesService.delete(testnumbertypesId);

        return testnumbertypes != null;
    }


    /**
     * @deprecated Use {@link #findTestnumbertypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Testnumbertypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testnumbertypes> searchTestnumbertypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Testnumbertypes list");
        return testnumbertypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testnumbertypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testnumbertypes> findTestnumbertypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testnumbertypes list");
        return testnumbertypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Testnumbertypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Testnumbertypes> filterTestnumbertypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Testnumbertypes list");
        return testnumbertypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestnumbertypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testnumbertypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Testnumbertypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestnumbertypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Testnumbertypes");
		return testnumbertypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestnumbertypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testnumbertypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestnumbertypesService instance
	 */
	protected void setTestnumbertypesService(TestnumbertypesService service) {
		this.testnumbertypesService = service;
	}

}

