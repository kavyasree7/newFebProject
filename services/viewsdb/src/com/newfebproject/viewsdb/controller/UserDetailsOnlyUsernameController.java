/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.UserDetailsOnlyUsername;
import com.newfebproject.viewsdb.service.UserDetailsOnlyUsernameService;


/**
 * Controller object for domain model class UserDetailsOnlyUsername.
 * @see UserDetailsOnlyUsername
 */
@RestController("viewsdb.UserDetailsOnlyUsernameController")
@Api(value = "UserDetailsOnlyUsernameController", description = "Exposes APIs to work with UserDetailsOnlyUsername resource.")
@RequestMapping("/viewsdb/UserDetailsOnlyUsername")
public class UserDetailsOnlyUsernameController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailsOnlyUsernameController.class);

    @Autowired
	@Qualifier("viewsdb.UserDetailsOnlyUsernameService")
	private UserDetailsOnlyUsernameService userDetailsOnlyUsernameService;

	@ApiOperation(value = "Creates a new UserDetailsOnlyUsername instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UserDetailsOnlyUsername createUserDetailsOnlyUsername(@RequestBody UserDetailsOnlyUsername userDetailsOnlyUsername) {
		LOGGER.debug("Create UserDetailsOnlyUsername with information: {}" , userDetailsOnlyUsername);

		userDetailsOnlyUsername = userDetailsOnlyUsernameService.create(userDetailsOnlyUsername);
		LOGGER.debug("Created UserDetailsOnlyUsername with information: {}" , userDetailsOnlyUsername);

	    return userDetailsOnlyUsername;
	}

	@ApiOperation(value = "Creates a new UserDetailsOnlyUsername instance.This API should be used when the UserDetailsOnlyUsername instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetailsOnlyUsername createUserDetailsOnlyUsername(MultipartHttpServletRequest multipartHttpServletRequest) {
    	UserDetailsOnlyUsername userDetailsOnlyUsername = WMMultipartUtils.toObject(multipartHttpServletRequest, UserDetailsOnlyUsername.class, "viewsdb"); 
        LOGGER.debug("Creating a new UserDetailsOnlyUsername with information: {}" , userDetailsOnlyUsername);
        return userDetailsOnlyUsernameService.create(userDetailsOnlyUsername);
    }


    @ApiOperation(value = "Returns the UserDetailsOnlyUsername instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetailsOnlyUsername getUserDetailsOnlyUsername(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting UserDetailsOnlyUsername with id: {}" , id);

        UserDetailsOnlyUsername foundUserDetailsOnlyUsername = userDetailsOnlyUsernameService.getById(id);
        LOGGER.debug("UserDetailsOnlyUsername details with id: {}" , foundUserDetailsOnlyUsername);

        return foundUserDetailsOnlyUsername;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in UserDetailsOnlyUsername instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getUserDetailsOnlyUsernameBLOBContent(@PathVariable("id") String id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in UserDetailsOnlyUsername instance" , fieldName);

        if(!WMRuntimeUtils.isLob(UserDetailsOnlyUsername.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        UserDetailsOnlyUsername userDetailsOnlyUsername = userDetailsOnlyUsernameService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(userDetailsOnlyUsername, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the UserDetailsOnlyUsername instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetailsOnlyUsername editUserDetailsOnlyUsername(@PathVariable("id") String id, @RequestBody UserDetailsOnlyUsername userDetailsOnlyUsername) throws EntityNotFoundException {
        LOGGER.debug("Editing UserDetailsOnlyUsername with id: {}" , userDetailsOnlyUsername.getUserDetaId());

        userDetailsOnlyUsername.setUserDetaId(id);
        userDetailsOnlyUsername = userDetailsOnlyUsernameService.update(userDetailsOnlyUsername);
        LOGGER.debug("UserDetailsOnlyUsername details with id: {}" , userDetailsOnlyUsername);

        return userDetailsOnlyUsername;
    }

    @ApiOperation(value = "Updates the UserDetailsOnlyUsername instance associated with the given id.This API should be used when UserDetailsOnlyUsername instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserDetailsOnlyUsername editUserDetailsOnlyUsername(@PathVariable("id") String id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        UserDetailsOnlyUsername newUserDetailsOnlyUsername = WMMultipartUtils.toObject(multipartHttpServletRequest, UserDetailsOnlyUsername.class, "viewsdb");
        newUserDetailsOnlyUsername.setUserDetaId(id);

        UserDetailsOnlyUsername oldUserDetailsOnlyUsername = userDetailsOnlyUsernameService.getById(id);
        WMMultipartUtils.updateLobsContent(oldUserDetailsOnlyUsername, newUserDetailsOnlyUsername);
        LOGGER.debug("Updating UserDetailsOnlyUsername with information: {}" , newUserDetailsOnlyUsername);

        return userDetailsOnlyUsernameService.update(newUserDetailsOnlyUsername);
    }

    @ApiOperation(value = "Deletes the UserDetailsOnlyUsername instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserDetailsOnlyUsername(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserDetailsOnlyUsername with id: {}" , id);

        UserDetailsOnlyUsername deletedUserDetailsOnlyUsername = userDetailsOnlyUsernameService.delete(id);

        return deletedUserDetailsOnlyUsername != null;
    }

    /**
     * @deprecated Use {@link #findUserDetailsOnlyUsernames(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserDetailsOnlyUsername instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserDetailsOnlyUsername> searchUserDetailsOnlyUsernamesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserDetailsOnlyUsernames list");
        return userDetailsOnlyUsernameService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserDetailsOnlyUsername instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserDetailsOnlyUsername> findUserDetailsOnlyUsernames(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserDetailsOnlyUsernames list");
        return userDetailsOnlyUsernameService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserDetailsOnlyUsername instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserDetailsOnlyUsername> filterUserDetailsOnlyUsernames(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserDetailsOnlyUsernames list");
        return userDetailsOnlyUsernameService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserDetailsOnlyUsernames(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userDetailsOnlyUsernameService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UserDetailsOnlyUsername instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserDetailsOnlyUsernames( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserDetailsOnlyUsernames");
		return userDetailsOnlyUsernameService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserDetailsOnlyUsernameAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userDetailsOnlyUsernameService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserDetailsOnlyUsernameService instance
	 */
	protected void setUserDetailsOnlyUsernameService(UserDetailsOnlyUsernameService service) {
		this.userDetailsOnlyUsernameService = service;
	}

}

