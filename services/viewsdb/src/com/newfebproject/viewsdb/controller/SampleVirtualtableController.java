/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.SampleVirtualtable;
import com.newfebproject.viewsdb.SampleVirtualtableId;
import com.newfebproject.viewsdb.service.SampleVirtualtableService;


/**
 * Controller object for domain model class SampleVirtualtable.
 * @see SampleVirtualtable
 */
@RestController("viewsdb.SampleVirtualtableController")
@Api(value = "SampleVirtualtableController", description = "Exposes APIs to work with SampleVirtualtable resource.")
@RequestMapping("/viewsdb/SampleVirtualtable")
public class SampleVirtualtableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SampleVirtualtableController.class);

    @Autowired
	@Qualifier("viewsdb.SampleVirtualtableService")
	private SampleVirtualtableService sampleVirtualtableService;

	@ApiOperation(value = "Creates a new SampleVirtualtable instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public SampleVirtualtable createSampleVirtualtable(@RequestBody SampleVirtualtable sampleVirtualtable) {
		LOGGER.debug("Create SampleVirtualtable with information: {}" , sampleVirtualtable);

		sampleVirtualtable = sampleVirtualtableService.create(sampleVirtualtable);
		LOGGER.debug("Created SampleVirtualtable with information: {}" , sampleVirtualtable);

	    return sampleVirtualtable;
	}

    @ApiOperation(value = "Returns the SampleVirtualtable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SampleVirtualtable getSampleVirtualtable(@RequestParam("name") String name,@RequestParam("column") Integer column,@RequestParam("column4") String column4,@RequestParam("id") Integer id) throws EntityNotFoundException {

        SampleVirtualtableId samplevirtualtableId = new SampleVirtualtableId();
        samplevirtualtableId.setName(name);
        samplevirtualtableId.setColumn(column);
        samplevirtualtableId.setColumn4(column4);
        samplevirtualtableId.setId(id);

        LOGGER.debug("Getting SampleVirtualtable with id: {}" , samplevirtualtableId);
        SampleVirtualtable sampleVirtualtable = sampleVirtualtableService.getById(samplevirtualtableId);
        LOGGER.debug("SampleVirtualtable details with id: {}" , sampleVirtualtable);

        return sampleVirtualtable;
    }



    @ApiOperation(value = "Updates the SampleVirtualtable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SampleVirtualtable editSampleVirtualtable(@RequestParam("name") String name,@RequestParam("column") Integer column,@RequestParam("column4") String column4,@RequestParam("id") Integer id, @RequestBody SampleVirtualtable sampleVirtualtable) throws EntityNotFoundException {

        sampleVirtualtable.setName(name);
        sampleVirtualtable.setColumn(column);
        sampleVirtualtable.setColumn4(column4);
        sampleVirtualtable.setId(id);

        LOGGER.debug("SampleVirtualtable details with id is updated with: {}" , sampleVirtualtable);

        return sampleVirtualtableService.update(sampleVirtualtable);
    }


    @ApiOperation(value = "Deletes the SampleVirtualtable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSampleVirtualtable(@RequestParam("name") String name,@RequestParam("column") Integer column,@RequestParam("column4") String column4,@RequestParam("id") Integer id) throws EntityNotFoundException {

        SampleVirtualtableId samplevirtualtableId = new SampleVirtualtableId();
        samplevirtualtableId.setName(name);
        samplevirtualtableId.setColumn(column);
        samplevirtualtableId.setColumn4(column4);
        samplevirtualtableId.setId(id);

        LOGGER.debug("Deleting SampleVirtualtable with id: {}" , samplevirtualtableId);
        SampleVirtualtable sampleVirtualtable = sampleVirtualtableService.delete(samplevirtualtableId);

        return sampleVirtualtable != null;
    }


    /**
     * @deprecated Use {@link #findSampleVirtualtables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SampleVirtualtable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SampleVirtualtable> searchSampleVirtualtablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SampleVirtualtables list");
        return sampleVirtualtableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SampleVirtualtable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SampleVirtualtable> findSampleVirtualtables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SampleVirtualtables list");
        return sampleVirtualtableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SampleVirtualtable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SampleVirtualtable> filterSampleVirtualtables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SampleVirtualtables list");
        return sampleVirtualtableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSampleVirtualtables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sampleVirtualtableService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of SampleVirtualtable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSampleVirtualtables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SampleVirtualtables");
		return sampleVirtualtableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSampleVirtualtableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sampleVirtualtableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SampleVirtualtableService instance
	 */
	protected void setSampleVirtualtableService(SampleVirtualtableService service) {
		this.sampleVirtualtableService = service;
	}

}

