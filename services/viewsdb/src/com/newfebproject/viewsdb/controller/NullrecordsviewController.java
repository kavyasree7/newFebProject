/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Nullrecordsview;
import com.newfebproject.viewsdb.NullrecordsviewId;
import com.newfebproject.viewsdb.service.NullrecordsviewService;


/**
 * Controller object for domain model class Nullrecordsview.
 * @see Nullrecordsview
 */
@RestController("viewsdb.NullrecordsviewController")
@Api(value = "NullrecordsviewController", description = "Exposes APIs to work with Nullrecordsview resource.")
@RequestMapping("/viewsdb/Nullrecordsview")
public class NullrecordsviewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NullrecordsviewController.class);

    @Autowired
	@Qualifier("viewsdb.NullrecordsviewService")
	private NullrecordsviewService nullrecordsviewService;

	@ApiOperation(value = "Creates a new Nullrecordsview instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Nullrecordsview createNullrecordsview(@RequestBody Nullrecordsview nullrecordsview) {
		LOGGER.debug("Create Nullrecordsview with information: {}" , nullrecordsview);

		nullrecordsview = nullrecordsviewService.create(nullrecordsview);
		LOGGER.debug("Created Nullrecordsview with information: {}" , nullrecordsview);

	    return nullrecordsview;
	}

    @ApiOperation(value = "Returns the Nullrecordsview instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nullrecordsview getNullrecordsview(@RequestParam("username") String username,@RequestParam("password") String password,@RequestParam("role") String role,@RequestParam("usernamedeta") String usernamedeta,@RequestParam("usersal") Double usersal,@RequestParam("noofemployees") Long noofemployees,@RequestParam("isemployee") Boolean isemployee) throws EntityNotFoundException {

        NullrecordsviewId nullrecordsviewId = new NullrecordsviewId();
        nullrecordsviewId.setUsername(username);
        nullrecordsviewId.setPassword(password);
        nullrecordsviewId.setRole(role);
        nullrecordsviewId.setUsernamedeta(usernamedeta);
        nullrecordsviewId.setUsersal(usersal);
        nullrecordsviewId.setNoofemployees(noofemployees);
        nullrecordsviewId.setIsemployee(isemployee);

        LOGGER.debug("Getting Nullrecordsview with id: {}" , nullrecordsviewId);
        Nullrecordsview nullrecordsview = nullrecordsviewService.getById(nullrecordsviewId);
        LOGGER.debug("Nullrecordsview details with id: {}" , nullrecordsview);

        return nullrecordsview;
    }



    @ApiOperation(value = "Updates the Nullrecordsview instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nullrecordsview editNullrecordsview(@RequestParam("username") String username,@RequestParam("password") String password,@RequestParam("role") String role,@RequestParam("usernamedeta") String usernamedeta,@RequestParam("usersal") Double usersal,@RequestParam("noofemployees") Long noofemployees,@RequestParam("isemployee") Boolean isemployee, @RequestBody Nullrecordsview nullrecordsview) throws EntityNotFoundException {

        nullrecordsview.setUsername(username);
        nullrecordsview.setPassword(password);
        nullrecordsview.setRole(role);
        nullrecordsview.setUsernamedeta(usernamedeta);
        nullrecordsview.setUsersal(usersal);
        nullrecordsview.setNoofemployees(noofemployees);
        nullrecordsview.setIsemployee(isemployee);

        LOGGER.debug("Nullrecordsview details with id is updated with: {}" , nullrecordsview);

        return nullrecordsviewService.update(nullrecordsview);
    }


    @ApiOperation(value = "Deletes the Nullrecordsview instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNullrecordsview(@RequestParam("username") String username,@RequestParam("password") String password,@RequestParam("role") String role,@RequestParam("usernamedeta") String usernamedeta,@RequestParam("usersal") Double usersal,@RequestParam("noofemployees") Long noofemployees,@RequestParam("isemployee") Boolean isemployee) throws EntityNotFoundException {

        NullrecordsviewId nullrecordsviewId = new NullrecordsviewId();
        nullrecordsviewId.setUsername(username);
        nullrecordsviewId.setPassword(password);
        nullrecordsviewId.setRole(role);
        nullrecordsviewId.setUsernamedeta(usernamedeta);
        nullrecordsviewId.setUsersal(usersal);
        nullrecordsviewId.setNoofemployees(noofemployees);
        nullrecordsviewId.setIsemployee(isemployee);

        LOGGER.debug("Deleting Nullrecordsview with id: {}" , nullrecordsviewId);
        Nullrecordsview nullrecordsview = nullrecordsviewService.delete(nullrecordsviewId);

        return nullrecordsview != null;
    }


    /**
     * @deprecated Use {@link #findNullrecordsviews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Nullrecordsview instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nullrecordsview> searchNullrecordsviewsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Nullrecordsviews list");
        return nullrecordsviewService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nullrecordsview instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nullrecordsview> findNullrecordsviews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nullrecordsviews list");
        return nullrecordsviewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nullrecordsview instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nullrecordsview> filterNullrecordsviews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nullrecordsviews list");
        return nullrecordsviewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNullrecordsviews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return nullrecordsviewService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Nullrecordsview instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNullrecordsviews( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Nullrecordsviews");
		return nullrecordsviewService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNullrecordsviewAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return nullrecordsviewService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NullrecordsviewService instance
	 */
	protected void setNullrecordsviewService(NullrecordsviewService service) {
		this.nullrecordsviewService = service;
	}

}

