/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table749;
import com.newfebproject.viewsdb.service.Table749Service;


/**
 * Controller object for domain model class Table749.
 * @see Table749
 */
@RestController("viewsdb.Table749Controller")
@Api(value = "Table749Controller", description = "Exposes APIs to work with Table749 resource.")
@RequestMapping("/viewsdb/Table749")
public class Table749Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table749Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table749Service")
	private Table749Service table749Service;

	@ApiOperation(value = "Creates a new Table749 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table749 createTable749(@RequestBody Table749 table749) {
		LOGGER.debug("Create Table749 with information: {}" , table749);

		table749 = table749Service.create(table749);
		LOGGER.debug("Created Table749 with information: {}" , table749);

	    return table749;
	}


    @ApiOperation(value = "Returns the Table749 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table749 getTable749(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table749 with id: {}" , id);

        Table749 foundTable749 = table749Service.getById(id);
        LOGGER.debug("Table749 details with id: {}" , foundTable749);

        return foundTable749;
    }

    @ApiOperation(value = "Updates the Table749 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table749 editTable749(@PathVariable("id") Integer id, @RequestBody Table749 table749) throws EntityNotFoundException {
        LOGGER.debug("Editing Table749 with id: {}" , table749.getId());

        table749.setId(id);
        table749 = table749Service.update(table749);
        LOGGER.debug("Table749 details with id: {}" , table749);

        return table749;
    }

    @ApiOperation(value = "Deletes the Table749 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable749(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table749 with id: {}" , id);

        Table749 deletedTable749 = table749Service.delete(id);

        return deletedTable749 != null;
    }

    /**
     * @deprecated Use {@link #findTable749s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table749 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table749> searchTable749sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table749s list");
        return table749Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table749 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table749> findTable749s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table749s list");
        return table749Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table749 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table749> filterTable749s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table749s list");
        return table749Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable749s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table749Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table749 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable749s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table749s");
		return table749Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable749AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table749Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table749Service instance
	 */
	protected void setTable749Service(Table749Service service) {
		this.table749Service = service;
	}

}

