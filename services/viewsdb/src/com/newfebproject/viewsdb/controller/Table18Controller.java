/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table18;
import com.newfebproject.viewsdb.Table18Id;
import com.newfebproject.viewsdb.service.Table18Service;


/**
 * Controller object for domain model class Table18.
 * @see Table18
 */
@RestController("viewsdb.Table18Controller")
@Api(value = "Table18Controller", description = "Exposes APIs to work with Table18 resource.")
@RequestMapping("/viewsdb/Table18")
public class Table18Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table18Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table18Service")
	private Table18Service table18Service;

	@ApiOperation(value = "Creates a new Table18 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table18 createTable18(@RequestBody Table18 table18) {
		LOGGER.debug("Create Table18 with information: {}" , table18);

		table18 = table18Service.create(table18);
		LOGGER.debug("Created Table18 with information: {}" , table18);

	    return table18;
	}

    @ApiOperation(value = "Returns the Table18 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table18 getTable18(@RequestParam("column2") String column2,@RequestParam("column3") String column3,@RequestParam("column4") String column4) throws EntityNotFoundException {

        Table18Id table18Id = new Table18Id();
        table18Id.setColumn2(column2);
        table18Id.setColumn3(column3);
        table18Id.setColumn4(column4);

        LOGGER.debug("Getting Table18 with id: {}" , table18Id);
        Table18 table18 = table18Service.getById(table18Id);
        LOGGER.debug("Table18 details with id: {}" , table18);

        return table18;
    }



    @ApiOperation(value = "Updates the Table18 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table18 editTable18(@RequestParam("column2") String column2,@RequestParam("column3") String column3,@RequestParam("column4") String column4, @RequestBody Table18 table18) throws EntityNotFoundException {

        table18.setColumn2(column2);
        table18.setColumn3(column3);
        table18.setColumn4(column4);

        LOGGER.debug("Table18 details with id is updated with: {}" , table18);

        return table18Service.update(table18);
    }


    @ApiOperation(value = "Deletes the Table18 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable18(@RequestParam("column2") String column2,@RequestParam("column3") String column3,@RequestParam("column4") String column4) throws EntityNotFoundException {

        Table18Id table18Id = new Table18Id();
        table18Id.setColumn2(column2);
        table18Id.setColumn3(column3);
        table18Id.setColumn4(column4);

        LOGGER.debug("Deleting Table18 with id: {}" , table18Id);
        Table18 table18 = table18Service.delete(table18Id);

        return table18 != null;
    }


    /**
     * @deprecated Use {@link #findTable18s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table18 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table18> searchTable18sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table18s list");
        return table18Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table18 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table18> findTable18s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table18s list");
        return table18Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table18 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table18> filterTable18s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table18s list");
        return table18Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable18s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table18Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table18 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable18s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table18s");
		return table18Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable18AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table18Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table18Service instance
	 */
	protected void setTable18Service(Table18Service service) {
		this.table18Service = service;
	}

}

