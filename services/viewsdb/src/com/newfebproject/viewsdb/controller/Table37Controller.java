/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table37;
import com.newfebproject.viewsdb.service.Table37Service;


/**
 * Controller object for domain model class Table37.
 * @see Table37
 */
@RestController("viewsdb.Table37Controller")
@Api(value = "Table37Controller", description = "Exposes APIs to work with Table37 resource.")
@RequestMapping("/viewsdb/Table37")
public class Table37Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table37Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table37Service")
	private Table37Service table37Service;

	@ApiOperation(value = "Creates a new Table37 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table37 createTable37(@RequestBody Table37 table37) {
		LOGGER.debug("Create Table37 with information: {}" , table37);

		table37 = table37Service.create(table37);
		LOGGER.debug("Created Table37 with information: {}" , table37);

	    return table37;
	}


    @ApiOperation(value = "Returns the Table37 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table37 getTable37(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table37 with id: {}" , id);

        Table37 foundTable37 = table37Service.getById(id);
        LOGGER.debug("Table37 details with id: {}" , foundTable37);

        return foundTable37;
    }

    @ApiOperation(value = "Updates the Table37 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table37 editTable37(@PathVariable("id") String id, @RequestBody Table37 table37) throws EntityNotFoundException {
        LOGGER.debug("Editing Table37 with id: {}" , table37.getColumn2());

        table37.setColumn2(id);
        table37 = table37Service.update(table37);
        LOGGER.debug("Table37 details with id: {}" , table37);

        return table37;
    }

    @ApiOperation(value = "Deletes the Table37 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable37(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table37 with id: {}" , id);

        Table37 deletedTable37 = table37Service.delete(id);

        return deletedTable37 != null;
    }

    /**
     * @deprecated Use {@link #findTable37s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table37 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table37> searchTable37sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table37s list");
        return table37Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table37 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table37> findTable37s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table37s list");
        return table37Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table37 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table37> filterTable37s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table37s list");
        return table37Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable37s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table37Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table37 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable37s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table37s");
		return table37Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable37AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table37Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table37Service instance
	 */
	protected void setTable37Service(Table37Service service) {
		this.table37Service = service;
	}

}

