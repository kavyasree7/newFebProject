/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Number223;
import com.newfebproject.viewsdb.Number223Id;
import com.newfebproject.viewsdb.service.Number223Service;


/**
 * Controller object for domain model class Number223.
 * @see Number223
 */
@RestController("viewsdb.Number223Controller")
@Api(value = "Number223Controller", description = "Exposes APIs to work with Number223 resource.")
@RequestMapping("/viewsdb/Number223")
public class Number223Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Number223Controller.class);

    @Autowired
	@Qualifier("viewsdb.Number223Service")
	private Number223Service number223Service;

	@ApiOperation(value = "Creates a new Number223 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Number223 createNumber223(@RequestBody Number223 number223) {
		LOGGER.debug("Create Number223 with information: {}" , number223);

		number223 = number223Service.create(number223);
		LOGGER.debug("Created Number223 with information: {}" , number223);

	    return number223;
	}

    @ApiOperation(value = "Returns the Number223 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Number223 getNumber223(@RequestParam("id") Integer id,@RequestParam("integerCol") Short integerCol,@RequestParam("shortCol") Short shortCol,@RequestParam("longCol") Integer longCol,@RequestParam("bigintegerCol") Integer bigintegerCol,@RequestParam("byteCol") BigDecimal byteCol,@RequestParam("floatCol") Short floatCol,@RequestParam("doubleCol") Double doubleCol) throws EntityNotFoundException {

        Number223Id number223Id = new Number223Id();
        number223Id.setId(id);
        number223Id.setIntegerCol(integerCol);
        number223Id.setShortCol(shortCol);
        number223Id.setLongCol(longCol);
        number223Id.setBigintegerCol(bigintegerCol);
        number223Id.setByteCol(byteCol);
        number223Id.setFloatCol(floatCol);
        number223Id.setDoubleCol(doubleCol);

        LOGGER.debug("Getting Number223 with id: {}" , number223Id);
        Number223 number223 = number223Service.getById(number223Id);
        LOGGER.debug("Number223 details with id: {}" , number223);

        return number223;
    }



    @ApiOperation(value = "Updates the Number223 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Number223 editNumber223(@RequestParam("id") Integer id,@RequestParam("integerCol") Short integerCol,@RequestParam("shortCol") Short shortCol,@RequestParam("longCol") Integer longCol,@RequestParam("bigintegerCol") Integer bigintegerCol,@RequestParam("byteCol") BigDecimal byteCol,@RequestParam("floatCol") Short floatCol,@RequestParam("doubleCol") Double doubleCol, @RequestBody Number223 number223) throws EntityNotFoundException {

        number223.setId(id);
        number223.setIntegerCol(integerCol);
        number223.setShortCol(shortCol);
        number223.setLongCol(longCol);
        number223.setBigintegerCol(bigintegerCol);
        number223.setByteCol(byteCol);
        number223.setFloatCol(floatCol);
        number223.setDoubleCol(doubleCol);

        LOGGER.debug("Number223 details with id is updated with: {}" , number223);

        return number223Service.update(number223);
    }


    @ApiOperation(value = "Deletes the Number223 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNumber223(@RequestParam("id") Integer id,@RequestParam("integerCol") Short integerCol,@RequestParam("shortCol") Short shortCol,@RequestParam("longCol") Integer longCol,@RequestParam("bigintegerCol") Integer bigintegerCol,@RequestParam("byteCol") BigDecimal byteCol,@RequestParam("floatCol") Short floatCol,@RequestParam("doubleCol") Double doubleCol) throws EntityNotFoundException {

        Number223Id number223Id = new Number223Id();
        number223Id.setId(id);
        number223Id.setIntegerCol(integerCol);
        number223Id.setShortCol(shortCol);
        number223Id.setLongCol(longCol);
        number223Id.setBigintegerCol(bigintegerCol);
        number223Id.setByteCol(byteCol);
        number223Id.setFloatCol(floatCol);
        number223Id.setDoubleCol(doubleCol);

        LOGGER.debug("Deleting Number223 with id: {}" , number223Id);
        Number223 number223 = number223Service.delete(number223Id);

        return number223 != null;
    }


    /**
     * @deprecated Use {@link #findNumber223s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Number223 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Number223> searchNumber223sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Number223s list");
        return number223Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Number223 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Number223> findNumber223s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Number223s list");
        return number223Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Number223 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Number223> filterNumber223s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Number223s list");
        return number223Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNumber223s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return number223Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Number223 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNumber223s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Number223s");
		return number223Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNumber223AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return number223Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Number223Service instance
	 */
	protected void setNumber223Service(Number223Service service) {
		this.number223Service = service;
	}

}

