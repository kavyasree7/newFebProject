/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table45;
import com.newfebproject.viewsdb.service.Table45Service;


/**
 * Controller object for domain model class Table45.
 * @see Table45
 */
@RestController("viewsdb.Table45Controller")
@Api(value = "Table45Controller", description = "Exposes APIs to work with Table45 resource.")
@RequestMapping("/viewsdb/Table45")
public class Table45Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table45Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table45Service")
	private Table45Service table45Service;

	@ApiOperation(value = "Creates a new Table45 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table45 createTable45(@RequestBody Table45 table45) {
		LOGGER.debug("Create Table45 with information: {}" , table45);

		table45 = table45Service.create(table45);
		LOGGER.debug("Created Table45 with information: {}" , table45);

	    return table45;
	}


    @ApiOperation(value = "Returns the Table45 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table45 getTable45(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table45 with id: {}" , id);

        Table45 foundTable45 = table45Service.getById(id);
        LOGGER.debug("Table45 details with id: {}" , foundTable45);

        return foundTable45;
    }

    @ApiOperation(value = "Updates the Table45 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table45 editTable45(@PathVariable("id") Integer id, @RequestBody Table45 table45) throws EntityNotFoundException {
        LOGGER.debug("Editing Table45 with id: {}" , table45.getId());

        table45.setId(id);
        table45 = table45Service.update(table45);
        LOGGER.debug("Table45 details with id: {}" , table45);

        return table45;
    }

    @ApiOperation(value = "Deletes the Table45 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable45(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table45 with id: {}" , id);

        Table45 deletedTable45 = table45Service.delete(id);

        return deletedTable45 != null;
    }

    /**
     * @deprecated Use {@link #findTable45s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table45 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table45> searchTable45sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table45s list");
        return table45Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table45 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table45> findTable45s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table45s list");
        return table45Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table45 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table45> filterTable45s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table45s list");
        return table45Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable45s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table45Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table45 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable45s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table45s");
		return table45Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable45AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table45Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table45Service instance
	 */
	protected void setTable45Service(Table45Service service) {
		this.table45Service = service;
	}

}

