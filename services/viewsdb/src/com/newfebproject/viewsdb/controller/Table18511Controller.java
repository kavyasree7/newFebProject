/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table18511;
import com.newfebproject.viewsdb.service.Table18511Service;


/**
 * Controller object for domain model class Table18511.
 * @see Table18511
 */
@RestController("viewsdb.Table18511Controller")
@Api(value = "Table18511Controller", description = "Exposes APIs to work with Table18511 resource.")
@RequestMapping("/viewsdb/Table18511")
public class Table18511Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table18511Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table18511Service")
	private Table18511Service table18511Service;

	@ApiOperation(value = "Creates a new Table18511 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table18511 createTable18511(@RequestBody Table18511 table18511) {
		LOGGER.debug("Create Table18511 with information: {}" , table18511);

		table18511 = table18511Service.create(table18511);
		LOGGER.debug("Created Table18511 with information: {}" , table18511);

	    return table18511;
	}


    @ApiOperation(value = "Returns the Table18511 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table18511 getTable18511(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table18511 with id: {}" , id);

        Table18511 foundTable18511 = table18511Service.getById(id);
        LOGGER.debug("Table18511 details with id: {}" , foundTable18511);

        return foundTable18511;
    }

    @ApiOperation(value = "Updates the Table18511 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table18511 editTable18511(@PathVariable("id") Integer id, @RequestBody Table18511 table18511) throws EntityNotFoundException {
        LOGGER.debug("Editing Table18511 with id: {}" , table18511.getId());

        table18511.setId(id);
        table18511 = table18511Service.update(table18511);
        LOGGER.debug("Table18511 details with id: {}" , table18511);

        return table18511;
    }

    @ApiOperation(value = "Deletes the Table18511 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable18511(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table18511 with id: {}" , id);

        Table18511 deletedTable18511 = table18511Service.delete(id);

        return deletedTable18511 != null;
    }

    /**
     * @deprecated Use {@link #findTable18511s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table18511 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table18511> searchTable18511sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table18511s list");
        return table18511Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table18511 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table18511> findTable18511s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table18511s list");
        return table18511Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table18511 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table18511> filterTable18511s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table18511s list");
        return table18511Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable18511s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table18511Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table18511 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable18511s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table18511s");
		return table18511Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable18511AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table18511Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table18511Service instance
	 */
	protected void setTable18511Service(Table18511Service service) {
		this.table18511Service = service;
	}

}

