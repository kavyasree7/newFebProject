/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Userdetails;
import com.newfebproject.viewsdb.service.UserdetailsService;


/**
 * Controller object for domain model class Userdetails.
 * @see Userdetails
 */
@RestController("viewsdb.UserdetailsController")
@Api(value = "UserdetailsController", description = "Exposes APIs to work with Userdetails resource.")
@RequestMapping("/viewsdb/Userdetails")
public class UserdetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserdetailsController.class);

    @Autowired
	@Qualifier("viewsdb.UserdetailsService")
	private UserdetailsService userdetailsService;

	@ApiOperation(value = "Creates a new Userdetails instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Userdetails createUserdetails(@RequestBody Userdetails userdetails) {
		LOGGER.debug("Create Userdetails with information: {}" , userdetails);

		userdetails = userdetailsService.create(userdetails);
		LOGGER.debug("Created Userdetails with information: {}" , userdetails);

	    return userdetails;
	}


    @ApiOperation(value = "Returns the Userdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userdetails getUserdetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Userdetails with id: {}" , id);

        Userdetails foundUserdetails = userdetailsService.getById(id);
        LOGGER.debug("Userdetails details with id: {}" , foundUserdetails);

        return foundUserdetails;
    }

    @ApiOperation(value = "Updates the Userdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Userdetails editUserdetails(@PathVariable("id") Integer id, @RequestBody Userdetails userdetails) throws EntityNotFoundException {
        LOGGER.debug("Editing Userdetails with id: {}" , userdetails.getUserdetaid());

        userdetails.setUserdetaid(id);
        userdetails = userdetailsService.update(userdetails);
        LOGGER.debug("Userdetails details with id: {}" , userdetails);

        return userdetails;
    }

    @ApiOperation(value = "Deletes the Userdetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserdetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Userdetails with id: {}" , id);

        Userdetails deletedUserdetails = userdetailsService.delete(id);

        return deletedUserdetails != null;
    }

    /**
     * @deprecated Use {@link #findUserdetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Userdetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userdetails> searchUserdetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Userdetails list");
        return userdetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Userdetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userdetails> findUserdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Userdetails list");
        return userdetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Userdetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Userdetails> filterUserdetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Userdetails list");
        return userdetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserdetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userdetailsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Userdetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserdetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Userdetails");
		return userdetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserdetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userdetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserdetailsService instance
	 */
	protected void setUserdetailsService(UserdetailsService service) {
		this.userdetailsService = service;
	}

}

