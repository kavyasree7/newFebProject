/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.NumericView;
import com.newfebproject.viewsdb.NumericViewId;
import com.newfebproject.viewsdb.service.NumericViewService;


/**
 * Controller object for domain model class NumericView.
 * @see NumericView
 */
@RestController("viewsdb.NumericViewController")
@Api(value = "NumericViewController", description = "Exposes APIs to work with NumericView resource.")
@RequestMapping("/viewsdb/NumericView")
public class NumericViewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NumericViewController.class);

    @Autowired
	@Qualifier("viewsdb.NumericViewService")
	private NumericViewService numericViewService;

	@ApiOperation(value = "Creates a new NumericView instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public NumericView createNumericView(@RequestBody NumericView numericView) {
		LOGGER.debug("Create NumericView with information: {}" , numericView);

		numericView = numericViewService.create(numericView);
		LOGGER.debug("Created NumericView with information: {}" , numericView);

	    return numericView;
	}

    @ApiOperation(value = "Returns the NumericView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NumericView getNumericView(@RequestParam("userid") Integer userid,@RequestParam("username") String username,@RequestParam("password") String password,@RequestParam("role") String role) throws EntityNotFoundException {

        NumericViewId numericviewId = new NumericViewId();
        numericviewId.setUserid(userid);
        numericviewId.setUsername(username);
        numericviewId.setPassword(password);
        numericviewId.setRole(role);

        LOGGER.debug("Getting NumericView with id: {}" , numericviewId);
        NumericView numericView = numericViewService.getById(numericviewId);
        LOGGER.debug("NumericView details with id: {}" , numericView);

        return numericView;
    }



    @ApiOperation(value = "Updates the NumericView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NumericView editNumericView(@RequestParam("userid") Integer userid,@RequestParam("username") String username,@RequestParam("password") String password,@RequestParam("role") String role, @RequestBody NumericView numericView) throws EntityNotFoundException {

        numericView.setUserid(userid);
        numericView.setUsername(username);
        numericView.setPassword(password);
        numericView.setRole(role);

        LOGGER.debug("NumericView details with id is updated with: {}" , numericView);

        return numericViewService.update(numericView);
    }


    @ApiOperation(value = "Deletes the NumericView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNumericView(@RequestParam("userid") Integer userid,@RequestParam("username") String username,@RequestParam("password") String password,@RequestParam("role") String role) throws EntityNotFoundException {

        NumericViewId numericviewId = new NumericViewId();
        numericviewId.setUserid(userid);
        numericviewId.setUsername(username);
        numericviewId.setPassword(password);
        numericviewId.setRole(role);

        LOGGER.debug("Deleting NumericView with id: {}" , numericviewId);
        NumericView numericView = numericViewService.delete(numericviewId);

        return numericView != null;
    }


    /**
     * @deprecated Use {@link #findNumericViews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of NumericView instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NumericView> searchNumericViewsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NumericViews list");
        return numericViewService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NumericView instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NumericView> findNumericViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NumericViews list");
        return numericViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NumericView instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NumericView> filterNumericViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NumericViews list");
        return numericViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNumericViews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return numericViewService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of NumericView instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNumericViews( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NumericViews");
		return numericViewService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNumericViewAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return numericViewService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NumericViewService instance
	 */
	protected void setNumericViewService(NumericViewService service) {
		this.numericViewService = service;
	}

}

