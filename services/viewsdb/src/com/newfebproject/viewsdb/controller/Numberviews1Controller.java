/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Numberviews1;
import com.newfebproject.viewsdb.Numberviews1Id;
import com.newfebproject.viewsdb.service.Numberviews1Service;


/**
 * Controller object for domain model class Numberviews1.
 * @see Numberviews1
 */
@RestController("viewsdb.Numberviews1Controller")
@Api(value = "Numberviews1Controller", description = "Exposes APIs to work with Numberviews1 resource.")
@RequestMapping("/viewsdb/Numberviews1")
public class Numberviews1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Numberviews1Controller.class);

    @Autowired
	@Qualifier("viewsdb.Numberviews1Service")
	private Numberviews1Service numberviews1Service;

	@ApiOperation(value = "Creates a new Numberviews1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Numberviews1 createNumberviews1(@RequestBody Numberviews1 numberviews1) {
		LOGGER.debug("Create Numberviews1 with information: {}" , numberviews1);

		numberviews1 = numberviews1Service.create(numberviews1);
		LOGGER.debug("Created Numberviews1 with information: {}" , numberviews1);

	    return numberviews1;
	}

    @ApiOperation(value = "Returns the Numberviews1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Numberviews1 getNumberviews1(@RequestParam("id") Integer id,@RequestParam("integerCol") Short integerCol,@RequestParam("shortCol") Short shortCol,@RequestParam("longCol") Integer longCol,@RequestParam("bigintegerCol") Integer bigintegerCol,@RequestParam("byteCol") BigDecimal byteCol,@RequestParam("floatCol") Short floatCol,@RequestParam("doubleCol") Double doubleCol) throws EntityNotFoundException {

        Numberviews1Id numberviews1Id = new Numberviews1Id();
        numberviews1Id.setId(id);
        numberviews1Id.setIntegerCol(integerCol);
        numberviews1Id.setShortCol(shortCol);
        numberviews1Id.setLongCol(longCol);
        numberviews1Id.setBigintegerCol(bigintegerCol);
        numberviews1Id.setByteCol(byteCol);
        numberviews1Id.setFloatCol(floatCol);
        numberviews1Id.setDoubleCol(doubleCol);

        LOGGER.debug("Getting Numberviews1 with id: {}" , numberviews1Id);
        Numberviews1 numberviews1 = numberviews1Service.getById(numberviews1Id);
        LOGGER.debug("Numberviews1 details with id: {}" , numberviews1);

        return numberviews1;
    }



    @ApiOperation(value = "Updates the Numberviews1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Numberviews1 editNumberviews1(@RequestParam("id") Integer id,@RequestParam("integerCol") Short integerCol,@RequestParam("shortCol") Short shortCol,@RequestParam("longCol") Integer longCol,@RequestParam("bigintegerCol") Integer bigintegerCol,@RequestParam("byteCol") BigDecimal byteCol,@RequestParam("floatCol") Short floatCol,@RequestParam("doubleCol") Double doubleCol, @RequestBody Numberviews1 numberviews1) throws EntityNotFoundException {

        numberviews1.setId(id);
        numberviews1.setIntegerCol(integerCol);
        numberviews1.setShortCol(shortCol);
        numberviews1.setLongCol(longCol);
        numberviews1.setBigintegerCol(bigintegerCol);
        numberviews1.setByteCol(byteCol);
        numberviews1.setFloatCol(floatCol);
        numberviews1.setDoubleCol(doubleCol);

        LOGGER.debug("Numberviews1 details with id is updated with: {}" , numberviews1);

        return numberviews1Service.update(numberviews1);
    }


    @ApiOperation(value = "Deletes the Numberviews1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNumberviews1(@RequestParam("id") Integer id,@RequestParam("integerCol") Short integerCol,@RequestParam("shortCol") Short shortCol,@RequestParam("longCol") Integer longCol,@RequestParam("bigintegerCol") Integer bigintegerCol,@RequestParam("byteCol") BigDecimal byteCol,@RequestParam("floatCol") Short floatCol,@RequestParam("doubleCol") Double doubleCol) throws EntityNotFoundException {

        Numberviews1Id numberviews1Id = new Numberviews1Id();
        numberviews1Id.setId(id);
        numberviews1Id.setIntegerCol(integerCol);
        numberviews1Id.setShortCol(shortCol);
        numberviews1Id.setLongCol(longCol);
        numberviews1Id.setBigintegerCol(bigintegerCol);
        numberviews1Id.setByteCol(byteCol);
        numberviews1Id.setFloatCol(floatCol);
        numberviews1Id.setDoubleCol(doubleCol);

        LOGGER.debug("Deleting Numberviews1 with id: {}" , numberviews1Id);
        Numberviews1 numberviews1 = numberviews1Service.delete(numberviews1Id);

        return numberviews1 != null;
    }


    /**
     * @deprecated Use {@link #findNumberviews1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Numberviews1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Numberviews1> searchNumberviews1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Numberviews1s list");
        return numberviews1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Numberviews1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Numberviews1> findNumberviews1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Numberviews1s list");
        return numberviews1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Numberviews1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Numberviews1> filterNumberviews1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Numberviews1s list");
        return numberviews1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNumberviews1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return numberviews1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Numberviews1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNumberviews1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Numberviews1s");
		return numberviews1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNumberviews1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return numberviews1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Numberviews1Service instance
	 */
	protected void setNumberviews1Service(Numberviews1Service service) {
		this.numberviews1Service = service;
	}

}

