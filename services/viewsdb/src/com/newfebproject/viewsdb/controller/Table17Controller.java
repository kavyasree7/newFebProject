/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table17;
import com.newfebproject.viewsdb.service.Table17Service;


/**
 * Controller object for domain model class Table17.
 * @see Table17
 */
@RestController("viewsdb.Table17Controller")
@Api(value = "Table17Controller", description = "Exposes APIs to work with Table17 resource.")
@RequestMapping("/viewsdb/Table17")
public class Table17Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table17Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table17Service")
	private Table17Service table17Service;

	@ApiOperation(value = "Creates a new Table17 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table17 createTable17(@RequestBody Table17 table17) {
		LOGGER.debug("Create Table17 with information: {}" , table17);

		table17 = table17Service.create(table17);
		LOGGER.debug("Created Table17 with information: {}" , table17);

	    return table17;
	}


    @ApiOperation(value = "Returns the Table17 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table17 getTable17(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table17 with id: {}" , id);

        Table17 foundTable17 = table17Service.getById(id);
        LOGGER.debug("Table17 details with id: {}" , foundTable17);

        return foundTable17;
    }

    @ApiOperation(value = "Updates the Table17 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table17 editTable17(@PathVariable("id") Integer id, @RequestBody Table17 table17) throws EntityNotFoundException {
        LOGGER.debug("Editing Table17 with id: {}" , table17.getId());

        table17.setId(id);
        table17 = table17Service.update(table17);
        LOGGER.debug("Table17 details with id: {}" , table17);

        return table17;
    }

    @ApiOperation(value = "Deletes the Table17 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable17(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table17 with id: {}" , id);

        Table17 deletedTable17 = table17Service.delete(id);

        return deletedTable17 != null;
    }

    /**
     * @deprecated Use {@link #findTable17s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table17 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table17> searchTable17sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table17s list");
        return table17Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table17 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table17> findTable17s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table17s list");
        return table17Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table17 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table17> filterTable17s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table17s list");
        return table17Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable17s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table17Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table17 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable17s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table17s");
		return table17Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable17AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table17Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table17Service instance
	 */
	protected void setTable17Service(Table17Service service) {
		this.table17Service = service;
	}

}

