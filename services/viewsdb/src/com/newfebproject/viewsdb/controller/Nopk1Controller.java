/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Nopk1;
import com.newfebproject.viewsdb.Nopk1Id;
import com.newfebproject.viewsdb.service.Nopk1Service;


/**
 * Controller object for domain model class Nopk1.
 * @see Nopk1
 */
@RestController("viewsdb.Nopk1Controller")
@Api(value = "Nopk1Controller", description = "Exposes APIs to work with Nopk1 resource.")
@RequestMapping("/viewsdb/Nopk1")
public class Nopk1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Nopk1Controller.class);

    @Autowired
	@Qualifier("viewsdb.Nopk1Service")
	private Nopk1Service nopk1Service;

	@ApiOperation(value = "Creates a new Nopk1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Nopk1 createNopk1(@RequestBody Nopk1 nopk1) {
		LOGGER.debug("Create Nopk1 with information: {}" , nopk1);

		nopk1 = nopk1Service.create(nopk1);
		LOGGER.debug("Created Nopk1 with information: {}" , nopk1);

	    return nopk1;
	}

    @ApiOperation(value = "Returns the Nopk1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nopk1 getNopk1(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2) throws EntityNotFoundException {

        Nopk1Id nopk1Id = new Nopk1Id();
        nopk1Id.setColumn1(column1);
        nopk1Id.setColumn2(column2);

        LOGGER.debug("Getting Nopk1 with id: {}" , nopk1Id);
        Nopk1 nopk1 = nopk1Service.getById(nopk1Id);
        LOGGER.debug("Nopk1 details with id: {}" , nopk1);

        return nopk1;
    }



    @ApiOperation(value = "Updates the Nopk1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nopk1 editNopk1(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2, @RequestBody Nopk1 nopk1) throws EntityNotFoundException {

        nopk1.setColumn1(column1);
        nopk1.setColumn2(column2);

        LOGGER.debug("Nopk1 details with id is updated with: {}" , nopk1);

        return nopk1Service.update(nopk1);
    }


    @ApiOperation(value = "Deletes the Nopk1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNopk1(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2) throws EntityNotFoundException {

        Nopk1Id nopk1Id = new Nopk1Id();
        nopk1Id.setColumn1(column1);
        nopk1Id.setColumn2(column2);

        LOGGER.debug("Deleting Nopk1 with id: {}" , nopk1Id);
        Nopk1 nopk1 = nopk1Service.delete(nopk1Id);

        return nopk1 != null;
    }


    /**
     * @deprecated Use {@link #findNopk1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Nopk1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk1> searchNopk1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Nopk1s list");
        return nopk1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nopk1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk1> findNopk1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nopk1s list");
        return nopk1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nopk1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk1> filterNopk1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nopk1s list");
        return nopk1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNopk1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return nopk1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Nopk1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNopk1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Nopk1s");
		return nopk1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNopk1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return nopk1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Nopk1Service instance
	 */
	protected void setNopk1Service(Nopk1Service service) {
		this.nopk1Service = service;
	}

}

