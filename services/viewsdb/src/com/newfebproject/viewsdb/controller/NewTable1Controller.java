/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.NewTable1;
import com.newfebproject.viewsdb.service.NewTable1Service;


/**
 * Controller object for domain model class NewTable1.
 * @see NewTable1
 */
@RestController("viewsdb.NewTable1Controller")
@Api(value = "NewTable1Controller", description = "Exposes APIs to work with NewTable1 resource.")
@RequestMapping("/viewsdb/NewTable1")
public class NewTable1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(NewTable1Controller.class);

    @Autowired
	@Qualifier("viewsdb.NewTable1Service")
	private NewTable1Service newTable1Service;

	@ApiOperation(value = "Creates a new NewTable1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public NewTable1 createNewTable1(@RequestBody NewTable1 newTable1) {
		LOGGER.debug("Create NewTable1 with information: {}" , newTable1);

		newTable1 = newTable1Service.create(newTable1);
		LOGGER.debug("Created NewTable1 with information: {}" , newTable1);

	    return newTable1;
	}


    @ApiOperation(value = "Returns the NewTable1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NewTable1 getNewTable1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting NewTable1 with id: {}" , id);

        NewTable1 foundNewTable1 = newTable1Service.getById(id);
        LOGGER.debug("NewTable1 details with id: {}" , foundNewTable1);

        return foundNewTable1;
    }

    @ApiOperation(value = "Updates the NewTable1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NewTable1 editNewTable1(@PathVariable("id") Integer id, @RequestBody NewTable1 newTable1) throws EntityNotFoundException {
        LOGGER.debug("Editing NewTable1 with id: {}" , newTable1.getId());

        newTable1.setId(id);
        newTable1 = newTable1Service.update(newTable1);
        LOGGER.debug("NewTable1 details with id: {}" , newTable1);

        return newTable1;
    }

    @ApiOperation(value = "Deletes the NewTable1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNewTable1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting NewTable1 with id: {}" , id);

        NewTable1 deletedNewTable1 = newTable1Service.delete(id);

        return deletedNewTable1 != null;
    }

    /**
     * @deprecated Use {@link #findNewTable1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of NewTable1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NewTable1> searchNewTable1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NewTable1s list");
        return newTable1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NewTable1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NewTable1> findNewTable1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NewTable1s list");
        return newTable1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NewTable1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NewTable1> filterNewTable1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NewTable1s list");
        return newTable1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNewTable1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return newTable1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of NewTable1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNewTable1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NewTable1s");
		return newTable1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNewTable1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return newTable1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NewTable1Service instance
	 */
	protected void setNewTable1Service(NewTable1Service service) {
		this.newTable1Service = service;
	}

}

