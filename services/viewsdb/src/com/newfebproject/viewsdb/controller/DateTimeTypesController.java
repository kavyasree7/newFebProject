/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.DateTimeTypes;
import com.newfebproject.viewsdb.service.DateTimeTypesService;


/**
 * Controller object for domain model class DateTimeTypes.
 * @see DateTimeTypes
 */
@RestController("viewsdb.DateTimeTypesController")
@Api(value = "DateTimeTypesController", description = "Exposes APIs to work with DateTimeTypes resource.")
@RequestMapping("/viewsdb/DateTimeTypes")
public class DateTimeTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateTimeTypesController.class);

    @Autowired
	@Qualifier("viewsdb.DateTimeTypesService")
	private DateTimeTypesService dateTimeTypesService;

	@ApiOperation(value = "Creates a new DateTimeTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public DateTimeTypes createDateTimeTypes(@RequestBody DateTimeTypes dateTimeTypes) {
		LOGGER.debug("Create DateTimeTypes with information: {}" , dateTimeTypes);

		dateTimeTypes = dateTimeTypesService.create(dateTimeTypes);
		LOGGER.debug("Created DateTimeTypes with information: {}" , dateTimeTypes);

	    return dateTimeTypes;
	}


    @ApiOperation(value = "Returns the DateTimeTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DateTimeTypes getDateTimeTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DateTimeTypes with id: {}" , id);

        DateTimeTypes foundDateTimeTypes = dateTimeTypesService.getById(id);
        LOGGER.debug("DateTimeTypes details with id: {}" , foundDateTimeTypes);

        return foundDateTimeTypes;
    }

    @ApiOperation(value = "Updates the DateTimeTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DateTimeTypes editDateTimeTypes(@PathVariable("id") Integer id, @RequestBody DateTimeTypes dateTimeTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing DateTimeTypes with id: {}" , dateTimeTypes.getId());

        dateTimeTypes.setId(id);
        dateTimeTypes = dateTimeTypesService.update(dateTimeTypes);
        LOGGER.debug("DateTimeTypes details with id: {}" , dateTimeTypes);

        return dateTimeTypes;
    }

    @ApiOperation(value = "Deletes the DateTimeTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDateTimeTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DateTimeTypes with id: {}" , id);

        DateTimeTypes deletedDateTimeTypes = dateTimeTypesService.delete(id);

        return deletedDateTimeTypes != null;
    }

    /**
     * @deprecated Use {@link #findDateTimeTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DateTimeTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DateTimeTypes> searchDateTimeTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DateTimeTypes list");
        return dateTimeTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DateTimeTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DateTimeTypes> findDateTimeTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DateTimeTypes list");
        return dateTimeTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DateTimeTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DateTimeTypes> filterDateTimeTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DateTimeTypes list");
        return dateTimeTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDateTimeTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return dateTimeTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of DateTimeTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDateTimeTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DateTimeTypes");
		return dateTimeTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDateTimeTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return dateTimeTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DateTimeTypesService instance
	 */
	protected void setDateTimeTypesService(DateTimeTypesService service) {
		this.dateTimeTypesService = service;
	}

}

