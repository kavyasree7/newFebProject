/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table4;
import com.newfebproject.viewsdb.service.Table4Service;


/**
 * Controller object for domain model class Table4.
 * @see Table4
 */
@RestController("viewsdb.Table4Controller")
@Api(value = "Table4Controller", description = "Exposes APIs to work with Table4 resource.")
@RequestMapping("/viewsdb/Table4")
public class Table4Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table4Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table4Service")
	private Table4Service table4Service;

	@ApiOperation(value = "Creates a new Table4 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table4 createTable4(@RequestBody Table4 table4) {
		LOGGER.debug("Create Table4 with information: {}" , table4);

		table4 = table4Service.create(table4);
		LOGGER.debug("Created Table4 with information: {}" , table4);

	    return table4;
	}


    @ApiOperation(value = "Returns the Table4 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table4 getTable4(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table4 with id: {}" , id);

        Table4 foundTable4 = table4Service.getById(id);
        LOGGER.debug("Table4 details with id: {}" , foundTable4);

        return foundTable4;
    }

    @ApiOperation(value = "Updates the Table4 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table4 editTable4(@PathVariable("id") Integer id, @RequestBody Table4 table4) throws EntityNotFoundException {
        LOGGER.debug("Editing Table4 with id: {}" , table4.getId());

        table4.setId(id);
        table4 = table4Service.update(table4);
        LOGGER.debug("Table4 details with id: {}" , table4);

        return table4;
    }

    @ApiOperation(value = "Deletes the Table4 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable4(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table4 with id: {}" , id);

        Table4 deletedTable4 = table4Service.delete(id);

        return deletedTable4 != null;
    }

    /**
     * @deprecated Use {@link #findTable4s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table4 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table4> searchTable4sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table4s list");
        return table4Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table4 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table4> findTable4s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table4s list");
        return table4Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table4 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table4> filterTable4s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table4s list");
        return table4Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable4s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table4Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table4 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable4s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table4s");
		return table4Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable4AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table4Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table4Service instance
	 */
	protected void setTable4Service(Table4Service service) {
		this.table4Service = service;
	}

}

