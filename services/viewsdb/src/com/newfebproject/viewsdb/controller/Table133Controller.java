/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table133;
import com.newfebproject.viewsdb.service.Table133Service;


/**
 * Controller object for domain model class Table133.
 * @see Table133
 */
@RestController("viewsdb.Table133Controller")
@Api(value = "Table133Controller", description = "Exposes APIs to work with Table133 resource.")
@RequestMapping("/viewsdb/Table133")
public class Table133Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table133Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table133Service")
	private Table133Service table133Service;

	@ApiOperation(value = "Creates a new Table133 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table133 createTable133(@RequestBody Table133 table133) {
		LOGGER.debug("Create Table133 with information: {}" , table133);

		table133 = table133Service.create(table133);
		LOGGER.debug("Created Table133 with information: {}" , table133);

	    return table133;
	}


    @ApiOperation(value = "Returns the Table133 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table133 getTable133(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table133 with id: {}" , id);

        Table133 foundTable133 = table133Service.getById(id);
        LOGGER.debug("Table133 details with id: {}" , foundTable133);

        return foundTable133;
    }

    @ApiOperation(value = "Updates the Table133 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table133 editTable133(@PathVariable("id") Short id, @RequestBody Table133 table133) throws EntityNotFoundException {
        LOGGER.debug("Editing Table133 with id: {}" , table133.getIdColumn());

        table133.setIdColumn(id);
        table133 = table133Service.update(table133);
        LOGGER.debug("Table133 details with id: {}" , table133);

        return table133;
    }

    @ApiOperation(value = "Deletes the Table133 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable133(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table133 with id: {}" , id);

        Table133 deletedTable133 = table133Service.delete(id);

        return deletedTable133 != null;
    }

    /**
     * @deprecated Use {@link #findTable133s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table133 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table133> searchTable133sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table133s list");
        return table133Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table133 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table133> findTable133s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table133s list");
        return table133Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table133 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table133> filterTable133s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table133s list");
        return table133Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable133s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table133Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table133 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable133s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table133s");
		return table133Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable133AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table133Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table133Service instance
	 */
	protected void setTable133Service(Table133Service service) {
		this.table133Service = service;
	}

}

