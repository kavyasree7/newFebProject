/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table26;
import com.newfebproject.viewsdb.service.Table26Service;


/**
 * Controller object for domain model class Table26.
 * @see Table26
 */
@RestController("viewsdb.Table26Controller")
@Api(value = "Table26Controller", description = "Exposes APIs to work with Table26 resource.")
@RequestMapping("/viewsdb/Table26")
public class Table26Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table26Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table26Service")
	private Table26Service table26Service;

	@ApiOperation(value = "Creates a new Table26 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table26 createTable26(@RequestBody Table26 table26) {
		LOGGER.debug("Create Table26 with information: {}" , table26);

		table26 = table26Service.create(table26);
		LOGGER.debug("Created Table26 with information: {}" , table26);

	    return table26;
	}


    @ApiOperation(value = "Returns the Table26 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table26 getTable26(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table26 with id: {}" , id);

        Table26 foundTable26 = table26Service.getById(id);
        LOGGER.debug("Table26 details with id: {}" , foundTable26);

        return foundTable26;
    }

    @ApiOperation(value = "Updates the Table26 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table26 editTable26(@PathVariable("id") Integer id, @RequestBody Table26 table26) throws EntityNotFoundException {
        LOGGER.debug("Editing Table26 with id: {}" , table26.getId());

        table26.setId(id);
        table26 = table26Service.update(table26);
        LOGGER.debug("Table26 details with id: {}" , table26);

        return table26;
    }

    @ApiOperation(value = "Deletes the Table26 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable26(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table26 with id: {}" , id);

        Table26 deletedTable26 = table26Service.delete(id);

        return deletedTable26 != null;
    }

    /**
     * @deprecated Use {@link #findTable26s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table26 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table26> searchTable26sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table26s list");
        return table26Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table26 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table26> findTable26s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table26s list");
        return table26Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table26 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table26> filterTable26s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table26s list");
        return table26Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable26s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table26Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table26 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable26s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table26s");
		return table26Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable26AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table26Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table26Service instance
	 */
	protected void setTable26Service(Table26Service service) {
		this.table26Service = service;
	}

}

