/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Nopk3;
import com.newfebproject.viewsdb.service.Nopk3Service;


/**
 * Controller object for domain model class Nopk3.
 * @see Nopk3
 */
@RestController("viewsdb.Nopk3Controller")
@Api(value = "Nopk3Controller", description = "Exposes APIs to work with Nopk3 resource.")
@RequestMapping("/viewsdb/Nopk3")
public class Nopk3Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Nopk3Controller.class);

    @Autowired
	@Qualifier("viewsdb.Nopk3Service")
	private Nopk3Service nopk3Service;

	@ApiOperation(value = "Creates a new Nopk3 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Nopk3 createNopk3(@RequestBody Nopk3 nopk3) {
		LOGGER.debug("Create Nopk3 with information: {}" , nopk3);

		nopk3 = nopk3Service.create(nopk3);
		LOGGER.debug("Created Nopk3 with information: {}" , nopk3);

	    return nopk3;
	}


    @ApiOperation(value = "Returns the Nopk3 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nopk3 getNopk3(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Nopk3 with id: {}" , id);

        Nopk3 foundNopk3 = nopk3Service.getById(id);
        LOGGER.debug("Nopk3 details with id: {}" , foundNopk3);

        return foundNopk3;
    }

    @ApiOperation(value = "Updates the Nopk3 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nopk3 editNopk3(@PathVariable("id") Integer id, @RequestBody Nopk3 nopk3) throws EntityNotFoundException {
        LOGGER.debug("Editing Nopk3 with id: {}" , nopk3.getColumn1());

        nopk3.setColumn1(id);
        nopk3 = nopk3Service.update(nopk3);
        LOGGER.debug("Nopk3 details with id: {}" , nopk3);

        return nopk3;
    }

    @ApiOperation(value = "Deletes the Nopk3 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNopk3(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Nopk3 with id: {}" , id);

        Nopk3 deletedNopk3 = nopk3Service.delete(id);

        return deletedNopk3 != null;
    }

    /**
     * @deprecated Use {@link #findNopk3s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Nopk3 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk3> searchNopk3sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Nopk3s list");
        return nopk3Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nopk3 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk3> findNopk3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nopk3s list");
        return nopk3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nopk3 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk3> filterNopk3s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nopk3s list");
        return nopk3Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNopk3s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return nopk3Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Nopk3 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNopk3s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Nopk3s");
		return nopk3Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNopk3AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return nopk3Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Nopk3Service instance
	 */
	protected void setNopk3Service(Nopk3Service service) {
		this.nopk3Service = service;
	}

}

