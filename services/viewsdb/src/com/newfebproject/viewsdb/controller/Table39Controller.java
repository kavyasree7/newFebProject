/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table39;
import com.newfebproject.viewsdb.service.Table39Service;


/**
 * Controller object for domain model class Table39.
 * @see Table39
 */
@RestController("viewsdb.Table39Controller")
@Api(value = "Table39Controller", description = "Exposes APIs to work with Table39 resource.")
@RequestMapping("/viewsdb/Table39")
public class Table39Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table39Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table39Service")
	private Table39Service table39Service;

	@ApiOperation(value = "Creates a new Table39 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table39 createTable39(@RequestBody Table39 table39) {
		LOGGER.debug("Create Table39 with information: {}" , table39);

		table39 = table39Service.create(table39);
		LOGGER.debug("Created Table39 with information: {}" , table39);

	    return table39;
	}


    @ApiOperation(value = "Returns the Table39 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table39 getTable39(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table39 with id: {}" , id);

        Table39 foundTable39 = table39Service.getById(id);
        LOGGER.debug("Table39 details with id: {}" , foundTable39);

        return foundTable39;
    }

    @ApiOperation(value = "Updates the Table39 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table39 editTable39(@PathVariable("id") Integer id, @RequestBody Table39 table39) throws EntityNotFoundException {
        LOGGER.debug("Editing Table39 with id: {}" , table39.getId());

        table39.setId(id);
        table39 = table39Service.update(table39);
        LOGGER.debug("Table39 details with id: {}" , table39);

        return table39;
    }

    @ApiOperation(value = "Deletes the Table39 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable39(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table39 with id: {}" , id);

        Table39 deletedTable39 = table39Service.delete(id);

        return deletedTable39 != null;
    }

    /**
     * @deprecated Use {@link #findTable39s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table39 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table39> searchTable39sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table39s list");
        return table39Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table39 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table39> findTable39s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table39s list");
        return table39Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table39 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table39> filterTable39s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table39s list");
        return table39Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable39s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table39Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table39 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable39s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table39s");
		return table39Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable39AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table39Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table39Service instance
	 */
	protected void setTable39Service(Table39Service service) {
		this.table39Service = service;
	}

}

