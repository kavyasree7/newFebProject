/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table129;
import com.newfebproject.viewsdb.Table129Id;
import com.newfebproject.viewsdb.service.Table129Service;


/**
 * Controller object for domain model class Table129.
 * @see Table129
 */
@RestController("viewsdb.Table129Controller")
@Api(value = "Table129Controller", description = "Exposes APIs to work with Table129 resource.")
@RequestMapping("/viewsdb/Table129")
public class Table129Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table129Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table129Service")
	private Table129Service table129Service;

	@ApiOperation(value = "Creates a new Table129 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table129 createTable129(@RequestBody Table129 table129) {
		LOGGER.debug("Create Table129 with information: {}" , table129);

		table129 = table129Service.create(table129);
		LOGGER.debug("Created Table129 with information: {}" , table129);

	    return table129;
	}

    @ApiOperation(value = "Returns the Table129 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table129 getTable129(@RequestParam("column2") String column2,@RequestParam("column3") String column3) throws EntityNotFoundException {

        Table129Id table129Id = new Table129Id();
        table129Id.setColumn2(column2);
        table129Id.setColumn3(column3);

        LOGGER.debug("Getting Table129 with id: {}" , table129Id);
        Table129 table129 = table129Service.getById(table129Id);
        LOGGER.debug("Table129 details with id: {}" , table129);

        return table129;
    }



    @ApiOperation(value = "Updates the Table129 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table129 editTable129(@RequestParam("column2") String column2,@RequestParam("column3") String column3, @RequestBody Table129 table129) throws EntityNotFoundException {

        table129.setColumn2(column2);
        table129.setColumn3(column3);

        LOGGER.debug("Table129 details with id is updated with: {}" , table129);

        return table129Service.update(table129);
    }


    @ApiOperation(value = "Deletes the Table129 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable129(@RequestParam("column2") String column2,@RequestParam("column3") String column3) throws EntityNotFoundException {

        Table129Id table129Id = new Table129Id();
        table129Id.setColumn2(column2);
        table129Id.setColumn3(column3);

        LOGGER.debug("Deleting Table129 with id: {}" , table129Id);
        Table129 table129 = table129Service.delete(table129Id);

        return table129 != null;
    }


    /**
     * @deprecated Use {@link #findTable129s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table129 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table129> searchTable129sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table129s list");
        return table129Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table129 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table129> findTable129s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table129s list");
        return table129Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table129 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table129> filterTable129s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table129s list");
        return table129Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable129s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table129Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table129 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable129s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table129s");
		return table129Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable129AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table129Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table129Service instance
	 */
	protected void setTable129Service(Table129Service service) {
		this.table129Service = service;
	}

}

