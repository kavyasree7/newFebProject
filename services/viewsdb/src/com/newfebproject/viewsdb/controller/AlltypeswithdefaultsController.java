/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Map;

import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Alltypeswithdefaults;
import com.newfebproject.viewsdb.AlltypeswithdefaultsId;
import com.newfebproject.viewsdb.service.AlltypeswithdefaultsService;


/**
 * Controller object for domain model class Alltypeswithdefaults.
 * @see Alltypeswithdefaults
 */
@RestController("viewsdb.AlltypeswithdefaultsController")
@Api(value = "AlltypeswithdefaultsController", description = "Exposes APIs to work with Alltypeswithdefaults resource.")
@RequestMapping("/viewsdb/Alltypeswithdefaults")
public class AlltypeswithdefaultsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypeswithdefaultsController.class);

    @Autowired
	@Qualifier("viewsdb.AlltypeswithdefaultsService")
	private AlltypeswithdefaultsService alltypeswithdefaultsService;

	@ApiOperation(value = "Creates a new Alltypeswithdefaults instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Alltypeswithdefaults createAlltypeswithdefaults(@RequestBody Alltypeswithdefaults alltypeswithdefaults) {
		LOGGER.debug("Create Alltypeswithdefaults with information: {}" , alltypeswithdefaults);

		alltypeswithdefaults = alltypeswithdefaultsService.create(alltypeswithdefaults);
		LOGGER.debug("Created Alltypeswithdefaults with information: {}" , alltypeswithdefaults);

	    return alltypeswithdefaults;
	}

    @ApiOperation(value = "Returns the Alltypeswithdefaults instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Alltypeswithdefaults getAlltypeswithdefaults(@RequestParam("booleancol") Boolean booleancol,@RequestParam("smallintcol") Short smallintcol,@RequestParam("intcol") Integer intcol,@RequestParam("bigintcol") Long bigintcol,@RequestParam("floatcol") Float floatcol,@RequestParam("doublecol") Double doublecol,@RequestParam("numericcol") BigDecimal numericcol,@RequestParam("realcol") Float realcol,@RequestParam("doublepreccol") Double doublepreccol,@RequestParam("serialcol") Integer serialcol,@RequestParam("plainfloatcol") Double plainfloatcol,@RequestParam("charcol") String charcol,@RequestParam("quotedcharcol") String quotedcharcol,@RequestParam("varcharcol") String varcharcol,@RequestParam("textcol") String textcol,@RequestParam("datecol") Date datecol,@RequestParam("timecol") Time timecol,@RequestParam("timetzcol") Time timetzcol,@RequestParam("timewotzcol") Time timewotzcol,@RequestParam("timestampcol") LocalDateTime timestampcol,@RequestParam("timestamptzcol") Timestamp timestamptzcol,@RequestParam("timestampwotzcol") LocalDateTime timestampwotzcol) throws EntityNotFoundException {

        AlltypeswithdefaultsId alltypeswithdefaultsId = new AlltypeswithdefaultsId();
        alltypeswithdefaultsId.setBooleancol(booleancol);
        alltypeswithdefaultsId.setSmallintcol(smallintcol);
        alltypeswithdefaultsId.setIntcol(intcol);
        alltypeswithdefaultsId.setBigintcol(bigintcol);
        alltypeswithdefaultsId.setFloatcol(floatcol);
        alltypeswithdefaultsId.setDoublecol(doublecol);
        alltypeswithdefaultsId.setNumericcol(numericcol);
        alltypeswithdefaultsId.setRealcol(realcol);
        alltypeswithdefaultsId.setDoublepreccol(doublepreccol);
        alltypeswithdefaultsId.setSerialcol(serialcol);
        alltypeswithdefaultsId.setPlainfloatcol(plainfloatcol);
        alltypeswithdefaultsId.setCharcol(charcol);
        alltypeswithdefaultsId.setQuotedcharcol(quotedcharcol);
        alltypeswithdefaultsId.setVarcharcol(varcharcol);
        alltypeswithdefaultsId.setTextcol(textcol);
        alltypeswithdefaultsId.setDatecol(datecol);
        alltypeswithdefaultsId.setTimecol(timecol);
        alltypeswithdefaultsId.setTimetzcol(timetzcol);
        alltypeswithdefaultsId.setTimewotzcol(timewotzcol);
        alltypeswithdefaultsId.setTimestampcol(timestampcol);
        alltypeswithdefaultsId.setTimestamptzcol(timestamptzcol);
        alltypeswithdefaultsId.setTimestampwotzcol(timestampwotzcol);

        LOGGER.debug("Getting Alltypeswithdefaults with id: {}" , alltypeswithdefaultsId);
        Alltypeswithdefaults alltypeswithdefaults = alltypeswithdefaultsService.getById(alltypeswithdefaultsId);
        LOGGER.debug("Alltypeswithdefaults details with id: {}" , alltypeswithdefaults);

        return alltypeswithdefaults;
    }



    @ApiOperation(value = "Updates the Alltypeswithdefaults instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Alltypeswithdefaults editAlltypeswithdefaults(@RequestParam("booleancol") Boolean booleancol,@RequestParam("smallintcol") Short smallintcol,@RequestParam("intcol") Integer intcol,@RequestParam("bigintcol") Long bigintcol,@RequestParam("floatcol") Float floatcol,@RequestParam("doublecol") Double doublecol,@RequestParam("numericcol") BigDecimal numericcol,@RequestParam("realcol") Float realcol,@RequestParam("doublepreccol") Double doublepreccol,@RequestParam("serialcol") Integer serialcol,@RequestParam("plainfloatcol") Double plainfloatcol,@RequestParam("charcol") String charcol,@RequestParam("quotedcharcol") String quotedcharcol,@RequestParam("varcharcol") String varcharcol,@RequestParam("textcol") String textcol,@RequestParam("datecol") Date datecol,@RequestParam("timecol") Time timecol,@RequestParam("timetzcol") Time timetzcol,@RequestParam("timewotzcol") Time timewotzcol,@RequestParam("timestampcol") LocalDateTime timestampcol,@RequestParam("timestamptzcol") Timestamp timestamptzcol,@RequestParam("timestampwotzcol") LocalDateTime timestampwotzcol, @RequestBody Alltypeswithdefaults alltypeswithdefaults) throws EntityNotFoundException {

        alltypeswithdefaults.setBooleancol(booleancol);
        alltypeswithdefaults.setSmallintcol(smallintcol);
        alltypeswithdefaults.setIntcol(intcol);
        alltypeswithdefaults.setBigintcol(bigintcol);
        alltypeswithdefaults.setFloatcol(floatcol);
        alltypeswithdefaults.setDoublecol(doublecol);
        alltypeswithdefaults.setNumericcol(numericcol);
        alltypeswithdefaults.setRealcol(realcol);
        alltypeswithdefaults.setDoublepreccol(doublepreccol);
        alltypeswithdefaults.setSerialcol(serialcol);
        alltypeswithdefaults.setPlainfloatcol(plainfloatcol);
        alltypeswithdefaults.setCharcol(charcol);
        alltypeswithdefaults.setQuotedcharcol(quotedcharcol);
        alltypeswithdefaults.setVarcharcol(varcharcol);
        alltypeswithdefaults.setTextcol(textcol);
        alltypeswithdefaults.setDatecol(datecol);
        alltypeswithdefaults.setTimecol(timecol);
        alltypeswithdefaults.setTimetzcol(timetzcol);
        alltypeswithdefaults.setTimewotzcol(timewotzcol);
        alltypeswithdefaults.setTimestampcol(timestampcol);
        alltypeswithdefaults.setTimestamptzcol(timestamptzcol);
        alltypeswithdefaults.setTimestampwotzcol(timestampwotzcol);

        LOGGER.debug("Alltypeswithdefaults details with id is updated with: {}" , alltypeswithdefaults);

        return alltypeswithdefaultsService.update(alltypeswithdefaults);
    }


    @ApiOperation(value = "Deletes the Alltypeswithdefaults instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAlltypeswithdefaults(@RequestParam("booleancol") Boolean booleancol,@RequestParam("smallintcol") Short smallintcol,@RequestParam("intcol") Integer intcol,@RequestParam("bigintcol") Long bigintcol,@RequestParam("floatcol") Float floatcol,@RequestParam("doublecol") Double doublecol,@RequestParam("numericcol") BigDecimal numericcol,@RequestParam("realcol") Float realcol,@RequestParam("doublepreccol") Double doublepreccol,@RequestParam("serialcol") Integer serialcol,@RequestParam("plainfloatcol") Double plainfloatcol,@RequestParam("charcol") String charcol,@RequestParam("quotedcharcol") String quotedcharcol,@RequestParam("varcharcol") String varcharcol,@RequestParam("textcol") String textcol,@RequestParam("datecol") Date datecol,@RequestParam("timecol") Time timecol,@RequestParam("timetzcol") Time timetzcol,@RequestParam("timewotzcol") Time timewotzcol,@RequestParam("timestampcol") LocalDateTime timestampcol,@RequestParam("timestamptzcol") Timestamp timestamptzcol,@RequestParam("timestampwotzcol") LocalDateTime timestampwotzcol) throws EntityNotFoundException {

        AlltypeswithdefaultsId alltypeswithdefaultsId = new AlltypeswithdefaultsId();
        alltypeswithdefaultsId.setBooleancol(booleancol);
        alltypeswithdefaultsId.setSmallintcol(smallintcol);
        alltypeswithdefaultsId.setIntcol(intcol);
        alltypeswithdefaultsId.setBigintcol(bigintcol);
        alltypeswithdefaultsId.setFloatcol(floatcol);
        alltypeswithdefaultsId.setDoublecol(doublecol);
        alltypeswithdefaultsId.setNumericcol(numericcol);
        alltypeswithdefaultsId.setRealcol(realcol);
        alltypeswithdefaultsId.setDoublepreccol(doublepreccol);
        alltypeswithdefaultsId.setSerialcol(serialcol);
        alltypeswithdefaultsId.setPlainfloatcol(plainfloatcol);
        alltypeswithdefaultsId.setCharcol(charcol);
        alltypeswithdefaultsId.setQuotedcharcol(quotedcharcol);
        alltypeswithdefaultsId.setVarcharcol(varcharcol);
        alltypeswithdefaultsId.setTextcol(textcol);
        alltypeswithdefaultsId.setDatecol(datecol);
        alltypeswithdefaultsId.setTimecol(timecol);
        alltypeswithdefaultsId.setTimetzcol(timetzcol);
        alltypeswithdefaultsId.setTimewotzcol(timewotzcol);
        alltypeswithdefaultsId.setTimestampcol(timestampcol);
        alltypeswithdefaultsId.setTimestamptzcol(timestamptzcol);
        alltypeswithdefaultsId.setTimestampwotzcol(timestampwotzcol);

        LOGGER.debug("Deleting Alltypeswithdefaults with id: {}" , alltypeswithdefaultsId);
        Alltypeswithdefaults alltypeswithdefaults = alltypeswithdefaultsService.delete(alltypeswithdefaultsId);

        return alltypeswithdefaults != null;
    }


    /**
     * @deprecated Use {@link #findAlltypeswithdefaults(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Alltypeswithdefaults instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Alltypeswithdefaults> searchAlltypeswithdefaultsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Alltypeswithdefaults list");
        return alltypeswithdefaultsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Alltypeswithdefaults instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Alltypeswithdefaults> findAlltypeswithdefaults(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Alltypeswithdefaults list");
        return alltypeswithdefaultsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Alltypeswithdefaults instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Alltypeswithdefaults> filterAlltypeswithdefaults(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Alltypeswithdefaults list");
        return alltypeswithdefaultsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAlltypeswithdefaults(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return alltypeswithdefaultsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Alltypeswithdefaults instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAlltypeswithdefaults( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Alltypeswithdefaults");
		return alltypeswithdefaultsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAlltypeswithdefaultsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return alltypeswithdefaultsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AlltypeswithdefaultsService instance
	 */
	protected void setAlltypeswithdefaultsService(AlltypeswithdefaultsService service) {
		this.alltypeswithdefaultsService = service;
	}

}

