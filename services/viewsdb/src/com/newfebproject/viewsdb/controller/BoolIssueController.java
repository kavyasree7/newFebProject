/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.BoolIssue;
import com.newfebproject.viewsdb.service.BoolIssueService;


/**
 * Controller object for domain model class BoolIssue.
 * @see BoolIssue
 */
@RestController("viewsdb.BoolIssueController")
@Api(value = "BoolIssueController", description = "Exposes APIs to work with BoolIssue resource.")
@RequestMapping("/viewsdb/BoolIssue")
public class BoolIssueController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BoolIssueController.class);

    @Autowired
	@Qualifier("viewsdb.BoolIssueService")
	private BoolIssueService boolIssueService;

	@ApiOperation(value = "Creates a new BoolIssue instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public BoolIssue createBoolIssue(@RequestBody BoolIssue boolIssue) {
		LOGGER.debug("Create BoolIssue with information: {}" , boolIssue);

		boolIssue = boolIssueService.create(boolIssue);
		LOGGER.debug("Created BoolIssue with information: {}" , boolIssue);

	    return boolIssue;
	}


    @ApiOperation(value = "Returns the BoolIssue instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BoolIssue getBoolIssue(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BoolIssue with id: {}" , id);

        BoolIssue foundBoolIssue = boolIssueService.getById(id);
        LOGGER.debug("BoolIssue details with id: {}" , foundBoolIssue);

        return foundBoolIssue;
    }

    @ApiOperation(value = "Updates the BoolIssue instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BoolIssue editBoolIssue(@PathVariable("id") Integer id, @RequestBody BoolIssue boolIssue) throws EntityNotFoundException {
        LOGGER.debug("Editing BoolIssue with id: {}" , boolIssue.getId());

        boolIssue.setId(id);
        boolIssue = boolIssueService.update(boolIssue);
        LOGGER.debug("BoolIssue details with id: {}" , boolIssue);

        return boolIssue;
    }

    @ApiOperation(value = "Deletes the BoolIssue instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBoolIssue(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BoolIssue with id: {}" , id);

        BoolIssue deletedBoolIssue = boolIssueService.delete(id);

        return deletedBoolIssue != null;
    }

    /**
     * @deprecated Use {@link #findBoolIssues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BoolIssue instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BoolIssue> searchBoolIssuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BoolIssues list");
        return boolIssueService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BoolIssue instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BoolIssue> findBoolIssues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BoolIssues list");
        return boolIssueService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BoolIssue instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BoolIssue> filterBoolIssues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BoolIssues list");
        return boolIssueService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBoolIssues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return boolIssueService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of BoolIssue instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBoolIssues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BoolIssues");
		return boolIssueService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBoolIssueAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return boolIssueService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BoolIssueService instance
	 */
	protected void setBoolIssueService(BoolIssueService service) {
		this.boolIssueService = service;
	}

}

