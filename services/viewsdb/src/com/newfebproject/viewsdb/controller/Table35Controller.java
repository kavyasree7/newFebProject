/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table35;
import com.newfebproject.viewsdb.service.Table35Service;


/**
 * Controller object for domain model class Table35.
 * @see Table35
 */
@RestController("viewsdb.Table35Controller")
@Api(value = "Table35Controller", description = "Exposes APIs to work with Table35 resource.")
@RequestMapping("/viewsdb/Table35")
public class Table35Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table35Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table35Service")
	private Table35Service table35Service;

	@ApiOperation(value = "Creates a new Table35 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table35 createTable35(@RequestBody Table35 table35) {
		LOGGER.debug("Create Table35 with information: {}" , table35);

		table35 = table35Service.create(table35);
		LOGGER.debug("Created Table35 with information: {}" , table35);

	    return table35;
	}


    @ApiOperation(value = "Returns the Table35 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table35 getTable35(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table35 with id: {}" , id);

        Table35 foundTable35 = table35Service.getById(id);
        LOGGER.debug("Table35 details with id: {}" , foundTable35);

        return foundTable35;
    }

    @ApiOperation(value = "Updates the Table35 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table35 editTable35(@PathVariable("id") Integer id, @RequestBody Table35 table35) throws EntityNotFoundException {
        LOGGER.debug("Editing Table35 with id: {}" , table35.getId());

        table35.setId(id);
        table35 = table35Service.update(table35);
        LOGGER.debug("Table35 details with id: {}" , table35);

        return table35;
    }

    @ApiOperation(value = "Deletes the Table35 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable35(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table35 with id: {}" , id);

        Table35 deletedTable35 = table35Service.delete(id);

        return deletedTable35 != null;
    }

    /**
     * @deprecated Use {@link #findTable35s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table35 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table35> searchTable35sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table35s list");
        return table35Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table35 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table35> findTable35s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table35s list");
        return table35Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table35 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table35> filterTable35s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table35s list");
        return table35Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable35s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table35Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table35 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable35s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table35s");
		return table35Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable35AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table35Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table35Service instance
	 */
	protected void setTable35Service(Table35Service service) {
		this.table35Service = service;
	}

}

