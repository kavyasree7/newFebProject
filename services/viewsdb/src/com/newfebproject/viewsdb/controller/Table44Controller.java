/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Table44;
import com.newfebproject.viewsdb.service.Table44Service;


/**
 * Controller object for domain model class Table44.
 * @see Table44
 */
@RestController("viewsdb.Table44Controller")
@Api(value = "Table44Controller", description = "Exposes APIs to work with Table44 resource.")
@RequestMapping("/viewsdb/Table44")
public class Table44Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table44Controller.class);

    @Autowired
	@Qualifier("viewsdb.Table44Service")
	private Table44Service table44Service;

	@ApiOperation(value = "Creates a new Table44 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table44 createTable44(@RequestBody Table44 table44) {
		LOGGER.debug("Create Table44 with information: {}" , table44);

		table44 = table44Service.create(table44);
		LOGGER.debug("Created Table44 with information: {}" , table44);

	    return table44;
	}


    @ApiOperation(value = "Returns the Table44 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table44 getTable44(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table44 with id: {}" , id);

        Table44 foundTable44 = table44Service.getById(id);
        LOGGER.debug("Table44 details with id: {}" , foundTable44);

        return foundTable44;
    }

    @ApiOperation(value = "Updates the Table44 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table44 editTable44(@PathVariable("id") Integer id, @RequestBody Table44 table44) throws EntityNotFoundException {
        LOGGER.debug("Editing Table44 with id: {}" , table44.getId());

        table44.setId(id);
        table44 = table44Service.update(table44);
        LOGGER.debug("Table44 details with id: {}" , table44);

        return table44;
    }

    @ApiOperation(value = "Deletes the Table44 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable44(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table44 with id: {}" , id);

        Table44 deletedTable44 = table44Service.delete(id);

        return deletedTable44 != null;
    }

    /**
     * @deprecated Use {@link #findTable44s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table44 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table44> searchTable44sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table44s list");
        return table44Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table44 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table44> findTable44s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table44s list");
        return table44Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table44 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table44> filterTable44s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table44s list");
        return table44Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable44s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table44Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table44 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable44s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table44s");
		return table44Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable44AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table44Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table44Service instance
	 */
	protected void setTable44Service(Table44Service service) {
		this.table44Service = service;
	}

}

