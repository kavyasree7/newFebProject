/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.viewsdb.Nopk2;
import com.newfebproject.viewsdb.Nopk2Id;
import com.newfebproject.viewsdb.service.Nopk2Service;


/**
 * Controller object for domain model class Nopk2.
 * @see Nopk2
 */
@RestController("viewsdb.Nopk2Controller")
@Api(value = "Nopk2Controller", description = "Exposes APIs to work with Nopk2 resource.")
@RequestMapping("/viewsdb/Nopk2")
public class Nopk2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Nopk2Controller.class);

    @Autowired
	@Qualifier("viewsdb.Nopk2Service")
	private Nopk2Service nopk2Service;

	@ApiOperation(value = "Creates a new Nopk2 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Nopk2 createNopk2(@RequestBody Nopk2 nopk2) {
		LOGGER.debug("Create Nopk2 with information: {}" , nopk2);

		nopk2 = nopk2Service.create(nopk2);
		LOGGER.debug("Created Nopk2 with information: {}" , nopk2);

	    return nopk2;
	}

    @ApiOperation(value = "Returns the Nopk2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nopk2 getNopk2(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2) throws EntityNotFoundException {

        Nopk2Id nopk2Id = new Nopk2Id();
        nopk2Id.setColumn1(column1);
        nopk2Id.setColumn2(column2);

        LOGGER.debug("Getting Nopk2 with id: {}" , nopk2Id);
        Nopk2 nopk2 = nopk2Service.getById(nopk2Id);
        LOGGER.debug("Nopk2 details with id: {}" , nopk2);

        return nopk2;
    }



    @ApiOperation(value = "Updates the Nopk2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Nopk2 editNopk2(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2, @RequestBody Nopk2 nopk2) throws EntityNotFoundException {

        nopk2.setColumn1(column1);
        nopk2.setColumn2(column2);

        LOGGER.debug("Nopk2 details with id is updated with: {}" , nopk2);

        return nopk2Service.update(nopk2);
    }


    @ApiOperation(value = "Deletes the Nopk2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNopk2(@RequestParam("column1") Integer column1,@RequestParam("column2") Integer column2) throws EntityNotFoundException {

        Nopk2Id nopk2Id = new Nopk2Id();
        nopk2Id.setColumn1(column1);
        nopk2Id.setColumn2(column2);

        LOGGER.debug("Deleting Nopk2 with id: {}" , nopk2Id);
        Nopk2 nopk2 = nopk2Service.delete(nopk2Id);

        return nopk2 != null;
    }


    @RequestMapping(value = "/column1/{column1}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Nopk2 with given unique key values.")
    public Nopk2 getByColumn1(@PathVariable("column1") int column1) {
        LOGGER.debug("Getting Nopk2 with uniques key Column1");
        return nopk2Service.getByColumn1(column1);
    }

    /**
     * @deprecated Use {@link #findNopk2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Nopk2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk2> searchNopk2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Nopk2s list");
        return nopk2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nopk2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk2> findNopk2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nopk2s list");
        return nopk2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Nopk2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Nopk2> filterNopk2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Nopk2s list");
        return nopk2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNopk2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return nopk2Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Nopk2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNopk2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Nopk2s");
		return nopk2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNopk2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return nopk2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Nopk2Service instance
	 */
	protected void setNopk2Service(Nopk2Service service) {
		this.nopk2Service = service;
	}

}

