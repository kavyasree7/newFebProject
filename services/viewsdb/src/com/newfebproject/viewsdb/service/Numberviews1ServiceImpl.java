/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Numberviews1;
import com.newfebproject.viewsdb.Numberviews1Id;


/**
 * ServiceImpl object for domain model class Numberviews1.
 *
 * @see Numberviews1
 */
@Service("viewsdb.Numberviews1Service")
public class Numberviews1ServiceImpl implements Numberviews1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Numberviews1ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Numberviews1Dao")
    private WMGenericDao<Numberviews1, Numberviews1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Numberviews1, Numberviews1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Numberviews1 create(Numberviews1 numberviews1) {
        LOGGER.debug("Creating a new Numberviews1 with information: {}", numberviews1);
        Numberviews1 numberviews1Created = this.wmGenericDao.create(numberviews1);
        return numberviews1Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Numberviews1 getById(Numberviews1Id numberviews1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Numberviews1 by id: {}", numberviews1Id);
        Numberviews1 numberviews1 = this.wmGenericDao.findById(numberviews1Id);
        if (numberviews1 == null){
            LOGGER.debug("No Numberviews1 found with id: {}", numberviews1Id);
            throw new EntityNotFoundException(String.valueOf(numberviews1Id));
        }
        return numberviews1;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Numberviews1 findById(Numberviews1Id numberviews1Id) {
        LOGGER.debug("Finding Numberviews1 by id: {}", numberviews1Id);
        return this.wmGenericDao.findById(numberviews1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Numberviews1 update(Numberviews1 numberviews1) throws EntityNotFoundException {
        LOGGER.debug("Updating Numberviews1 with information: {}", numberviews1);
        this.wmGenericDao.update(numberviews1);

        Numberviews1Id numberviews1Id = new Numberviews1Id();
        numberviews1Id.setId(numberviews1.getId());
        numberviews1Id.setIntegerCol(numberviews1.getIntegerCol());
        numberviews1Id.setShortCol(numberviews1.getShortCol());
        numberviews1Id.setLongCol(numberviews1.getLongCol());
        numberviews1Id.setBigintegerCol(numberviews1.getBigintegerCol());
        numberviews1Id.setByteCol(numberviews1.getByteCol());
        numberviews1Id.setFloatCol(numberviews1.getFloatCol());
        numberviews1Id.setDoubleCol(numberviews1.getDoubleCol());

        return this.wmGenericDao.findById(numberviews1Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Numberviews1 delete(Numberviews1Id numberviews1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Numberviews1 with id: {}", numberviews1Id);
        Numberviews1 deleted = this.wmGenericDao.findById(numberviews1Id);
        if (deleted == null) {
            LOGGER.debug("No Numberviews1 found with id: {}", numberviews1Id);
            throw new EntityNotFoundException(String.valueOf(numberviews1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Numberviews1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Numberviews1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Numberviews1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Numberviews1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Numberviews1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

