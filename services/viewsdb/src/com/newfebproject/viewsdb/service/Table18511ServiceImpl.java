/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Table18511;


/**
 * ServiceImpl object for domain model class Table18511.
 *
 * @see Table18511
 */
@Service("viewsdb.Table18511Service")
public class Table18511ServiceImpl implements Table18511Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table18511ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table18511Dao")
    private WMGenericDao<Table18511, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table18511, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table18511 create(Table18511 table18511) {
        LOGGER.debug("Creating a new Table18511 with information: {}", table18511);
        Table18511 table18511Created = this.wmGenericDao.create(table18511);
        return table18511Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table18511 getById(Integer table18511Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table18511 by id: {}", table18511Id);
        Table18511 table18511 = this.wmGenericDao.findById(table18511Id);
        if (table18511 == null){
            LOGGER.debug("No Table18511 found with id: {}", table18511Id);
            throw new EntityNotFoundException(String.valueOf(table18511Id));
        }
        return table18511;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table18511 findById(Integer table18511Id) {
        LOGGER.debug("Finding Table18511 by id: {}", table18511Id);
        return this.wmGenericDao.findById(table18511Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table18511 update(Table18511 table18511) throws EntityNotFoundException {
        LOGGER.debug("Updating Table18511 with information: {}", table18511);
        this.wmGenericDao.update(table18511);

        Integer table18511Id = table18511.getId();

        return this.wmGenericDao.findById(table18511Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table18511 delete(Integer table18511Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table18511 with id: {}", table18511Id);
        Table18511 deleted = this.wmGenericDao.findById(table18511Id);
        if (deleted == null) {
            LOGGER.debug("No Table18511 found with id: {}", table18511Id);
            throw new EntityNotFoundException(String.valueOf(table18511Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table18511> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table18511s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table18511> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table18511s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table18511 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

