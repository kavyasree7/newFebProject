/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.NewTable1;


/**
 * ServiceImpl object for domain model class NewTable1.
 *
 * @see NewTable1
 */
@Service("viewsdb.NewTable1Service")
public class NewTable1ServiceImpl implements NewTable1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(NewTable1ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.NewTable1Dao")
    private WMGenericDao<NewTable1, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<NewTable1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public NewTable1 create(NewTable1 newTable1) {
        LOGGER.debug("Creating a new NewTable1 with information: {}", newTable1);
        NewTable1 newTable1Created = this.wmGenericDao.create(newTable1);
        return newTable1Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public NewTable1 getById(Integer newtable1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding NewTable1 by id: {}", newtable1Id);
        NewTable1 newTable1 = this.wmGenericDao.findById(newtable1Id);
        if (newTable1 == null){
            LOGGER.debug("No NewTable1 found with id: {}", newtable1Id);
            throw new EntityNotFoundException(String.valueOf(newtable1Id));
        }
        return newTable1;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public NewTable1 findById(Integer newtable1Id) {
        LOGGER.debug("Finding NewTable1 by id: {}", newtable1Id);
        return this.wmGenericDao.findById(newtable1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public NewTable1 update(NewTable1 newTable1) throws EntityNotFoundException {
        LOGGER.debug("Updating NewTable1 with information: {}", newTable1);
        this.wmGenericDao.update(newTable1);

        Integer newtable1Id = newTable1.getId();

        return this.wmGenericDao.findById(newtable1Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public NewTable1 delete(Integer newtable1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting NewTable1 with id: {}", newtable1Id);
        NewTable1 deleted = this.wmGenericDao.findById(newtable1Id);
        if (deleted == null) {
            LOGGER.debug("No NewTable1 found with id: {}", newtable1Id);
            throw new EntityNotFoundException(String.valueOf(newtable1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<NewTable1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NewTable1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<NewTable1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NewTable1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table NewTable1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

