/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.NumericView;
import com.newfebproject.viewsdb.NumericViewId;


/**
 * ServiceImpl object for domain model class NumericView.
 *
 * @see NumericView
 */
@Service("viewsdb.NumericViewService")
public class NumericViewServiceImpl implements NumericViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NumericViewServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.NumericViewDao")
    private WMGenericDao<NumericView, NumericViewId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<NumericView, NumericViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public NumericView create(NumericView numericView) {
        LOGGER.debug("Creating a new NumericView with information: {}", numericView);
        NumericView numericViewCreated = this.wmGenericDao.create(numericView);
        return numericViewCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public NumericView getById(NumericViewId numericviewId) throws EntityNotFoundException {
        LOGGER.debug("Finding NumericView by id: {}", numericviewId);
        NumericView numericView = this.wmGenericDao.findById(numericviewId);
        if (numericView == null){
            LOGGER.debug("No NumericView found with id: {}", numericviewId);
            throw new EntityNotFoundException(String.valueOf(numericviewId));
        }
        return numericView;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public NumericView findById(NumericViewId numericviewId) {
        LOGGER.debug("Finding NumericView by id: {}", numericviewId);
        return this.wmGenericDao.findById(numericviewId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public NumericView update(NumericView numericView) throws EntityNotFoundException {
        LOGGER.debug("Updating NumericView with information: {}", numericView);
        this.wmGenericDao.update(numericView);

        NumericViewId numericviewId = new NumericViewId();
        numericviewId.setUserid(numericView.getUserid());
        numericviewId.setUsername(numericView.getUsername());
        numericviewId.setPassword(numericView.getPassword());
        numericviewId.setRole(numericView.getRole());

        return this.wmGenericDao.findById(numericviewId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public NumericView delete(NumericViewId numericviewId) throws EntityNotFoundException {
        LOGGER.debug("Deleting NumericView with id: {}", numericviewId);
        NumericView deleted = this.wmGenericDao.findById(numericviewId);
        if (deleted == null) {
            LOGGER.debug("No NumericView found with id: {}", numericviewId);
            throw new EntityNotFoundException(String.valueOf(numericviewId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<NumericView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NumericViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<NumericView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NumericViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table NumericView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

