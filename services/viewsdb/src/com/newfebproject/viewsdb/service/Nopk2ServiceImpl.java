/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Nopk2;
import com.newfebproject.viewsdb.Nopk2Id;


/**
 * ServiceImpl object for domain model class Nopk2.
 *
 * @see Nopk2
 */
@Service("viewsdb.Nopk2Service")
public class Nopk2ServiceImpl implements Nopk2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Nopk2ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Nopk2Dao")
    private WMGenericDao<Nopk2, Nopk2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Nopk2, Nopk2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Nopk2 create(Nopk2 nopk2) {
        LOGGER.debug("Creating a new Nopk2 with information: {}", nopk2);
        Nopk2 nopk2Created = this.wmGenericDao.create(nopk2);
        return nopk2Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Nopk2 getById(Nopk2Id nopk2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Nopk2 by id: {}", nopk2Id);
        Nopk2 nopk2 = this.wmGenericDao.findById(nopk2Id);
        if (nopk2 == null){
            LOGGER.debug("No Nopk2 found with id: {}", nopk2Id);
            throw new EntityNotFoundException(String.valueOf(nopk2Id));
        }
        return nopk2;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Nopk2 findById(Nopk2Id nopk2Id) {
        LOGGER.debug("Finding Nopk2 by id: {}", nopk2Id);
        return this.wmGenericDao.findById(nopk2Id);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Nopk2 getByColumn1(int column1) {
        Map<String, Object> column1Map = new HashMap<>();
        column1Map.put("column1", column1);

        LOGGER.debug("Finding Nopk2 by unique keys: {}", column1Map);
        Nopk2 nopk2 = this.wmGenericDao.findByUniqueKey(column1Map);

        if (nopk2 == null){
            LOGGER.debug("No Nopk2 found with given unique key values: {}", column1Map);
            throw new EntityNotFoundException(String.valueOf(column1Map));
        }

        return nopk2;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Nopk2 update(Nopk2 nopk2) throws EntityNotFoundException {
        LOGGER.debug("Updating Nopk2 with information: {}", nopk2);
        this.wmGenericDao.update(nopk2);

        Nopk2Id nopk2Id = new Nopk2Id();
        nopk2Id.setColumn1(nopk2.getColumn1());
        nopk2Id.setColumn2(nopk2.getColumn2());

        return this.wmGenericDao.findById(nopk2Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Nopk2 delete(Nopk2Id nopk2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Nopk2 with id: {}", nopk2Id);
        Nopk2 deleted = this.wmGenericDao.findById(nopk2Id);
        if (deleted == null) {
            LOGGER.debug("No Nopk2 found with id: {}", nopk2Id);
            throw new EntityNotFoundException(String.valueOf(nopk2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Nopk2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Nopk2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Nopk2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Nopk2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Nopk2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

