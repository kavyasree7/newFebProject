/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Table35;


/**
 * ServiceImpl object for domain model class Table35.
 *
 * @see Table35
 */
@Service("viewsdb.Table35Service")
public class Table35ServiceImpl implements Table35Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table35ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table35Dao")
    private WMGenericDao<Table35, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table35, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table35 create(Table35 table35) {
        LOGGER.debug("Creating a new Table35 with information: {}", table35);
        Table35 table35Created = this.wmGenericDao.create(table35);
        return table35Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table35 getById(Integer table35Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table35 by id: {}", table35Id);
        Table35 table35 = this.wmGenericDao.findById(table35Id);
        if (table35 == null){
            LOGGER.debug("No Table35 found with id: {}", table35Id);
            throw new EntityNotFoundException(String.valueOf(table35Id));
        }
        return table35;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table35 findById(Integer table35Id) {
        LOGGER.debug("Finding Table35 by id: {}", table35Id);
        return this.wmGenericDao.findById(table35Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table35 update(Table35 table35) throws EntityNotFoundException {
        LOGGER.debug("Updating Table35 with information: {}", table35);
        this.wmGenericDao.update(table35);

        Integer table35Id = table35.getId();

        return this.wmGenericDao.findById(table35Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table35 delete(Integer table35Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table35 with id: {}", table35Id);
        Table35 deleted = this.wmGenericDao.findById(table35Id);
        if (deleted == null) {
            LOGGER.debug("No Table35 found with id: {}", table35Id);
            throw new EntityNotFoundException(String.valueOf(table35Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table35> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table35s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table35> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table35s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table35 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

