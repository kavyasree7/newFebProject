/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Tableupdate;

/**
 * Service object for domain model class {@link Tableupdate}.
 */
public interface TableupdateService {

    /**
     * Creates a new Tableupdate. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Tableupdate if any.
     *
     * @param tableupdate Details of the Tableupdate to be created; value cannot be null.
     * @return The newly created Tableupdate.
     */
	Tableupdate create(Tableupdate tableupdate);


	/**
	 * Returns Tableupdate by given id if exists.
	 *
	 * @param tableupdateId The id of the Tableupdate to get; value cannot be null.
	 * @return Tableupdate associated with the given tableupdateId.
     * @throws EntityNotFoundException If no Tableupdate is found.
	 */
	Tableupdate getById(Short tableupdateId) throws EntityNotFoundException;

    /**
	 * Find and return the Tableupdate by given id if exists, returns null otherwise.
	 *
	 * @param tableupdateId The id of the Tableupdate to get; value cannot be null.
	 * @return Tableupdate associated with the given tableupdateId.
	 */
	Tableupdate findById(Short tableupdateId);


	/**
	 * Updates the details of an existing Tableupdate. It replaces all fields of the existing Tableupdate with the given tableupdate.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Tableupdate if any.
     *
	 * @param tableupdate The details of the Tableupdate to be updated; value cannot be null.
	 * @return The updated Tableupdate.
	 * @throws EntityNotFoundException if no Tableupdate is found with given input.
	 */
	Tableupdate update(Tableupdate tableupdate) throws EntityNotFoundException;

    /**
	 * Deletes an existing Tableupdate with the given id.
	 *
	 * @param tableupdateId The id of the Tableupdate to be deleted; value cannot be null.
	 * @return The deleted Tableupdate.
	 * @throws EntityNotFoundException if no Tableupdate found with the given id.
	 */
	Tableupdate delete(Short tableupdateId) throws EntityNotFoundException;

	/**
	 * Find all Tableupdates matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Tableupdates.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Tableupdate> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Tableupdates matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Tableupdates.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Tableupdate> findAll(String query, Pageable pageable);

    /**
	 * Exports all Tableupdates matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Tableupdates in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Tableupdate.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

