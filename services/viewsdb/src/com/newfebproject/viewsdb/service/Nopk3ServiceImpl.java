/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Nopk3;


/**
 * ServiceImpl object for domain model class Nopk3.
 *
 * @see Nopk3
 */
@Service("viewsdb.Nopk3Service")
public class Nopk3ServiceImpl implements Nopk3Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Nopk3ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Nopk3Dao")
    private WMGenericDao<Nopk3, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Nopk3, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Nopk3 create(Nopk3 nopk3) {
        LOGGER.debug("Creating a new Nopk3 with information: {}", nopk3);
        Nopk3 nopk3Created = this.wmGenericDao.create(nopk3);
        return nopk3Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Nopk3 getById(Integer nopk3Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Nopk3 by id: {}", nopk3Id);
        Nopk3 nopk3 = this.wmGenericDao.findById(nopk3Id);
        if (nopk3 == null){
            LOGGER.debug("No Nopk3 found with id: {}", nopk3Id);
            throw new EntityNotFoundException(String.valueOf(nopk3Id));
        }
        return nopk3;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Nopk3 findById(Integer nopk3Id) {
        LOGGER.debug("Finding Nopk3 by id: {}", nopk3Id);
        return this.wmGenericDao.findById(nopk3Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Nopk3 update(Nopk3 nopk3) throws EntityNotFoundException {
        LOGGER.debug("Updating Nopk3 with information: {}", nopk3);
        this.wmGenericDao.update(nopk3);

        Integer nopk3Id = nopk3.getColumn1();

        return this.wmGenericDao.findById(nopk3Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Nopk3 delete(Integer nopk3Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Nopk3 with id: {}", nopk3Id);
        Nopk3 deleted = this.wmGenericDao.findById(nopk3Id);
        if (deleted == null) {
            LOGGER.debug("No Nopk3 found with id: {}", nopk3Id);
            throw new EntityNotFoundException(String.valueOf(nopk3Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Nopk3> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Nopk3s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Nopk3> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Nopk3s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Nopk3 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

