/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Usersinteger;


/**
 * ServiceImpl object for domain model class Usersinteger.
 *
 * @see Usersinteger
 */
@Service("viewsdb.UsersintegerService")
public class UsersintegerServiceImpl implements UsersintegerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersintegerServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.UsersintegerDao")
    private WMGenericDao<Usersinteger, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Usersinteger, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Usersinteger create(Usersinteger usersinteger) {
        LOGGER.debug("Creating a new Usersinteger with information: {}", usersinteger);
        Usersinteger usersintegerCreated = this.wmGenericDao.create(usersinteger);
        return usersintegerCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Usersinteger getById(Integer usersintegerId) throws EntityNotFoundException {
        LOGGER.debug("Finding Usersinteger by id: {}", usersintegerId);
        Usersinteger usersinteger = this.wmGenericDao.findById(usersintegerId);
        if (usersinteger == null){
            LOGGER.debug("No Usersinteger found with id: {}", usersintegerId);
            throw new EntityNotFoundException(String.valueOf(usersintegerId));
        }
        return usersinteger;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Usersinteger findById(Integer usersintegerId) {
        LOGGER.debug("Finding Usersinteger by id: {}", usersintegerId);
        return this.wmGenericDao.findById(usersintegerId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Usersinteger update(Usersinteger usersinteger) throws EntityNotFoundException {
        LOGGER.debug("Updating Usersinteger with information: {}", usersinteger);
        this.wmGenericDao.update(usersinteger);

        Integer usersintegerId = usersinteger.getUserid();

        return this.wmGenericDao.findById(usersintegerId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Usersinteger delete(Integer usersintegerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Usersinteger with id: {}", usersintegerId);
        Usersinteger deleted = this.wmGenericDao.findById(usersintegerId);
        if (deleted == null) {
            LOGGER.debug("No Usersinteger found with id: {}", usersintegerId);
            throw new EntityNotFoundException(String.valueOf(usersintegerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Usersinteger> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Usersintegers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Usersinteger> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Usersintegers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Usersinteger to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

