/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Table46;


/**
 * ServiceImpl object for domain model class Table46.
 *
 * @see Table46
 */
@Service("viewsdb.Table46Service")
public class Table46ServiceImpl implements Table46Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table46ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table46Dao")
    private WMGenericDao<Table46, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table46, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table46 create(Table46 table46) {
        LOGGER.debug("Creating a new Table46 with information: {}", table46);
        Table46 table46Created = this.wmGenericDao.create(table46);
        return table46Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table46 getById(Integer table46Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table46 by id: {}", table46Id);
        Table46 table46 = this.wmGenericDao.findById(table46Id);
        if (table46 == null){
            LOGGER.debug("No Table46 found with id: {}", table46Id);
            throw new EntityNotFoundException(String.valueOf(table46Id));
        }
        return table46;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table46 findById(Integer table46Id) {
        LOGGER.debug("Finding Table46 by id: {}", table46Id);
        return this.wmGenericDao.findById(table46Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table46 update(Table46 table46) throws EntityNotFoundException {
        LOGGER.debug("Updating Table46 with information: {}", table46);
        this.wmGenericDao.update(table46);

        Integer table46Id = table46.getId();

        return this.wmGenericDao.findById(table46Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table46 delete(Integer table46Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table46 with id: {}", table46Id);
        Table46 deleted = this.wmGenericDao.findById(table46Id);
        if (deleted == null) {
            LOGGER.debug("No Table46 found with id: {}", table46Id);
            throw new EntityNotFoundException(String.valueOf(table46Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table46> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table46s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table46> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table46s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table46 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

