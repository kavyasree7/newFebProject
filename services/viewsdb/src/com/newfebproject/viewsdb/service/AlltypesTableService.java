/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.AlltypesTable;

/**
 * Service object for domain model class {@link AlltypesTable}.
 */
public interface AlltypesTableService {

    /**
     * Creates a new AlltypesTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AlltypesTable if any.
     *
     * @param alltypesTable Details of the AlltypesTable to be created; value cannot be null.
     * @return The newly created AlltypesTable.
     */
	AlltypesTable create(AlltypesTable alltypesTable);


	/**
	 * Returns AlltypesTable by given id if exists.
	 *
	 * @param alltypestableId The id of the AlltypesTable to get; value cannot be null.
	 * @return AlltypesTable associated with the given alltypestableId.
     * @throws EntityNotFoundException If no AlltypesTable is found.
	 */
	AlltypesTable getById(Integer alltypestableId) throws EntityNotFoundException;

    /**
	 * Find and return the AlltypesTable by given id if exists, returns null otherwise.
	 *
	 * @param alltypestableId The id of the AlltypesTable to get; value cannot be null.
	 * @return AlltypesTable associated with the given alltypestableId.
	 */
	AlltypesTable findById(Integer alltypestableId);


	/**
	 * Updates the details of an existing AlltypesTable. It replaces all fields of the existing AlltypesTable with the given alltypesTable.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AlltypesTable if any.
     *
	 * @param alltypesTable The details of the AlltypesTable to be updated; value cannot be null.
	 * @return The updated AlltypesTable.
	 * @throws EntityNotFoundException if no AlltypesTable is found with given input.
	 */
	AlltypesTable update(AlltypesTable alltypesTable) throws EntityNotFoundException;

    /**
	 * Deletes an existing AlltypesTable with the given id.
	 *
	 * @param alltypestableId The id of the AlltypesTable to be deleted; value cannot be null.
	 * @return The deleted AlltypesTable.
	 * @throws EntityNotFoundException if no AlltypesTable found with the given id.
	 */
	AlltypesTable delete(Integer alltypestableId) throws EntityNotFoundException;

	/**
	 * Find all AlltypesTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AlltypesTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AlltypesTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AlltypesTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AlltypesTables.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AlltypesTable> findAll(String query, Pageable pageable);

    /**
	 * Exports all AlltypesTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AlltypesTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AlltypesTable.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

