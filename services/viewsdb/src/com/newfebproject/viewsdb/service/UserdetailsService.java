/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Userdetails;

/**
 * Service object for domain model class {@link Userdetails}.
 */
public interface UserdetailsService {

    /**
     * Creates a new Userdetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Userdetails if any.
     *
     * @param userdetails Details of the Userdetails to be created; value cannot be null.
     * @return The newly created Userdetails.
     */
	Userdetails create(Userdetails userdetails);


	/**
	 * Returns Userdetails by given id if exists.
	 *
	 * @param userdetailsId The id of the Userdetails to get; value cannot be null.
	 * @return Userdetails associated with the given userdetailsId.
     * @throws EntityNotFoundException If no Userdetails is found.
	 */
	Userdetails getById(Integer userdetailsId) throws EntityNotFoundException;

    /**
	 * Find and return the Userdetails by given id if exists, returns null otherwise.
	 *
	 * @param userdetailsId The id of the Userdetails to get; value cannot be null.
	 * @return Userdetails associated with the given userdetailsId.
	 */
	Userdetails findById(Integer userdetailsId);


	/**
	 * Updates the details of an existing Userdetails. It replaces all fields of the existing Userdetails with the given userdetails.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Userdetails if any.
     *
	 * @param userdetails The details of the Userdetails to be updated; value cannot be null.
	 * @return The updated Userdetails.
	 * @throws EntityNotFoundException if no Userdetails is found with given input.
	 */
	Userdetails update(Userdetails userdetails) throws EntityNotFoundException;

    /**
	 * Deletes an existing Userdetails with the given id.
	 *
	 * @param userdetailsId The id of the Userdetails to be deleted; value cannot be null.
	 * @return The deleted Userdetails.
	 * @throws EntityNotFoundException if no Userdetails found with the given id.
	 */
	Userdetails delete(Integer userdetailsId) throws EntityNotFoundException;

	/**
	 * Find all Userdetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Userdetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Userdetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Userdetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Userdetails.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Userdetails> findAll(String query, Pageable pageable);

    /**
	 * Exports all Userdetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Userdetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Userdetails.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

