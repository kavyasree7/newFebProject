/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.DateTimeTypes;


/**
 * ServiceImpl object for domain model class DateTimeTypes.
 *
 * @see DateTimeTypes
 */
@Service("viewsdb.DateTimeTypesService")
public class DateTimeTypesServiceImpl implements DateTimeTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateTimeTypesServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.DateTimeTypesDao")
    private WMGenericDao<DateTimeTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DateTimeTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public DateTimeTypes create(DateTimeTypes dateTimeTypes) {
        LOGGER.debug("Creating a new DateTimeTypes with information: {}", dateTimeTypes);
        DateTimeTypes dateTimeTypesCreated = this.wmGenericDao.create(dateTimeTypes);
        return dateTimeTypesCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public DateTimeTypes getById(Integer datetimetypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding DateTimeTypes by id: {}", datetimetypesId);
        DateTimeTypes dateTimeTypes = this.wmGenericDao.findById(datetimetypesId);
        if (dateTimeTypes == null){
            LOGGER.debug("No DateTimeTypes found with id: {}", datetimetypesId);
            throw new EntityNotFoundException(String.valueOf(datetimetypesId));
        }
        return dateTimeTypes;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public DateTimeTypes findById(Integer datetimetypesId) {
        LOGGER.debug("Finding DateTimeTypes by id: {}", datetimetypesId);
        return this.wmGenericDao.findById(datetimetypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public DateTimeTypes update(DateTimeTypes dateTimeTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating DateTimeTypes with information: {}", dateTimeTypes);
        this.wmGenericDao.update(dateTimeTypes);

        Integer datetimetypesId = dateTimeTypes.getId();

        return this.wmGenericDao.findById(datetimetypesId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public DateTimeTypes delete(Integer datetimetypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DateTimeTypes with id: {}", datetimetypesId);
        DateTimeTypes deleted = this.wmGenericDao.findById(datetimetypesId);
        if (deleted == null) {
            LOGGER.debug("No DateTimeTypes found with id: {}", datetimetypesId);
            throw new EntityNotFoundException(String.valueOf(datetimetypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<DateTimeTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DateTimeTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<DateTimeTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DateTimeTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table DateTimeTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

