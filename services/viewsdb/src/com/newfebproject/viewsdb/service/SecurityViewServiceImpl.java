/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.SecurityView;
import com.newfebproject.viewsdb.SecurityViewId;


/**
 * ServiceImpl object for domain model class SecurityView.
 *
 * @see SecurityView
 */
@Service("viewsdb.SecurityViewService")
public class SecurityViewServiceImpl implements SecurityViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SecurityViewServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.SecurityViewDao")
    private WMGenericDao<SecurityView, SecurityViewId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SecurityView, SecurityViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public SecurityView create(SecurityView securityView) {
        LOGGER.debug("Creating a new SecurityView with information: {}", securityView);
        SecurityView securityViewCreated = this.wmGenericDao.create(securityView);
        return securityViewCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public SecurityView getById(SecurityViewId securityviewId) throws EntityNotFoundException {
        LOGGER.debug("Finding SecurityView by id: {}", securityviewId);
        SecurityView securityView = this.wmGenericDao.findById(securityviewId);
        if (securityView == null){
            LOGGER.debug("No SecurityView found with id: {}", securityviewId);
            throw new EntityNotFoundException(String.valueOf(securityviewId));
        }
        return securityView;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public SecurityView findById(SecurityViewId securityviewId) {
        LOGGER.debug("Finding SecurityView by id: {}", securityviewId);
        return this.wmGenericDao.findById(securityviewId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public SecurityView update(SecurityView securityView) throws EntityNotFoundException {
        LOGGER.debug("Updating SecurityView with information: {}", securityView);
        this.wmGenericDao.update(securityView);

        SecurityViewId securityviewId = new SecurityViewId();
        securityviewId.setUserId(securityView.getUserId());
        securityviewId.setPassword(securityView.getPassword());
        securityviewId.setRole(securityView.getRole());
        securityviewId.setUserName(securityView.getUserName());

        return this.wmGenericDao.findById(securityviewId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public SecurityView delete(SecurityViewId securityviewId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SecurityView with id: {}", securityviewId);
        SecurityView deleted = this.wmGenericDao.findById(securityviewId);
        if (deleted == null) {
            LOGGER.debug("No SecurityView found with id: {}", securityviewId);
            throw new EntityNotFoundException(String.valueOf(securityviewId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<SecurityView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SecurityViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<SecurityView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SecurityViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table SecurityView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

