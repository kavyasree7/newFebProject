/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.SecurityView;
import com.newfebproject.viewsdb.SecurityViewId;

/**
 * Service object for domain model class {@link SecurityView}.
 */
public interface SecurityViewService {

    /**
     * Creates a new SecurityView. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SecurityView if any.
     *
     * @param securityView Details of the SecurityView to be created; value cannot be null.
     * @return The newly created SecurityView.
     */
	SecurityView create(SecurityView securityView);


	/**
	 * Returns SecurityView by given id if exists.
	 *
	 * @param securityviewId The id of the SecurityView to get; value cannot be null.
	 * @return SecurityView associated with the given securityviewId.
     * @throws EntityNotFoundException If no SecurityView is found.
	 */
	SecurityView getById(SecurityViewId securityviewId) throws EntityNotFoundException;

    /**
	 * Find and return the SecurityView by given id if exists, returns null otherwise.
	 *
	 * @param securityviewId The id of the SecurityView to get; value cannot be null.
	 * @return SecurityView associated with the given securityviewId.
	 */
	SecurityView findById(SecurityViewId securityviewId);


	/**
	 * Updates the details of an existing SecurityView. It replaces all fields of the existing SecurityView with the given securityView.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on SecurityView if any.
     *
	 * @param securityView The details of the SecurityView to be updated; value cannot be null.
	 * @return The updated SecurityView.
	 * @throws EntityNotFoundException if no SecurityView is found with given input.
	 */
	SecurityView update(SecurityView securityView) throws EntityNotFoundException;

    /**
	 * Deletes an existing SecurityView with the given id.
	 *
	 * @param securityviewId The id of the SecurityView to be deleted; value cannot be null.
	 * @return The deleted SecurityView.
	 * @throws EntityNotFoundException if no SecurityView found with the given id.
	 */
	SecurityView delete(SecurityViewId securityviewId) throws EntityNotFoundException;

	/**
	 * Find all SecurityViews matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SecurityViews.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<SecurityView> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all SecurityViews matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SecurityViews.
     *
     * @see Pageable
     * @see Page
	 */
    Page<SecurityView> findAll(String query, Pageable pageable);

    /**
	 * Exports all SecurityViews matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the SecurityViews in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the SecurityView.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

