/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Table133;


/**
 * ServiceImpl object for domain model class Table133.
 *
 * @see Table133
 */
@Service("viewsdb.Table133Service")
public class Table133ServiceImpl implements Table133Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table133ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table133Dao")
    private WMGenericDao<Table133, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table133, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table133 create(Table133 table133) {
        LOGGER.debug("Creating a new Table133 with information: {}", table133);
        Table133 table133Created = this.wmGenericDao.create(table133);
        return table133Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table133 getById(Short table133Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table133 by id: {}", table133Id);
        Table133 table133 = this.wmGenericDao.findById(table133Id);
        if (table133 == null){
            LOGGER.debug("No Table133 found with id: {}", table133Id);
            throw new EntityNotFoundException(String.valueOf(table133Id));
        }
        return table133;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table133 findById(Short table133Id) {
        LOGGER.debug("Finding Table133 by id: {}", table133Id);
        return this.wmGenericDao.findById(table133Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table133 update(Table133 table133) throws EntityNotFoundException {
        LOGGER.debug("Updating Table133 with information: {}", table133);
        this.wmGenericDao.update(table133);

        Short table133Id = table133.getIdColumn();

        return this.wmGenericDao.findById(table133Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table133 delete(Short table133Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table133 with id: {}", table133Id);
        Table133 deleted = this.wmGenericDao.findById(table133Id);
        if (deleted == null) {
            LOGGER.debug("No Table133 found with id: {}", table133Id);
            throw new EntityNotFoundException(String.valueOf(table133Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table133> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table133s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table133> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table133s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table133 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

