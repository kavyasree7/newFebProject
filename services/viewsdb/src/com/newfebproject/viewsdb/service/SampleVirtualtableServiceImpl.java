/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.SampleVirtualtable;
import com.newfebproject.viewsdb.SampleVirtualtableId;


/**
 * ServiceImpl object for domain model class SampleVirtualtable.
 *
 * @see SampleVirtualtable
 */
@Service("viewsdb.SampleVirtualtableService")
public class SampleVirtualtableServiceImpl implements SampleVirtualtableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SampleVirtualtableServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.SampleVirtualtableDao")
    private WMGenericDao<SampleVirtualtable, SampleVirtualtableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SampleVirtualtable, SampleVirtualtableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public SampleVirtualtable create(SampleVirtualtable sampleVirtualtable) {
        LOGGER.debug("Creating a new SampleVirtualtable with information: {}", sampleVirtualtable);
        SampleVirtualtable sampleVirtualtableCreated = this.wmGenericDao.create(sampleVirtualtable);
        return sampleVirtualtableCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public SampleVirtualtable getById(SampleVirtualtableId samplevirtualtableId) throws EntityNotFoundException {
        LOGGER.debug("Finding SampleVirtualtable by id: {}", samplevirtualtableId);
        SampleVirtualtable sampleVirtualtable = this.wmGenericDao.findById(samplevirtualtableId);
        if (sampleVirtualtable == null){
            LOGGER.debug("No SampleVirtualtable found with id: {}", samplevirtualtableId);
            throw new EntityNotFoundException(String.valueOf(samplevirtualtableId));
        }
        return sampleVirtualtable;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public SampleVirtualtable findById(SampleVirtualtableId samplevirtualtableId) {
        LOGGER.debug("Finding SampleVirtualtable by id: {}", samplevirtualtableId);
        return this.wmGenericDao.findById(samplevirtualtableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public SampleVirtualtable update(SampleVirtualtable sampleVirtualtable) throws EntityNotFoundException {
        LOGGER.debug("Updating SampleVirtualtable with information: {}", sampleVirtualtable);
        this.wmGenericDao.update(sampleVirtualtable);

        SampleVirtualtableId samplevirtualtableId = new SampleVirtualtableId();
        samplevirtualtableId.setName(sampleVirtualtable.getName());
        samplevirtualtableId.setColumn(sampleVirtualtable.getColumn());
        samplevirtualtableId.setColumn4(sampleVirtualtable.getColumn4());
        samplevirtualtableId.setId(sampleVirtualtable.getId());

        return this.wmGenericDao.findById(samplevirtualtableId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public SampleVirtualtable delete(SampleVirtualtableId samplevirtualtableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting SampleVirtualtable with id: {}", samplevirtualtableId);
        SampleVirtualtable deleted = this.wmGenericDao.findById(samplevirtualtableId);
        if (deleted == null) {
            LOGGER.debug("No SampleVirtualtable found with id: {}", samplevirtualtableId);
            throw new EntityNotFoundException(String.valueOf(samplevirtualtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<SampleVirtualtable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SampleVirtualtables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<SampleVirtualtable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SampleVirtualtables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table SampleVirtualtable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

