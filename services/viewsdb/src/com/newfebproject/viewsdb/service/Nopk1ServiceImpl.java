/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Nopk1;
import com.newfebproject.viewsdb.Nopk1Id;


/**
 * ServiceImpl object for domain model class Nopk1.
 *
 * @see Nopk1
 */
@Service("viewsdb.Nopk1Service")
public class Nopk1ServiceImpl implements Nopk1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Nopk1ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Nopk1Dao")
    private WMGenericDao<Nopk1, Nopk1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Nopk1, Nopk1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Nopk1 create(Nopk1 nopk1) {
        LOGGER.debug("Creating a new Nopk1 with information: {}", nopk1);
        Nopk1 nopk1Created = this.wmGenericDao.create(nopk1);
        return nopk1Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Nopk1 getById(Nopk1Id nopk1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Nopk1 by id: {}", nopk1Id);
        Nopk1 nopk1 = this.wmGenericDao.findById(nopk1Id);
        if (nopk1 == null){
            LOGGER.debug("No Nopk1 found with id: {}", nopk1Id);
            throw new EntityNotFoundException(String.valueOf(nopk1Id));
        }
        return nopk1;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Nopk1 findById(Nopk1Id nopk1Id) {
        LOGGER.debug("Finding Nopk1 by id: {}", nopk1Id);
        return this.wmGenericDao.findById(nopk1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Nopk1 update(Nopk1 nopk1) throws EntityNotFoundException {
        LOGGER.debug("Updating Nopk1 with information: {}", nopk1);
        this.wmGenericDao.update(nopk1);

        Nopk1Id nopk1Id = new Nopk1Id();
        nopk1Id.setColumn1(nopk1.getColumn1());
        nopk1Id.setColumn2(nopk1.getColumn2());

        return this.wmGenericDao.findById(nopk1Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Nopk1 delete(Nopk1Id nopk1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Nopk1 with id: {}", nopk1Id);
        Nopk1 deleted = this.wmGenericDao.findById(nopk1Id);
        if (deleted == null) {
            LOGGER.debug("No Nopk1 found with id: {}", nopk1Id);
            throw new EntityNotFoundException(String.valueOf(nopk1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Nopk1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Nopk1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Nopk1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Nopk1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Nopk1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

