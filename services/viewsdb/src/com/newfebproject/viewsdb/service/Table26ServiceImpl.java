/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Table26;


/**
 * ServiceImpl object for domain model class Table26.
 *
 * @see Table26
 */
@Service("viewsdb.Table26Service")
public class Table26ServiceImpl implements Table26Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table26ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Table26Dao")
    private WMGenericDao<Table26, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table26, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Table26 create(Table26 table26) {
        LOGGER.debug("Creating a new Table26 with information: {}", table26);
        Table26 table26Created = this.wmGenericDao.create(table26);
        return table26Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table26 getById(Integer table26Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table26 by id: {}", table26Id);
        Table26 table26 = this.wmGenericDao.findById(table26Id);
        if (table26 == null){
            LOGGER.debug("No Table26 found with id: {}", table26Id);
            throw new EntityNotFoundException(String.valueOf(table26Id));
        }
        return table26;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Table26 findById(Integer table26Id) {
        LOGGER.debug("Finding Table26 by id: {}", table26Id);
        return this.wmGenericDao.findById(table26Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Table26 update(Table26 table26) throws EntityNotFoundException {
        LOGGER.debug("Updating Table26 with information: {}", table26);
        this.wmGenericDao.update(table26);

        Integer table26Id = table26.getId();

        return this.wmGenericDao.findById(table26Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Table26 delete(Integer table26Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table26 with id: {}", table26Id);
        Table26 deleted = this.wmGenericDao.findById(table26Id);
        if (deleted == null) {
            LOGGER.debug("No Table26 found with id: {}", table26Id);
            throw new EntityNotFoundException(String.valueOf(table26Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Table26> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table26s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Table26> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table26s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Table26 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

