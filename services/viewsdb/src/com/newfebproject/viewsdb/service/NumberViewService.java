/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.NumberView;
import com.newfebproject.viewsdb.NumberViewId;

/**
 * Service object for domain model class {@link NumberView}.
 */
public interface NumberViewService {

    /**
     * Creates a new NumberView. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NumberView if any.
     *
     * @param numberView Details of the NumberView to be created; value cannot be null.
     * @return The newly created NumberView.
     */
	NumberView create(NumberView numberView);


	/**
	 * Returns NumberView by given id if exists.
	 *
	 * @param numberviewId The id of the NumberView to get; value cannot be null.
	 * @return NumberView associated with the given numberviewId.
     * @throws EntityNotFoundException If no NumberView is found.
	 */
	NumberView getById(NumberViewId numberviewId) throws EntityNotFoundException;

    /**
	 * Find and return the NumberView by given id if exists, returns null otherwise.
	 *
	 * @param numberviewId The id of the NumberView to get; value cannot be null.
	 * @return NumberView associated with the given numberviewId.
	 */
	NumberView findById(NumberViewId numberviewId);


	/**
	 * Updates the details of an existing NumberView. It replaces all fields of the existing NumberView with the given numberView.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on NumberView if any.
     *
	 * @param numberView The details of the NumberView to be updated; value cannot be null.
	 * @return The updated NumberView.
	 * @throws EntityNotFoundException if no NumberView is found with given input.
	 */
	NumberView update(NumberView numberView) throws EntityNotFoundException;

    /**
	 * Deletes an existing NumberView with the given id.
	 *
	 * @param numberviewId The id of the NumberView to be deleted; value cannot be null.
	 * @return The deleted NumberView.
	 * @throws EntityNotFoundException if no NumberView found with the given id.
	 */
	NumberView delete(NumberViewId numberviewId) throws EntityNotFoundException;

	/**
	 * Find all NumberViews matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NumberViews.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<NumberView> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all NumberViews matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NumberViews.
     *
     * @see Pageable
     * @see Page
	 */
    Page<NumberView> findAll(String query, Pageable pageable);

    /**
	 * Exports all NumberViews matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the NumberViews in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the NumberView.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

