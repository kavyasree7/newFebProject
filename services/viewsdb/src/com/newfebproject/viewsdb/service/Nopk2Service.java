/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Nopk2;
import com.newfebproject.viewsdb.Nopk2Id;

/**
 * Service object for domain model class {@link Nopk2}.
 */
public interface Nopk2Service {

    /**
     * Creates a new Nopk2. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Nopk2 if any.
     *
     * @param nopk2 Details of the Nopk2 to be created; value cannot be null.
     * @return The newly created Nopk2.
     */
	Nopk2 create(Nopk2 nopk2);


	/**
	 * Returns Nopk2 by given id if exists.
	 *
	 * @param nopk2Id The id of the Nopk2 to get; value cannot be null.
	 * @return Nopk2 associated with the given nopk2Id.
     * @throws EntityNotFoundException If no Nopk2 is found.
	 */
	Nopk2 getById(Nopk2Id nopk2Id) throws EntityNotFoundException;

    /**
	 * Find and return the Nopk2 by given id if exists, returns null otherwise.
	 *
	 * @param nopk2Id The id of the Nopk2 to get; value cannot be null.
	 * @return Nopk2 associated with the given nopk2Id.
	 */
	Nopk2 findById(Nopk2Id nopk2Id);

    /**
	 * Find and return the Nopk2 for given column1  if exists.
	 *
	 * @param column1 value of column1; value cannot be null.
	 * @return Nopk2 associated with the given inputs.
     * @throws EntityNotFoundException if no matching Nopk2 found.
	 */
    Nopk2 getByColumn1(int column1)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Nopk2. It replaces all fields of the existing Nopk2 with the given nopk2.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Nopk2 if any.
     *
	 * @param nopk2 The details of the Nopk2 to be updated; value cannot be null.
	 * @return The updated Nopk2.
	 * @throws EntityNotFoundException if no Nopk2 is found with given input.
	 */
	Nopk2 update(Nopk2 nopk2) throws EntityNotFoundException;

    /**
	 * Deletes an existing Nopk2 with the given id.
	 *
	 * @param nopk2Id The id of the Nopk2 to be deleted; value cannot be null.
	 * @return The deleted Nopk2.
	 * @throws EntityNotFoundException if no Nopk2 found with the given id.
	 */
	Nopk2 delete(Nopk2Id nopk2Id) throws EntityNotFoundException;

	/**
	 * Find all Nopk2s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Nopk2s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Nopk2> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Nopk2s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Nopk2s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Nopk2> findAll(String query, Pageable pageable);

    /**
	 * Exports all Nopk2s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Nopk2s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Nopk2.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

