/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.UsersStringId;


/**
 * ServiceImpl object for domain model class UsersStringId.
 *
 * @see UsersStringId
 */
@Service("viewsdb.UsersStringIdService")
public class UsersStringIdServiceImpl implements UsersStringIdService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersStringIdServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.UsersStringIdDao")
    private WMGenericDao<UsersStringId, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UsersStringId, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public UsersStringId create(UsersStringId usersStringId) {
        LOGGER.debug("Creating a new UsersStringId with information: {}", usersStringId);
        UsersStringId usersStringIdCreated = this.wmGenericDao.create(usersStringId);
        return usersStringIdCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public UsersStringId getById(String usersstringidId) throws EntityNotFoundException {
        LOGGER.debug("Finding UsersStringId by id: {}", usersstringidId);
        UsersStringId usersStringId = this.wmGenericDao.findById(usersstringidId);
        if (usersStringId == null){
            LOGGER.debug("No UsersStringId found with id: {}", usersstringidId);
            throw new EntityNotFoundException(String.valueOf(usersstringidId));
        }
        return usersStringId;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public UsersStringId findById(String usersstringidId) {
        LOGGER.debug("Finding UsersStringId by id: {}", usersstringidId);
        return this.wmGenericDao.findById(usersstringidId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public UsersStringId update(UsersStringId usersStringId) throws EntityNotFoundException {
        LOGGER.debug("Updating UsersStringId with information: {}", usersStringId);
        this.wmGenericDao.update(usersStringId);

        String usersstringidId = usersStringId.getUserid();

        return this.wmGenericDao.findById(usersstringidId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public UsersStringId delete(String usersstringidId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UsersStringId with id: {}", usersstringidId);
        UsersStringId deleted = this.wmGenericDao.findById(usersstringidId);
        if (deleted == null) {
            LOGGER.debug("No UsersStringId found with id: {}", usersstringidId);
            throw new EntityNotFoundException(String.valueOf(usersstringidId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<UsersStringId> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UsersStringIds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<UsersStringId> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UsersStringIds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table UsersStringId to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

