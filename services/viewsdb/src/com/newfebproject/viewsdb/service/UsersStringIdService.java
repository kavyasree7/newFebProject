/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.UsersStringId;

/**
 * Service object for domain model class {@link UsersStringId}.
 */
public interface UsersStringIdService {

    /**
     * Creates a new UsersStringId. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UsersStringId if any.
     *
     * @param usersStringId Details of the UsersStringId to be created; value cannot be null.
     * @return The newly created UsersStringId.
     */
	UsersStringId create(UsersStringId usersStringId);


	/**
	 * Returns UsersStringId by given id if exists.
	 *
	 * @param usersstringidId The id of the UsersStringId to get; value cannot be null.
	 * @return UsersStringId associated with the given usersstringidId.
     * @throws EntityNotFoundException If no UsersStringId is found.
	 */
	UsersStringId getById(String usersstringidId) throws EntityNotFoundException;

    /**
	 * Find and return the UsersStringId by given id if exists, returns null otherwise.
	 *
	 * @param usersstringidId The id of the UsersStringId to get; value cannot be null.
	 * @return UsersStringId associated with the given usersstringidId.
	 */
	UsersStringId findById(String usersstringidId);


	/**
	 * Updates the details of an existing UsersStringId. It replaces all fields of the existing UsersStringId with the given usersStringId.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on UsersStringId if any.
     *
	 * @param usersStringId The details of the UsersStringId to be updated; value cannot be null.
	 * @return The updated UsersStringId.
	 * @throws EntityNotFoundException if no UsersStringId is found with given input.
	 */
	UsersStringId update(UsersStringId usersStringId) throws EntityNotFoundException;

    /**
	 * Deletes an existing UsersStringId with the given id.
	 *
	 * @param usersstringidId The id of the UsersStringId to be deleted; value cannot be null.
	 * @return The deleted UsersStringId.
	 * @throws EntityNotFoundException if no UsersStringId found with the given id.
	 */
	UsersStringId delete(String usersstringidId) throws EntityNotFoundException;

	/**
	 * Find all UsersStringIds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UsersStringIds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<UsersStringId> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all UsersStringIds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UsersStringIds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<UsersStringId> findAll(String query, Pageable pageable);

    /**
	 * Exports all UsersStringIds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the UsersStringIds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the UsersStringId.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

