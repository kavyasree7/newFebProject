/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.BooleanTestCase;

/**
 * Service object for domain model class {@link BooleanTestCase}.
 */
public interface BooleanTestCaseService {

    /**
     * Creates a new BooleanTestCase. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on BooleanTestCase if any.
     *
     * @param booleanTestCase Details of the BooleanTestCase to be created; value cannot be null.
     * @return The newly created BooleanTestCase.
     */
	BooleanTestCase create(BooleanTestCase booleanTestCase);


	/**
	 * Returns BooleanTestCase by given id if exists.
	 *
	 * @param booleantestcaseId The id of the BooleanTestCase to get; value cannot be null.
	 * @return BooleanTestCase associated with the given booleantestcaseId.
     * @throws EntityNotFoundException If no BooleanTestCase is found.
	 */
	BooleanTestCase getById(Integer booleantestcaseId) throws EntityNotFoundException;

    /**
	 * Find and return the BooleanTestCase by given id if exists, returns null otherwise.
	 *
	 * @param booleantestcaseId The id of the BooleanTestCase to get; value cannot be null.
	 * @return BooleanTestCase associated with the given booleantestcaseId.
	 */
	BooleanTestCase findById(Integer booleantestcaseId);


	/**
	 * Updates the details of an existing BooleanTestCase. It replaces all fields of the existing BooleanTestCase with the given booleanTestCase.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on BooleanTestCase if any.
     *
	 * @param booleanTestCase The details of the BooleanTestCase to be updated; value cannot be null.
	 * @return The updated BooleanTestCase.
	 * @throws EntityNotFoundException if no BooleanTestCase is found with given input.
	 */
	BooleanTestCase update(BooleanTestCase booleanTestCase) throws EntityNotFoundException;

    /**
	 * Deletes an existing BooleanTestCase with the given id.
	 *
	 * @param booleantestcaseId The id of the BooleanTestCase to be deleted; value cannot be null.
	 * @return The deleted BooleanTestCase.
	 * @throws EntityNotFoundException if no BooleanTestCase found with the given id.
	 */
	BooleanTestCase delete(Integer booleantestcaseId) throws EntityNotFoundException;

	/**
	 * Find all BooleanTestCases matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BooleanTestCases.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<BooleanTestCase> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all BooleanTestCases matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching BooleanTestCases.
     *
     * @see Pageable
     * @see Page
	 */
    Page<BooleanTestCase> findAll(String query, Pageable pageable);

    /**
	 * Exports all BooleanTestCases matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the BooleanTestCases in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the BooleanTestCase.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

