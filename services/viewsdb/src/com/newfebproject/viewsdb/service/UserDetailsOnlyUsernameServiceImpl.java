/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.UserDetailsOnlyUsername;


/**
 * ServiceImpl object for domain model class UserDetailsOnlyUsername.
 *
 * @see UserDetailsOnlyUsername
 */
@Service("viewsdb.UserDetailsOnlyUsernameService")
public class UserDetailsOnlyUsernameServiceImpl implements UserDetailsOnlyUsernameService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailsOnlyUsernameServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.UserDetailsOnlyUsernameDao")
    private WMGenericDao<UserDetailsOnlyUsername, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserDetailsOnlyUsername, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public UserDetailsOnlyUsername create(UserDetailsOnlyUsername userDetailsOnlyUsername) {
        LOGGER.debug("Creating a new UserDetailsOnlyUsername with information: {}", userDetailsOnlyUsername);
        UserDetailsOnlyUsername userDetailsOnlyUsernameCreated = this.wmGenericDao.create(userDetailsOnlyUsername);
        return userDetailsOnlyUsernameCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public UserDetailsOnlyUsername getById(String userdetailsonlyusernameId) throws EntityNotFoundException {
        LOGGER.debug("Finding UserDetailsOnlyUsername by id: {}", userdetailsonlyusernameId);
        UserDetailsOnlyUsername userDetailsOnlyUsername = this.wmGenericDao.findById(userdetailsonlyusernameId);
        if (userDetailsOnlyUsername == null){
            LOGGER.debug("No UserDetailsOnlyUsername found with id: {}", userdetailsonlyusernameId);
            throw new EntityNotFoundException(String.valueOf(userdetailsonlyusernameId));
        }
        return userDetailsOnlyUsername;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public UserDetailsOnlyUsername findById(String userdetailsonlyusernameId) {
        LOGGER.debug("Finding UserDetailsOnlyUsername by id: {}", userdetailsonlyusernameId);
        return this.wmGenericDao.findById(userdetailsonlyusernameId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public UserDetailsOnlyUsername update(UserDetailsOnlyUsername userDetailsOnlyUsername) throws EntityNotFoundException {
        LOGGER.debug("Updating UserDetailsOnlyUsername with information: {}", userDetailsOnlyUsername);
        this.wmGenericDao.update(userDetailsOnlyUsername);

        String userdetailsonlyusernameId = userDetailsOnlyUsername.getUserDetaId();

        return this.wmGenericDao.findById(userdetailsonlyusernameId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public UserDetailsOnlyUsername delete(String userdetailsonlyusernameId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserDetailsOnlyUsername with id: {}", userdetailsonlyusernameId);
        UserDetailsOnlyUsername deleted = this.wmGenericDao.findById(userdetailsonlyusernameId);
        if (deleted == null) {
            LOGGER.debug("No UserDetailsOnlyUsername found with id: {}", userdetailsonlyusernameId);
            throw new EntityNotFoundException(String.valueOf(userdetailsonlyusernameId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<UserDetailsOnlyUsername> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserDetailsOnlyUsernames");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<UserDetailsOnlyUsername> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserDetailsOnlyUsernames");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table UserDetailsOnlyUsername to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

