/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Alltypeswithdefaults;
import com.newfebproject.viewsdb.AlltypeswithdefaultsId;


/**
 * ServiceImpl object for domain model class Alltypeswithdefaults.
 *
 * @see Alltypeswithdefaults
 */
@Service("viewsdb.AlltypeswithdefaultsService")
public class AlltypeswithdefaultsServiceImpl implements AlltypeswithdefaultsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypeswithdefaultsServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.AlltypeswithdefaultsDao")
    private WMGenericDao<Alltypeswithdefaults, AlltypeswithdefaultsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Alltypeswithdefaults, AlltypeswithdefaultsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Alltypeswithdefaults create(Alltypeswithdefaults alltypeswithdefaults) {
        LOGGER.debug("Creating a new Alltypeswithdefaults with information: {}", alltypeswithdefaults);
        Alltypeswithdefaults alltypeswithdefaultsCreated = this.wmGenericDao.create(alltypeswithdefaults);
        return alltypeswithdefaultsCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Alltypeswithdefaults getById(AlltypeswithdefaultsId alltypeswithdefaultsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Alltypeswithdefaults by id: {}", alltypeswithdefaultsId);
        Alltypeswithdefaults alltypeswithdefaults = this.wmGenericDao.findById(alltypeswithdefaultsId);
        if (alltypeswithdefaults == null){
            LOGGER.debug("No Alltypeswithdefaults found with id: {}", alltypeswithdefaultsId);
            throw new EntityNotFoundException(String.valueOf(alltypeswithdefaultsId));
        }
        return alltypeswithdefaults;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Alltypeswithdefaults findById(AlltypeswithdefaultsId alltypeswithdefaultsId) {
        LOGGER.debug("Finding Alltypeswithdefaults by id: {}", alltypeswithdefaultsId);
        return this.wmGenericDao.findById(alltypeswithdefaultsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Alltypeswithdefaults update(Alltypeswithdefaults alltypeswithdefaults) throws EntityNotFoundException {
        LOGGER.debug("Updating Alltypeswithdefaults with information: {}", alltypeswithdefaults);
        this.wmGenericDao.update(alltypeswithdefaults);

        AlltypeswithdefaultsId alltypeswithdefaultsId = new AlltypeswithdefaultsId();
        alltypeswithdefaultsId.setBooleancol(alltypeswithdefaults.getBooleancol());
        alltypeswithdefaultsId.setSmallintcol(alltypeswithdefaults.getSmallintcol());
        alltypeswithdefaultsId.setIntcol(alltypeswithdefaults.getIntcol());
        alltypeswithdefaultsId.setBigintcol(alltypeswithdefaults.getBigintcol());
        alltypeswithdefaultsId.setFloatcol(alltypeswithdefaults.getFloatcol());
        alltypeswithdefaultsId.setDoublecol(alltypeswithdefaults.getDoublecol());
        alltypeswithdefaultsId.setNumericcol(alltypeswithdefaults.getNumericcol());
        alltypeswithdefaultsId.setRealcol(alltypeswithdefaults.getRealcol());
        alltypeswithdefaultsId.setDoublepreccol(alltypeswithdefaults.getDoublepreccol());
        alltypeswithdefaultsId.setSerialcol(alltypeswithdefaults.getSerialcol());
        alltypeswithdefaultsId.setPlainfloatcol(alltypeswithdefaults.getPlainfloatcol());
        alltypeswithdefaultsId.setCharcol(alltypeswithdefaults.getCharcol());
        alltypeswithdefaultsId.setQuotedcharcol(alltypeswithdefaults.getQuotedcharcol());
        alltypeswithdefaultsId.setVarcharcol(alltypeswithdefaults.getVarcharcol());
        alltypeswithdefaultsId.setTextcol(alltypeswithdefaults.getTextcol());
        alltypeswithdefaultsId.setDatecol(alltypeswithdefaults.getDatecol());
        alltypeswithdefaultsId.setTimecol(alltypeswithdefaults.getTimecol());
        alltypeswithdefaultsId.setTimetzcol(alltypeswithdefaults.getTimetzcol());
        alltypeswithdefaultsId.setTimewotzcol(alltypeswithdefaults.getTimewotzcol());
        alltypeswithdefaultsId.setTimestampcol(alltypeswithdefaults.getTimestampcol());
        alltypeswithdefaultsId.setTimestamptzcol(alltypeswithdefaults.getTimestamptzcol());
        alltypeswithdefaultsId.setTimestampwotzcol(alltypeswithdefaults.getTimestampwotzcol());

        return this.wmGenericDao.findById(alltypeswithdefaultsId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Alltypeswithdefaults delete(AlltypeswithdefaultsId alltypeswithdefaultsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Alltypeswithdefaults with id: {}", alltypeswithdefaultsId);
        Alltypeswithdefaults deleted = this.wmGenericDao.findById(alltypeswithdefaultsId);
        if (deleted == null) {
            LOGGER.debug("No Alltypeswithdefaults found with id: {}", alltypeswithdefaultsId);
            throw new EntityNotFoundException(String.valueOf(alltypeswithdefaultsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Alltypeswithdefaults> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Alltypeswithdefaults");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Alltypeswithdefaults> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Alltypeswithdefaults");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Alltypeswithdefaults to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

