/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Numberviews1;
import com.newfebproject.viewsdb.Numberviews1Id;

/**
 * Service object for domain model class {@link Numberviews1}.
 */
public interface Numberviews1Service {

    /**
     * Creates a new Numberviews1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Numberviews1 if any.
     *
     * @param numberviews1 Details of the Numberviews1 to be created; value cannot be null.
     * @return The newly created Numberviews1.
     */
	Numberviews1 create(Numberviews1 numberviews1);


	/**
	 * Returns Numberviews1 by given id if exists.
	 *
	 * @param numberviews1Id The id of the Numberviews1 to get; value cannot be null.
	 * @return Numberviews1 associated with the given numberviews1Id.
     * @throws EntityNotFoundException If no Numberviews1 is found.
	 */
	Numberviews1 getById(Numberviews1Id numberviews1Id) throws EntityNotFoundException;

    /**
	 * Find and return the Numberviews1 by given id if exists, returns null otherwise.
	 *
	 * @param numberviews1Id The id of the Numberviews1 to get; value cannot be null.
	 * @return Numberviews1 associated with the given numberviews1Id.
	 */
	Numberviews1 findById(Numberviews1Id numberviews1Id);


	/**
	 * Updates the details of an existing Numberviews1. It replaces all fields of the existing Numberviews1 with the given numberviews1.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Numberviews1 if any.
     *
	 * @param numberviews1 The details of the Numberviews1 to be updated; value cannot be null.
	 * @return The updated Numberviews1.
	 * @throws EntityNotFoundException if no Numberviews1 is found with given input.
	 */
	Numberviews1 update(Numberviews1 numberviews1) throws EntityNotFoundException;

    /**
	 * Deletes an existing Numberviews1 with the given id.
	 *
	 * @param numberviews1Id The id of the Numberviews1 to be deleted; value cannot be null.
	 * @return The deleted Numberviews1.
	 * @throws EntityNotFoundException if no Numberviews1 found with the given id.
	 */
	Numberviews1 delete(Numberviews1Id numberviews1Id) throws EntityNotFoundException;

	/**
	 * Find all Numberviews1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Numberviews1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Numberviews1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Numberviews1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Numberviews1s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Numberviews1> findAll(String query, Pageable pageable);

    /**
	 * Exports all Numberviews1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Numberviews1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Numberviews1.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

