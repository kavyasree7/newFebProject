/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Number223;
import com.newfebproject.viewsdb.Number223Id;


/**
 * ServiceImpl object for domain model class Number223.
 *
 * @see Number223
 */
@Service("viewsdb.Number223Service")
public class Number223ServiceImpl implements Number223Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Number223ServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.Number223Dao")
    private WMGenericDao<Number223, Number223Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Number223, Number223Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Number223 create(Number223 number223) {
        LOGGER.debug("Creating a new Number223 with information: {}", number223);
        Number223 number223Created = this.wmGenericDao.create(number223);
        return number223Created;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Number223 getById(Number223Id number223Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Number223 by id: {}", number223Id);
        Number223 number223 = this.wmGenericDao.findById(number223Id);
        if (number223 == null){
            LOGGER.debug("No Number223 found with id: {}", number223Id);
            throw new EntityNotFoundException(String.valueOf(number223Id));
        }
        return number223;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Number223 findById(Number223Id number223Id) {
        LOGGER.debug("Finding Number223 by id: {}", number223Id);
        return this.wmGenericDao.findById(number223Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Number223 update(Number223 number223) throws EntityNotFoundException {
        LOGGER.debug("Updating Number223 with information: {}", number223);
        this.wmGenericDao.update(number223);

        Number223Id number223Id = new Number223Id();
        number223Id.setId(number223.getId());
        number223Id.setIntegerCol(number223.getIntegerCol());
        number223Id.setShortCol(number223.getShortCol());
        number223Id.setLongCol(number223.getLongCol());
        number223Id.setBigintegerCol(number223.getBigintegerCol());
        number223Id.setByteCol(number223.getByteCol());
        number223Id.setFloatCol(number223.getFloatCol());
        number223Id.setDoubleCol(number223.getDoubleCol());

        return this.wmGenericDao.findById(number223Id);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Number223 delete(Number223Id number223Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Number223 with id: {}", number223Id);
        Number223 deleted = this.wmGenericDao.findById(number223Id);
        if (deleted == null) {
            LOGGER.debug("No Number223 found with id: {}", number223Id);
            throw new EntityNotFoundException(String.valueOf(number223Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Number223> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Number223s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Number223> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Number223s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Number223 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

