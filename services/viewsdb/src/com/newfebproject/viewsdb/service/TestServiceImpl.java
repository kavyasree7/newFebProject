/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.viewsdb.Test;


/**
 * ServiceImpl object for domain model class Test.
 *
 * @see Test
 */
@Service("viewsdb.TestService")
public class TestServiceImpl implements TestService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestServiceImpl.class);


    @Autowired
    @Qualifier("viewsdb.TestDao")
    private WMGenericDao<Test, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Test, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "viewsdbTransactionManager")
    @Override
	public Test create(Test test) {
        LOGGER.debug("Creating a new Test with information: {}", test);
        Test testCreated = this.wmGenericDao.create(test);
        return testCreated;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Test getById(Integer testId) throws EntityNotFoundException {
        LOGGER.debug("Finding Test by id: {}", testId);
        Test test = this.wmGenericDao.findById(testId);
        if (test == null){
            LOGGER.debug("No Test found with id: {}", testId);
            throw new EntityNotFoundException(String.valueOf(testId));
        }
        return test;
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Test findById(Integer testId) {
        LOGGER.debug("Finding Test by id: {}", testId);
        return this.wmGenericDao.findById(testId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "viewsdbTransactionManager")
	@Override
	public Test update(Test test) throws EntityNotFoundException {
        LOGGER.debug("Updating Test with information: {}", test);
        this.wmGenericDao.update(test);

        Integer testId = test.getId();

        return this.wmGenericDao.findById(testId);
    }

    @Transactional(value = "viewsdbTransactionManager")
	@Override
	public Test delete(Integer testId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Test with id: {}", testId);
        Test deleted = this.wmGenericDao.findById(testId);
        if (deleted == null) {
            LOGGER.debug("No Test found with id: {}", testId);
            throw new EntityNotFoundException(String.valueOf(testId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public Page<Test> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Tests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Page<Test> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Tests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service viewsdb for table Test to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "viewsdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

