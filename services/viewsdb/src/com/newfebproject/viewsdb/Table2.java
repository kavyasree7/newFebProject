/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.viewsdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * Table2 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Table2`")
public class Table2 implements Serializable {

    private Integer idRename;
    private Integer intType;
    private Short byteType;
    private Integer shortType;
    private Long longType;
    private BigInteger bigIntType;
    private BigInteger bigIntType1;
    private NumberTable numberTable;

    @Id
    @GenericGenerator(name = "generator", strategy = "foreign", 
            parameters = @Parameter(name = "property", value = "numberTable"))
    @GeneratedValue(generator = "generator")
    @Column(name = "`ID_rename`", nullable = false, insertable = false, updatable = false, scale = 0, precision = 10)
    public Integer getIdRename() {
        return this.idRename;
    }

    public void setIdRename(Integer idRename) {
        this.idRename = idRename;
    }

    @Column(name = "`intType`", nullable = true, scale = 0, precision = 10)
    public Integer getIntType() {
        return this.intType;
    }

    public void setIntType(Integer intType) {
        this.intType = intType;
    }

    @Column(name = "`byteType`", nullable = true, scale = 0, precision = 5)
    public Short getByteType() {
        return this.byteType;
    }

    public void setByteType(Short byteType) {
        this.byteType = byteType;
    }

    @Column(name = "`shortType`", nullable = true, scale = 0, precision = 10)
    public Integer getShortType() {
        return this.shortType;
    }

    public void setShortType(Integer shortType) {
        this.shortType = shortType;
    }

    @Column(name = "`longType`", nullable = true, scale = 0, precision = 19)
    public Long getLongType() {
        return this.longType;
    }

    public void setLongType(Long longType) {
        this.longType = longType;
    }

    @Column(name = "`big int type`", nullable = true, scale = 0, precision = 25)
    public BigInteger getBigIntType() {
        return this.bigIntType;
    }

    public void setBigIntType(BigInteger bigIntType) {
        this.bigIntType = bigIntType;
    }

    @Column(name = "`big int type1`", nullable = true, scale = 0, precision = 32)
    public BigInteger getBigIntType1() {
        return this.bigIntType1;
    }

    public void setBigIntType1(BigInteger bigIntType1) {
        this.bigIntType1 = bigIntType1;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @PrimaryKeyJoinColumn
    public NumberTable getNumberTable() {
        return this.numberTable;
    }

    public void setNumberTable(NumberTable numberTable) {
        if(numberTable != null) {
            this.idRename = numberTable.getId();
        }

        this.numberTable = numberTable;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Table2)) return false;
        final Table2 table2 = (Table2) o;
        return Objects.equals(getIdRename(), table2.getIdRename());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdRename());
    }
}

