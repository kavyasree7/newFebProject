/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.adventureworks2014.AwbuildVersion;


/**
 * ServiceImpl object for domain model class AwbuildVersion.
 *
 * @see AwbuildVersion
 */
@Service("AdventureWorks2014.AwbuildVersionService")
public class AwbuildVersionServiceImpl implements AwbuildVersionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AwbuildVersionServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.AwbuildVersionDao")
    private WMGenericDao<AwbuildVersion, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AwbuildVersion, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
	public AwbuildVersion create(AwbuildVersion awbuildVersion) {
        LOGGER.debug("Creating a new AwbuildVersion with information: {}", awbuildVersion);
        AwbuildVersion awbuildVersionCreated = this.wmGenericDao.create(awbuildVersion);
        return awbuildVersionCreated;
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public AwbuildVersion getById(Short awbuildversionId) throws EntityNotFoundException {
        LOGGER.debug("Finding AwbuildVersion by id: {}", awbuildversionId);
        AwbuildVersion awbuildVersion = this.wmGenericDao.findById(awbuildversionId);
        if (awbuildVersion == null){
            LOGGER.debug("No AwbuildVersion found with id: {}", awbuildversionId);
            throw new EntityNotFoundException(String.valueOf(awbuildversionId));
        }
        return awbuildVersion;
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public AwbuildVersion findById(Short awbuildversionId) {
        LOGGER.debug("Finding AwbuildVersion by id: {}", awbuildversionId);
        return this.wmGenericDao.findById(awbuildversionId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
	@Override
	public AwbuildVersion update(AwbuildVersion awbuildVersion) throws EntityNotFoundException {
        LOGGER.debug("Updating AwbuildVersion with information: {}", awbuildVersion);
        this.wmGenericDao.update(awbuildVersion);

        Short awbuildversionId = awbuildVersion.getSystemInformationId();

        return this.wmGenericDao.findById(awbuildversionId);
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
	@Override
	public AwbuildVersion delete(Short awbuildversionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AwbuildVersion with id: {}", awbuildversionId);
        AwbuildVersion deleted = this.wmGenericDao.findById(awbuildversionId);
        if (deleted == null) {
            LOGGER.debug("No AwbuildVersion found with id: {}", awbuildversionId);
            throw new EntityNotFoundException(String.valueOf(awbuildversionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public Page<AwbuildVersion> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AwbuildVersions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<AwbuildVersion> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AwbuildVersions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table AwbuildVersion to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

