/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.adventureworks2014.Address;
import com.newfebproject.adventureworks2014.service.AddressService;


/**
 * Controller object for domain model class Address.
 * @see Address
 */
@RestController("AdventureWorks2014.AddressController")
@Api(value = "AddressController", description = "Exposes APIs to work with Address resource.")
@RequestMapping("/AdventureWorks2014/Address")
public class AddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddressController.class);

    @Autowired
	@Qualifier("AdventureWorks2014.AddressService")
	private AddressService addressService;

	@ApiOperation(value = "Creates a new Address instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Address createAddress(@RequestBody Address address) {
		LOGGER.debug("Create Address with information: {}" , address);

		address = addressService.create(address);
		LOGGER.debug("Created Address with information: {}" , address);

	    return address;
	}

	@ApiOperation(value = "Creates a new Address instance.This API should be used when the Address instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Address createAddress(MultipartHttpServletRequest multipartHttpServletRequest) {
    	Address address = WMMultipartUtils.toObject(multipartHttpServletRequest, Address.class, "AdventureWorks2014"); 
        LOGGER.debug("Creating a new Address with information: {}" , address);
        return addressService.create(address);
    }


    @ApiOperation(value = "Returns the Address instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Address getAddress(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Address with id: {}" , id);

        Address foundAddress = addressService.getById(id);
        LOGGER.debug("Address details with id: {}" , foundAddress);

        return foundAddress;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Address instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getAddressBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Address instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Address.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Address address = addressService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(address, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Address instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Address editAddress(@PathVariable("id") Integer id, @RequestBody Address address) throws EntityNotFoundException {
        LOGGER.debug("Editing Address with id: {}" , address.getAddressId());

        address.setAddressId(id);
        address = addressService.update(address);
        LOGGER.debug("Address details with id: {}" , address);

        return address;
    }

    @ApiOperation(value = "Updates the Address instance associated with the given id.This API should be used when Address instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Address editAddress(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        Address newAddress = WMMultipartUtils.toObject(multipartHttpServletRequest, Address.class, "AdventureWorks2014");
        newAddress.setAddressId(id);

        Address oldAddress = addressService.getById(id);
        WMMultipartUtils.updateLobsContent(oldAddress, newAddress);
        LOGGER.debug("Updating Address with information: {}" , newAddress);

        return addressService.update(newAddress);
    }

    @ApiOperation(value = "Deletes the Address instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAddress(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Address with id: {}" , id);

        Address deletedAddress = addressService.delete(id);

        return deletedAddress != null;
    }

    @RequestMapping(value = "/rowguid/{rowguid}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Address with given unique key values.")
    public Address getByRowguid(@PathVariable("rowguid") String rowguid) {
        LOGGER.debug("Getting Address with uniques key Rowguid");
        return addressService.getByRowguid(rowguid);
    }

    @RequestMapping(value = "/addressLine1-addressLine2-city-stateProvinceId-postalCode", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Address with given unique key values.")
    public Address getByAddressLine1AndAddressLine2AndCityAndStateProvinceIdAndPostalCode(@RequestParam("addressLine1") String addressLine1, @RequestParam("addressLine2") String addressLine2, @RequestParam("city") String city, @RequestParam("stateProvinceId") int stateProvinceId, @RequestParam("postalCode") String postalCode) {
        LOGGER.debug("Getting Address with uniques key AddressLine1AndAddressLine2AndCityAndStateProvinceIdAndPostalCode");
        return addressService.getByAddressLine1AndAddressLine2AndCityAndStateProvinceIdAndPostalCode(addressLine1, addressLine2, city, stateProvinceId, postalCode);
    }

    /**
     * @deprecated Use {@link #findAddresses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Address instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Address> searchAddressesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Addresses list");
        return addressService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Address instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Address> findAddresses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Addresses list");
        return addressService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Address instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Address> filterAddresses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Addresses list");
        return addressService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAddresses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return addressService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Address instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAddresses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Addresses");
		return addressService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAddressAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return addressService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AddressService instance
	 */
	protected void setAddressService(AddressService service) {
		this.addressService = service;
	}

}

