/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Productsupplier;
import com.newfebproject.sample.ProductsupplierId;


/**
 * ServiceImpl object for domain model class Productsupplier.
 *
 * @see Productsupplier
 */
@Service("SAMPLE.ProductsupplierService")
public class ProductsupplierServiceImpl implements ProductsupplierService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsupplierServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.ProductsupplierDao")
    private WMGenericDao<Productsupplier, ProductsupplierId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Productsupplier, ProductsupplierId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Productsupplier create(Productsupplier productsupplier) {
        LOGGER.debug("Creating a new Productsupplier with information: {}", productsupplier);
        Productsupplier productsupplierCreated = this.wmGenericDao.create(productsupplier);
        return productsupplierCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Productsupplier getById(ProductsupplierId productsupplierId) throws EntityNotFoundException {
        LOGGER.debug("Finding Productsupplier by id: {}", productsupplierId);
        Productsupplier productsupplier = this.wmGenericDao.findById(productsupplierId);
        if (productsupplier == null){
            LOGGER.debug("No Productsupplier found with id: {}", productsupplierId);
            throw new EntityNotFoundException(String.valueOf(productsupplierId));
        }
        return productsupplier;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Productsupplier findById(ProductsupplierId productsupplierId) {
        LOGGER.debug("Finding Productsupplier by id: {}", productsupplierId);
        return this.wmGenericDao.findById(productsupplierId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Productsupplier update(Productsupplier productsupplier) throws EntityNotFoundException {
        LOGGER.debug("Updating Productsupplier with information: {}", productsupplier);
        this.wmGenericDao.update(productsupplier);

        ProductsupplierId productsupplierId = new ProductsupplierId();
        productsupplierId.setPid(productsupplier.getPid());
        productsupplierId.setSid(productsupplier.getSid());

        return this.wmGenericDao.findById(productsupplierId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Productsupplier delete(ProductsupplierId productsupplierId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Productsupplier with id: {}", productsupplierId);
        Productsupplier deleted = this.wmGenericDao.findById(productsupplierId);
        if (deleted == null) {
            LOGGER.debug("No Productsupplier found with id: {}", productsupplierId);
            throw new EntityNotFoundException(String.valueOf(productsupplierId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Productsupplier> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Productsuppliers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Productsupplier> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Productsuppliers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Productsupplier to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

