/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vempdpt1;
import com.newfebproject.sample.Vempdpt1Id;


/**
 * ServiceImpl object for domain model class Vempdpt1.
 *
 * @see Vempdpt1
 */
@Service("SAMPLE.Vempdpt1Service")
public class Vempdpt1ServiceImpl implements Vempdpt1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vempdpt1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vempdpt1Dao")
    private WMGenericDao<Vempdpt1, Vempdpt1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vempdpt1, Vempdpt1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vempdpt1 create(Vempdpt1 vempdpt1) {
        LOGGER.debug("Creating a new Vempdpt1 with information: {}", vempdpt1);
        Vempdpt1 vempdpt1Created = this.wmGenericDao.create(vempdpt1);
        return vempdpt1Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vempdpt1 getById(Vempdpt1Id vempdpt1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vempdpt1 by id: {}", vempdpt1Id);
        Vempdpt1 vempdpt1 = this.wmGenericDao.findById(vempdpt1Id);
        if (vempdpt1 == null){
            LOGGER.debug("No Vempdpt1 found with id: {}", vempdpt1Id);
            throw new EntityNotFoundException(String.valueOf(vempdpt1Id));
        }
        return vempdpt1;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vempdpt1 findById(Vempdpt1Id vempdpt1Id) {
        LOGGER.debug("Finding Vempdpt1 by id: {}", vempdpt1Id);
        return this.wmGenericDao.findById(vempdpt1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vempdpt1 update(Vempdpt1 vempdpt1) throws EntityNotFoundException {
        LOGGER.debug("Updating Vempdpt1 with information: {}", vempdpt1);
        this.wmGenericDao.update(vempdpt1);

        Vempdpt1Id vempdpt1Id = new Vempdpt1Id();
        vempdpt1Id.setDeptno(vempdpt1.getDeptno());
        vempdpt1Id.setDeptname(vempdpt1.getDeptname());
        vempdpt1Id.setEmpno(vempdpt1.getEmpno());
        vempdpt1Id.setFrstinit(vempdpt1.getFrstinit());
        vempdpt1Id.setMidinit(vempdpt1.getMidinit());
        vempdpt1Id.setLastname(vempdpt1.getLastname());
        vempdpt1Id.setWorkdept(vempdpt1.getWorkdept());

        return this.wmGenericDao.findById(vempdpt1Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vempdpt1 delete(Vempdpt1Id vempdpt1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vempdpt1 with id: {}", vempdpt1Id);
        Vempdpt1 deleted = this.wmGenericDao.findById(vempdpt1Id);
        if (deleted == null) {
            LOGGER.debug("No Vempdpt1 found with id: {}", vempdpt1Id);
            throw new EntityNotFoundException(String.valueOf(vempdpt1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vempdpt1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vempdpt1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vempdpt1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vempdpt1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vempdpt1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

