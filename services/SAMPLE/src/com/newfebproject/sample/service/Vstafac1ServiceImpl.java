/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vstafac1;
import com.newfebproject.sample.Vstafac1Id;


/**
 * ServiceImpl object for domain model class Vstafac1.
 *
 * @see Vstafac1
 */
@Service("SAMPLE.Vstafac1Service")
public class Vstafac1ServiceImpl implements Vstafac1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vstafac1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vstafac1Dao")
    private WMGenericDao<Vstafac1, Vstafac1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vstafac1, Vstafac1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vstafac1 create(Vstafac1 vstafac1) {
        LOGGER.debug("Creating a new Vstafac1 with information: {}", vstafac1);
        Vstafac1 vstafac1Created = this.wmGenericDao.create(vstafac1);
        return vstafac1Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vstafac1 getById(Vstafac1Id vstafac1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vstafac1 by id: {}", vstafac1Id);
        Vstafac1 vstafac1 = this.wmGenericDao.findById(vstafac1Id);
        if (vstafac1 == null){
            LOGGER.debug("No Vstafac1 found with id: {}", vstafac1Id);
            throw new EntityNotFoundException(String.valueOf(vstafac1Id));
        }
        return vstafac1;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vstafac1 findById(Vstafac1Id vstafac1Id) {
        LOGGER.debug("Finding Vstafac1 by id: {}", vstafac1Id);
        return this.wmGenericDao.findById(vstafac1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vstafac1 update(Vstafac1 vstafac1) throws EntityNotFoundException {
        LOGGER.debug("Updating Vstafac1 with information: {}", vstafac1);
        this.wmGenericDao.update(vstafac1);

        Vstafac1Id vstafac1Id = new Vstafac1Id();
        vstafac1Id.setProjno(vstafac1.getProjno());
        vstafac1Id.setActno(vstafac1.getActno());
        vstafac1Id.setActdesc(vstafac1.getActdesc());
        vstafac1Id.setEmpno(vstafac1.getEmpno());
        vstafac1Id.setFirstnme(vstafac1.getFirstnme());
        vstafac1Id.setMidinit(vstafac1.getMidinit());
        vstafac1Id.setLastname(vstafac1.getLastname());
        vstafac1Id.setEmptime(vstafac1.getEmptime());
        vstafac1Id.setStdate(vstafac1.getStdate());
        vstafac1Id.setEndate(vstafac1.getEndate());
        vstafac1Id.setType(vstafac1.getType());

        return this.wmGenericDao.findById(vstafac1Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vstafac1 delete(Vstafac1Id vstafac1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vstafac1 with id: {}", vstafac1Id);
        Vstafac1 deleted = this.wmGenericDao.findById(vstafac1Id);
        if (deleted == null) {
            LOGGER.debug("No Vstafac1 found with id: {}", vstafac1Id);
            throw new EntityNotFoundException(String.valueOf(vstafac1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vstafac1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vstafac1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vstafac1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vstafac1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vstafac1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

