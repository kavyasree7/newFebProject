/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Empprojact;
import com.newfebproject.sample.EmpprojactId;

/**
 * Service object for domain model class {@link Empprojact}.
 */
public interface EmpprojactService {

    /**
     * Creates a new Empprojact. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Empprojact if any.
     *
     * @param empprojact Details of the Empprojact to be created; value cannot be null.
     * @return The newly created Empprojact.
     */
	Empprojact create(Empprojact empprojact);


	/**
	 * Returns Empprojact by given id if exists.
	 *
	 * @param empprojactId The id of the Empprojact to get; value cannot be null.
	 * @return Empprojact associated with the given empprojactId.
     * @throws EntityNotFoundException If no Empprojact is found.
	 */
	Empprojact getById(EmpprojactId empprojactId) throws EntityNotFoundException;

    /**
	 * Find and return the Empprojact by given id if exists, returns null otherwise.
	 *
	 * @param empprojactId The id of the Empprojact to get; value cannot be null.
	 * @return Empprojact associated with the given empprojactId.
	 */
	Empprojact findById(EmpprojactId empprojactId);


	/**
	 * Updates the details of an existing Empprojact. It replaces all fields of the existing Empprojact with the given empprojact.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Empprojact if any.
     *
	 * @param empprojact The details of the Empprojact to be updated; value cannot be null.
	 * @return The updated Empprojact.
	 * @throws EntityNotFoundException if no Empprojact is found with given input.
	 */
	Empprojact update(Empprojact empprojact) throws EntityNotFoundException;

    /**
	 * Deletes an existing Empprojact with the given id.
	 *
	 * @param empprojactId The id of the Empprojact to be deleted; value cannot be null.
	 * @return The deleted Empprojact.
	 * @throws EntityNotFoundException if no Empprojact found with the given id.
	 */
	Empprojact delete(EmpprojactId empprojactId) throws EntityNotFoundException;

	/**
	 * Find all Empprojacts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Empprojacts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Empprojact> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Empprojacts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Empprojacts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Empprojact> findAll(String query, Pageable pageable);

    /**
	 * Exports all Empprojacts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Empprojacts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Empprojact.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

