/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vempprojact;
import com.newfebproject.sample.VempprojactId;

/**
 * Service object for domain model class {@link Vempprojact}.
 */
public interface VempprojactService {

    /**
     * Creates a new Vempprojact. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vempprojact if any.
     *
     * @param vempprojact Details of the Vempprojact to be created; value cannot be null.
     * @return The newly created Vempprojact.
     */
	Vempprojact create(Vempprojact vempprojact);


	/**
	 * Returns Vempprojact by given id if exists.
	 *
	 * @param vempprojactId The id of the Vempprojact to get; value cannot be null.
	 * @return Vempprojact associated with the given vempprojactId.
     * @throws EntityNotFoundException If no Vempprojact is found.
	 */
	Vempprojact getById(VempprojactId vempprojactId) throws EntityNotFoundException;

    /**
	 * Find and return the Vempprojact by given id if exists, returns null otherwise.
	 *
	 * @param vempprojactId The id of the Vempprojact to get; value cannot be null.
	 * @return Vempprojact associated with the given vempprojactId.
	 */
	Vempprojact findById(VempprojactId vempprojactId);


	/**
	 * Updates the details of an existing Vempprojact. It replaces all fields of the existing Vempprojact with the given vempprojact.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Vempprojact if any.
     *
	 * @param vempprojact The details of the Vempprojact to be updated; value cannot be null.
	 * @return The updated Vempprojact.
	 * @throws EntityNotFoundException if no Vempprojact is found with given input.
	 */
	Vempprojact update(Vempprojact vempprojact) throws EntityNotFoundException;

    /**
	 * Deletes an existing Vempprojact with the given id.
	 *
	 * @param vempprojactId The id of the Vempprojact to be deleted; value cannot be null.
	 * @return The deleted Vempprojact.
	 * @throws EntityNotFoundException if no Vempprojact found with the given id.
	 */
	Vempprojact delete(VempprojactId vempprojactId) throws EntityNotFoundException;

	/**
	 * Find all Vempprojacts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vempprojacts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Vempprojact> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Vempprojacts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vempprojacts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Vempprojact> findAll(String query, Pageable pageable);

    /**
	 * Exports all Vempprojacts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Vempprojacts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Vempprojact.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

