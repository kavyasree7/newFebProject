/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vpstrde1;
import com.newfebproject.sample.Vpstrde1Id;


/**
 * ServiceImpl object for domain model class Vpstrde1.
 *
 * @see Vpstrde1
 */
@Service("SAMPLE.Vpstrde1Service")
public class Vpstrde1ServiceImpl implements Vpstrde1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vpstrde1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vpstrde1Dao")
    private WMGenericDao<Vpstrde1, Vpstrde1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vpstrde1, Vpstrde1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vpstrde1 create(Vpstrde1 vpstrde1) {
        LOGGER.debug("Creating a new Vpstrde1 with information: {}", vpstrde1);
        Vpstrde1 vpstrde1Created = this.wmGenericDao.create(vpstrde1);
        return vpstrde1Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vpstrde1 getById(Vpstrde1Id vpstrde1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vpstrde1 by id: {}", vpstrde1Id);
        Vpstrde1 vpstrde1 = this.wmGenericDao.findById(vpstrde1Id);
        if (vpstrde1 == null){
            LOGGER.debug("No Vpstrde1 found with id: {}", vpstrde1Id);
            throw new EntityNotFoundException(String.valueOf(vpstrde1Id));
        }
        return vpstrde1;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vpstrde1 findById(Vpstrde1Id vpstrde1Id) {
        LOGGER.debug("Finding Vpstrde1 by id: {}", vpstrde1Id);
        return this.wmGenericDao.findById(vpstrde1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vpstrde1 update(Vpstrde1 vpstrde1) throws EntityNotFoundException {
        LOGGER.debug("Updating Vpstrde1 with information: {}", vpstrde1);
        this.wmGenericDao.update(vpstrde1);

        Vpstrde1Id vpstrde1Id = new Vpstrde1Id();
        vpstrde1Id.setProj1no(vpstrde1.getProj1no());
        vpstrde1Id.setProj1name(vpstrde1.getProj1name());
        vpstrde1Id.setResp1no(vpstrde1.getResp1no());
        vpstrde1Id.setResp1fn(vpstrde1.getResp1fn());
        vpstrde1Id.setResp1mi(vpstrde1.getResp1mi());
        vpstrde1Id.setResp1ln(vpstrde1.getResp1ln());
        vpstrde1Id.setProj2no(vpstrde1.getProj2no());
        vpstrde1Id.setProj2name(vpstrde1.getProj2name());
        vpstrde1Id.setResp2no(vpstrde1.getResp2no());
        vpstrde1Id.setResp2fn(vpstrde1.getResp2fn());
        vpstrde1Id.setResp2mi(vpstrde1.getResp2mi());
        vpstrde1Id.setResp2ln(vpstrde1.getResp2ln());

        return this.wmGenericDao.findById(vpstrde1Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vpstrde1 delete(Vpstrde1Id vpstrde1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vpstrde1 with id: {}", vpstrde1Id);
        Vpstrde1 deleted = this.wmGenericDao.findById(vpstrde1Id);
        if (deleted == null) {
            LOGGER.debug("No Vpstrde1 found with id: {}", vpstrde1Id);
            throw new EntityNotFoundException(String.valueOf(vpstrde1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vpstrde1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vpstrde1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vpstrde1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vpstrde1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vpstrde1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

