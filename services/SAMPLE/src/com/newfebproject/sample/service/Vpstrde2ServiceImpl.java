/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vpstrde2;
import com.newfebproject.sample.Vpstrde2Id;


/**
 * ServiceImpl object for domain model class Vpstrde2.
 *
 * @see Vpstrde2
 */
@Service("SAMPLE.Vpstrde2Service")
public class Vpstrde2ServiceImpl implements Vpstrde2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vpstrde2ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vpstrde2Dao")
    private WMGenericDao<Vpstrde2, Vpstrde2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vpstrde2, Vpstrde2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vpstrde2 create(Vpstrde2 vpstrde2) {
        LOGGER.debug("Creating a new Vpstrde2 with information: {}", vpstrde2);
        Vpstrde2 vpstrde2Created = this.wmGenericDao.create(vpstrde2);
        return vpstrde2Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vpstrde2 getById(Vpstrde2Id vpstrde2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vpstrde2 by id: {}", vpstrde2Id);
        Vpstrde2 vpstrde2 = this.wmGenericDao.findById(vpstrde2Id);
        if (vpstrde2 == null){
            LOGGER.debug("No Vpstrde2 found with id: {}", vpstrde2Id);
            throw new EntityNotFoundException(String.valueOf(vpstrde2Id));
        }
        return vpstrde2;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vpstrde2 findById(Vpstrde2Id vpstrde2Id) {
        LOGGER.debug("Finding Vpstrde2 by id: {}", vpstrde2Id);
        return this.wmGenericDao.findById(vpstrde2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vpstrde2 update(Vpstrde2 vpstrde2) throws EntityNotFoundException {
        LOGGER.debug("Updating Vpstrde2 with information: {}", vpstrde2);
        this.wmGenericDao.update(vpstrde2);

        Vpstrde2Id vpstrde2Id = new Vpstrde2Id();
        vpstrde2Id.setProj1no(vpstrde2.getProj1no());
        vpstrde2Id.setProj1name(vpstrde2.getProj1name());
        vpstrde2Id.setResp1no(vpstrde2.getResp1no());
        vpstrde2Id.setResp1fn(vpstrde2.getResp1fn());
        vpstrde2Id.setResp1mi(vpstrde2.getResp1mi());
        vpstrde2Id.setResp1ln(vpstrde2.getResp1ln());
        vpstrde2Id.setProj2no(vpstrde2.getProj2no());
        vpstrde2Id.setProj2name(vpstrde2.getProj2name());
        vpstrde2Id.setResp2no(vpstrde2.getResp2no());
        vpstrde2Id.setResp2fn(vpstrde2.getResp2fn());
        vpstrde2Id.setResp2mi(vpstrde2.getResp2mi());
        vpstrde2Id.setResp2ln(vpstrde2.getResp2ln());

        return this.wmGenericDao.findById(vpstrde2Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vpstrde2 delete(Vpstrde2Id vpstrde2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vpstrde2 with id: {}", vpstrde2Id);
        Vpstrde2 deleted = this.wmGenericDao.findById(vpstrde2Id);
        if (deleted == null) {
            LOGGER.debug("No Vpstrde2 found with id: {}", vpstrde2Id);
            throw new EntityNotFoundException(String.valueOf(vpstrde2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vpstrde2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vpstrde2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vpstrde2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vpstrde2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vpstrde2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

