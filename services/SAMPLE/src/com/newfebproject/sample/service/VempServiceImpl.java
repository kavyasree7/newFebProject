/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vemp;
import com.newfebproject.sample.VempId;


/**
 * ServiceImpl object for domain model class Vemp.
 *
 * @see Vemp
 */
@Service("SAMPLE.VempService")
public class VempServiceImpl implements VempService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VempServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.VempDao")
    private WMGenericDao<Vemp, VempId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vemp, VempId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vemp create(Vemp vemp) {
        LOGGER.debug("Creating a new Vemp with information: {}", vemp);
        Vemp vempCreated = this.wmGenericDao.create(vemp);
        return vempCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vemp getById(VempId vempId) throws EntityNotFoundException {
        LOGGER.debug("Finding Vemp by id: {}", vempId);
        Vemp vemp = this.wmGenericDao.findById(vempId);
        if (vemp == null){
            LOGGER.debug("No Vemp found with id: {}", vempId);
            throw new EntityNotFoundException(String.valueOf(vempId));
        }
        return vemp;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vemp findById(VempId vempId) {
        LOGGER.debug("Finding Vemp by id: {}", vempId);
        return this.wmGenericDao.findById(vempId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vemp update(Vemp vemp) throws EntityNotFoundException {
        LOGGER.debug("Updating Vemp with information: {}", vemp);
        this.wmGenericDao.update(vemp);

        VempId vempId = new VempId();
        vempId.setEmpno(vemp.getEmpno());
        vempId.setFirstnme(vemp.getFirstnme());
        vempId.setMidinit(vemp.getMidinit());
        vempId.setLastname(vemp.getLastname());
        vempId.setWorkdept(vemp.getWorkdept());

        return this.wmGenericDao.findById(vempId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vemp delete(VempId vempId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vemp with id: {}", vempId);
        Vemp deleted = this.wmGenericDao.findById(vempId);
        if (deleted == null) {
            LOGGER.debug("No Vemp found with id: {}", vempId);
            throw new EntityNotFoundException(String.valueOf(vempId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vemp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vemps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vemp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vemps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vemp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

