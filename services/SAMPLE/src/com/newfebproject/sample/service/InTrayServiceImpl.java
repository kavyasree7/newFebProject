/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.InTray;
import com.newfebproject.sample.InTrayId;


/**
 * ServiceImpl object for domain model class InTray.
 *
 * @see InTray
 */
@Service("SAMPLE.InTrayService")
public class InTrayServiceImpl implements InTrayService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InTrayServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.InTrayDao")
    private WMGenericDao<InTray, InTrayId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InTray, InTrayId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public InTray create(InTray inTray) {
        LOGGER.debug("Creating a new InTray with information: {}", inTray);
        InTray inTrayCreated = this.wmGenericDao.create(inTray);
        return inTrayCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public InTray getById(InTrayId intrayId) throws EntityNotFoundException {
        LOGGER.debug("Finding InTray by id: {}", intrayId);
        InTray inTray = this.wmGenericDao.findById(intrayId);
        if (inTray == null){
            LOGGER.debug("No InTray found with id: {}", intrayId);
            throw new EntityNotFoundException(String.valueOf(intrayId));
        }
        return inTray;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public InTray findById(InTrayId intrayId) {
        LOGGER.debug("Finding InTray by id: {}", intrayId);
        return this.wmGenericDao.findById(intrayId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public InTray update(InTray inTray) throws EntityNotFoundException {
        LOGGER.debug("Updating InTray with information: {}", inTray);
        this.wmGenericDao.update(inTray);

        InTrayId intrayId = new InTrayId();
        intrayId.setReceived(inTray.getReceived());
        intrayId.setSource(inTray.getSource());
        intrayId.setSubject(inTray.getSubject());
        intrayId.setNoteText(inTray.getNoteText());

        return this.wmGenericDao.findById(intrayId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public InTray delete(InTrayId intrayId) throws EntityNotFoundException {
        LOGGER.debug("Deleting InTray with id: {}", intrayId);
        InTray deleted = this.wmGenericDao.findById(intrayId);
        if (deleted == null) {
            LOGGER.debug("No InTray found with id: {}", intrayId);
            throw new EntityNotFoundException(String.valueOf(intrayId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<InTray> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InTrays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<InTray> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InTrays");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table InTray to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

