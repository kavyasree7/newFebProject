/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Purchaseorder;


/**
 * ServiceImpl object for domain model class Purchaseorder.
 *
 * @see Purchaseorder
 */
@Service("SAMPLE.PurchaseorderService")
public class PurchaseorderServiceImpl implements PurchaseorderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PurchaseorderServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.PurchaseorderDao")
    private WMGenericDao<Purchaseorder, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Purchaseorder, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Purchaseorder create(Purchaseorder purchaseorder) {
        LOGGER.debug("Creating a new Purchaseorder with information: {}", purchaseorder);
        Purchaseorder purchaseorderCreated = this.wmGenericDao.create(purchaseorder);
        return purchaseorderCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Purchaseorder getById(BigInteger purchaseorderId) throws EntityNotFoundException {
        LOGGER.debug("Finding Purchaseorder by id: {}", purchaseorderId);
        Purchaseorder purchaseorder = this.wmGenericDao.findById(purchaseorderId);
        if (purchaseorder == null){
            LOGGER.debug("No Purchaseorder found with id: {}", purchaseorderId);
            throw new EntityNotFoundException(String.valueOf(purchaseorderId));
        }
        return purchaseorder;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Purchaseorder findById(BigInteger purchaseorderId) {
        LOGGER.debug("Finding Purchaseorder by id: {}", purchaseorderId);
        return this.wmGenericDao.findById(purchaseorderId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Purchaseorder update(Purchaseorder purchaseorder) throws EntityNotFoundException {
        LOGGER.debug("Updating Purchaseorder with information: {}", purchaseorder);
        this.wmGenericDao.update(purchaseorder);

        BigInteger purchaseorderId = purchaseorder.getPoid();

        return this.wmGenericDao.findById(purchaseorderId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Purchaseorder delete(BigInteger purchaseorderId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Purchaseorder with id: {}", purchaseorderId);
        Purchaseorder deleted = this.wmGenericDao.findById(purchaseorderId);
        if (deleted == null) {
            LOGGER.debug("No Purchaseorder found with id: {}", purchaseorderId);
            throw new EntityNotFoundException(String.valueOf(purchaseorderId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Purchaseorder> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Purchaseorders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Purchaseorder> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Purchaseorders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Purchaseorder to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

