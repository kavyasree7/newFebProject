/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vstafac2;
import com.newfebproject.sample.Vstafac2Id;


/**
 * ServiceImpl object for domain model class Vstafac2.
 *
 * @see Vstafac2
 */
@Service("SAMPLE.Vstafac2Service")
public class Vstafac2ServiceImpl implements Vstafac2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vstafac2ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vstafac2Dao")
    private WMGenericDao<Vstafac2, Vstafac2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vstafac2, Vstafac2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vstafac2 create(Vstafac2 vstafac2) {
        LOGGER.debug("Creating a new Vstafac2 with information: {}", vstafac2);
        Vstafac2 vstafac2Created = this.wmGenericDao.create(vstafac2);
        return vstafac2Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vstafac2 getById(Vstafac2Id vstafac2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vstafac2 by id: {}", vstafac2Id);
        Vstafac2 vstafac2 = this.wmGenericDao.findById(vstafac2Id);
        if (vstafac2 == null){
            LOGGER.debug("No Vstafac2 found with id: {}", vstafac2Id);
            throw new EntityNotFoundException(String.valueOf(vstafac2Id));
        }
        return vstafac2;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vstafac2 findById(Vstafac2Id vstafac2Id) {
        LOGGER.debug("Finding Vstafac2 by id: {}", vstafac2Id);
        return this.wmGenericDao.findById(vstafac2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vstafac2 update(Vstafac2 vstafac2) throws EntityNotFoundException {
        LOGGER.debug("Updating Vstafac2 with information: {}", vstafac2);
        this.wmGenericDao.update(vstafac2);

        Vstafac2Id vstafac2Id = new Vstafac2Id();
        vstafac2Id.setProjno(vstafac2.getProjno());
        vstafac2Id.setActno(vstafac2.getActno());
        vstafac2Id.setActdesc(vstafac2.getActdesc());
        vstafac2Id.setEmpno(vstafac2.getEmpno());
        vstafac2Id.setFirstnme(vstafac2.getFirstnme());
        vstafac2Id.setMidinit(vstafac2.getMidinit());
        vstafac2Id.setLastname(vstafac2.getLastname());
        vstafac2Id.setEmptime(vstafac2.getEmptime());
        vstafac2Id.setStdate(vstafac2.getStdate());
        vstafac2Id.setEndate(vstafac2.getEndate());
        vstafac2Id.setType(vstafac2.getType());

        return this.wmGenericDao.findById(vstafac2Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vstafac2 delete(Vstafac2Id vstafac2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vstafac2 with id: {}", vstafac2Id);
        Vstafac2 deleted = this.wmGenericDao.findById(vstafac2Id);
        if (deleted == null) {
            LOGGER.debug("No Vstafac2 found with id: {}", vstafac2Id);
            throw new EntityNotFoundException(String.valueOf(vstafac2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vstafac2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vstafac2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vstafac2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vstafac2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vstafac2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

