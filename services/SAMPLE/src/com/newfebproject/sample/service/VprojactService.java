/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vprojact;
import com.newfebproject.sample.VprojactId;

/**
 * Service object for domain model class {@link Vprojact}.
 */
public interface VprojactService {

    /**
     * Creates a new Vprojact. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vprojact if any.
     *
     * @param vprojact Details of the Vprojact to be created; value cannot be null.
     * @return The newly created Vprojact.
     */
	Vprojact create(Vprojact vprojact);


	/**
	 * Returns Vprojact by given id if exists.
	 *
	 * @param vprojactId The id of the Vprojact to get; value cannot be null.
	 * @return Vprojact associated with the given vprojactId.
     * @throws EntityNotFoundException If no Vprojact is found.
	 */
	Vprojact getById(VprojactId vprojactId) throws EntityNotFoundException;

    /**
	 * Find and return the Vprojact by given id if exists, returns null otherwise.
	 *
	 * @param vprojactId The id of the Vprojact to get; value cannot be null.
	 * @return Vprojact associated with the given vprojactId.
	 */
	Vprojact findById(VprojactId vprojactId);


	/**
	 * Updates the details of an existing Vprojact. It replaces all fields of the existing Vprojact with the given vprojact.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Vprojact if any.
     *
	 * @param vprojact The details of the Vprojact to be updated; value cannot be null.
	 * @return The updated Vprojact.
	 * @throws EntityNotFoundException if no Vprojact is found with given input.
	 */
	Vprojact update(Vprojact vprojact) throws EntityNotFoundException;

    /**
	 * Deletes an existing Vprojact with the given id.
	 *
	 * @param vprojactId The id of the Vprojact to be deleted; value cannot be null.
	 * @return The deleted Vprojact.
	 * @throws EntityNotFoundException if no Vprojact found with the given id.
	 */
	Vprojact delete(VprojactId vprojactId) throws EntityNotFoundException;

	/**
	 * Find all Vprojacts matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vprojacts.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Vprojact> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Vprojacts matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vprojacts.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Vprojact> findAll(String query, Pageable pageable);

    /**
	 * Exports all Vprojacts matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Vprojacts in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Vprojact.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

