/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Purchaseorder;

/**
 * Service object for domain model class {@link Purchaseorder}.
 */
public interface PurchaseorderService {

    /**
     * Creates a new Purchaseorder. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Purchaseorder if any.
     *
     * @param purchaseorder Details of the Purchaseorder to be created; value cannot be null.
     * @return The newly created Purchaseorder.
     */
	Purchaseorder create(Purchaseorder purchaseorder);


	/**
	 * Returns Purchaseorder by given id if exists.
	 *
	 * @param purchaseorderId The id of the Purchaseorder to get; value cannot be null.
	 * @return Purchaseorder associated with the given purchaseorderId.
     * @throws EntityNotFoundException If no Purchaseorder is found.
	 */
	Purchaseorder getById(BigInteger purchaseorderId) throws EntityNotFoundException;

    /**
	 * Find and return the Purchaseorder by given id if exists, returns null otherwise.
	 *
	 * @param purchaseorderId The id of the Purchaseorder to get; value cannot be null.
	 * @return Purchaseorder associated with the given purchaseorderId.
	 */
	Purchaseorder findById(BigInteger purchaseorderId);


	/**
	 * Updates the details of an existing Purchaseorder. It replaces all fields of the existing Purchaseorder with the given purchaseorder.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Purchaseorder if any.
     *
	 * @param purchaseorder The details of the Purchaseorder to be updated; value cannot be null.
	 * @return The updated Purchaseorder.
	 * @throws EntityNotFoundException if no Purchaseorder is found with given input.
	 */
	Purchaseorder update(Purchaseorder purchaseorder) throws EntityNotFoundException;

    /**
	 * Deletes an existing Purchaseorder with the given id.
	 *
	 * @param purchaseorderId The id of the Purchaseorder to be deleted; value cannot be null.
	 * @return The deleted Purchaseorder.
	 * @throws EntityNotFoundException if no Purchaseorder found with the given id.
	 */
	Purchaseorder delete(BigInteger purchaseorderId) throws EntityNotFoundException;

	/**
	 * Find all Purchaseorders matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Purchaseorders.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Purchaseorder> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Purchaseorders matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Purchaseorders.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Purchaseorder> findAll(String query, Pageable pageable);

    /**
	 * Exports all Purchaseorders matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Purchaseorders in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Purchaseorder.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

