/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vastrde2;
import com.newfebproject.sample.Vastrde2Id;


/**
 * ServiceImpl object for domain model class Vastrde2.
 *
 * @see Vastrde2
 */
@Service("SAMPLE.Vastrde2Service")
public class Vastrde2ServiceImpl implements Vastrde2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vastrde2ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vastrde2Dao")
    private WMGenericDao<Vastrde2, Vastrde2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vastrde2, Vastrde2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vastrde2 create(Vastrde2 vastrde2) {
        LOGGER.debug("Creating a new Vastrde2 with information: {}", vastrde2);
        Vastrde2 vastrde2Created = this.wmGenericDao.create(vastrde2);
        return vastrde2Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vastrde2 getById(Vastrde2Id vastrde2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vastrde2 by id: {}", vastrde2Id);
        Vastrde2 vastrde2 = this.wmGenericDao.findById(vastrde2Id);
        if (vastrde2 == null){
            LOGGER.debug("No Vastrde2 found with id: {}", vastrde2Id);
            throw new EntityNotFoundException(String.valueOf(vastrde2Id));
        }
        return vastrde2;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vastrde2 findById(Vastrde2Id vastrde2Id) {
        LOGGER.debug("Finding Vastrde2 by id: {}", vastrde2Id);
        return this.wmGenericDao.findById(vastrde2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vastrde2 update(Vastrde2 vastrde2) throws EntityNotFoundException {
        LOGGER.debug("Updating Vastrde2 with information: {}", vastrde2);
        this.wmGenericDao.update(vastrde2);

        Vastrde2Id vastrde2Id = new Vastrde2Id();
        vastrde2Id.setDept1no(vastrde2.getDept1no());
        vastrde2Id.setDept1nam(vastrde2.getDept1nam());
        vastrde2Id.setEmp1no(vastrde2.getEmp1no());
        vastrde2Id.setEmp1fn(vastrde2.getEmp1fn());
        vastrde2Id.setEmp1mi(vastrde2.getEmp1mi());
        vastrde2Id.setEmp1ln(vastrde2.getEmp1ln());
        vastrde2Id.setType2(vastrde2.getType2());
        vastrde2Id.setDept2no(vastrde2.getDept2no());
        vastrde2Id.setDept2nam(vastrde2.getDept2nam());
        vastrde2Id.setEmp2no(vastrde2.getEmp2no());
        vastrde2Id.setEmp2fn(vastrde2.getEmp2fn());
        vastrde2Id.setEmp2mi(vastrde2.getEmp2mi());
        vastrde2Id.setEmp2ln(vastrde2.getEmp2ln());

        return this.wmGenericDao.findById(vastrde2Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vastrde2 delete(Vastrde2Id vastrde2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vastrde2 with id: {}", vastrde2Id);
        Vastrde2 deleted = this.wmGenericDao.findById(vastrde2Id);
        if (deleted == null) {
            LOGGER.debug("No Vastrde2 found with id: {}", vastrde2Id);
            throw new EntityNotFoundException(String.valueOf(vastrde2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vastrde2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vastrde2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vastrde2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vastrde2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vastrde2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

