/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Empprojact;
import com.newfebproject.sample.Projact;
import com.newfebproject.sample.ProjactId;


/**
 * ServiceImpl object for domain model class Projact.
 *
 * @see Projact
 */
@Service("SAMPLE.ProjactService")
public class ProjactServiceImpl implements ProjactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjactServiceImpl.class);

    @Autowired
	@Qualifier("SAMPLE.EmpprojactService")
	private EmpprojactService empprojactService;

    @Autowired
    @Qualifier("SAMPLE.ProjactDao")
    private WMGenericDao<Projact, ProjactId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Projact, ProjactId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Projact create(Projact projact) {
        LOGGER.debug("Creating a new Projact with information: {}", projact);
        Projact projactCreated = this.wmGenericDao.create(projact);
        if(projactCreated.getEmpprojacts() != null) {
            for(Empprojact empprojact : projactCreated.getEmpprojacts()) {
                empprojact.setProjact(projactCreated);
                LOGGER.debug("Creating a new child Empprojact with information: {}", empprojact);
                empprojactService.create(empprojact);
            }
        }
        return projactCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Projact getById(ProjactId projactId) throws EntityNotFoundException {
        LOGGER.debug("Finding Projact by id: {}", projactId);
        Projact projact = this.wmGenericDao.findById(projactId);
        if (projact == null){
            LOGGER.debug("No Projact found with id: {}", projactId);
            throw new EntityNotFoundException(String.valueOf(projactId));
        }
        return projact;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Projact findById(ProjactId projactId) {
        LOGGER.debug("Finding Projact by id: {}", projactId);
        return this.wmGenericDao.findById(projactId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Projact update(Projact projact) throws EntityNotFoundException {
        LOGGER.debug("Updating Projact with information: {}", projact);
        this.wmGenericDao.update(projact);

        ProjactId projactId = new ProjactId();
        projactId.setProjno(projact.getProjno());
        projactId.setActno(projact.getActno());
        projactId.setAcstdate(projact.getAcstdate());

        return this.wmGenericDao.findById(projactId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Projact delete(ProjactId projactId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Projact with id: {}", projactId);
        Projact deleted = this.wmGenericDao.findById(projactId);
        if (deleted == null) {
            LOGGER.debug("No Projact found with id: {}", projactId);
            throw new EntityNotFoundException(String.valueOf(projactId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Projact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Projacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Projact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Projacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Projact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Empprojact> findAssociatedEmpprojacts(String projno, Short actno, Date acstdate, Pageable pageable) {
        LOGGER.debug("Fetching all associated empprojacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("projact.projno = '" + projno + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("projact.actno = '" + actno + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("projact.acstdate = '" + acstdate + "'");

        return empprojactService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmpprojactService instance
	 */
	protected void setEmpprojactService(EmpprojactService service) {
        this.empprojactService = service;
    }

}

