/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Customer;
import com.newfebproject.sample.Purchaseorder;


/**
 * ServiceImpl object for domain model class Customer.
 *
 * @see Customer
 */
@Service("SAMPLE.CustomerService")
public class CustomerServiceImpl implements CustomerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerServiceImpl.class);

    @Autowired
	@Qualifier("SAMPLE.PurchaseorderService")
	private PurchaseorderService purchaseorderService;

    @Autowired
    @Qualifier("SAMPLE.CustomerDao")
    private WMGenericDao<Customer, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Customer, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Customer create(Customer customer) {
        LOGGER.debug("Creating a new Customer with information: {}", customer);
        Customer customerCreated = this.wmGenericDao.create(customer);
        if(customerCreated.getPurchaseorders() != null) {
            for(Purchaseorder purchaseorder : customerCreated.getPurchaseorders()) {
                purchaseorder.setCustomer(customerCreated);
                LOGGER.debug("Creating a new child Purchaseorder with information: {}", purchaseorder);
                purchaseorderService.create(purchaseorder);
            }
        }
        return customerCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Customer getById(BigInteger customerId) throws EntityNotFoundException {
        LOGGER.debug("Finding Customer by id: {}", customerId);
        Customer customer = this.wmGenericDao.findById(customerId);
        if (customer == null){
            LOGGER.debug("No Customer found with id: {}", customerId);
            throw new EntityNotFoundException(String.valueOf(customerId));
        }
        return customer;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Customer findById(BigInteger customerId) {
        LOGGER.debug("Finding Customer by id: {}", customerId);
        return this.wmGenericDao.findById(customerId);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Customer getByInfo(byte[] info) {
        Map<String, Object> infoMap = new HashMap<>();
        infoMap.put("info", info);

        LOGGER.debug("Finding Customer by unique keys: {}", infoMap);
        Customer customer = this.wmGenericDao.findByUniqueKey(infoMap);

        if (customer == null){
            LOGGER.debug("No Customer found with given unique key values: {}", infoMap);
            throw new EntityNotFoundException(String.valueOf(infoMap));
        }

        return customer;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Customer update(Customer customer) throws EntityNotFoundException {
        LOGGER.debug("Updating Customer with information: {}", customer);
        this.wmGenericDao.update(customer);

        BigInteger customerId = customer.getCid();

        return this.wmGenericDao.findById(customerId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Customer delete(BigInteger customerId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Customer with id: {}", customerId);
        Customer deleted = this.wmGenericDao.findById(customerId);
        if (deleted == null) {
            LOGGER.debug("No Customer found with id: {}", customerId);
            throw new EntityNotFoundException(String.valueOf(customerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Customer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Customer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Purchaseorder> findAssociatedPurchaseorders(BigInteger cid, Pageable pageable) {
        LOGGER.debug("Fetching all associated purchaseorders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("customer.cid = '" + cid + "'");

        return purchaseorderService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PurchaseorderService instance
	 */
	protected void setPurchaseorderService(PurchaseorderService service) {
        this.purchaseorderService = service;
    }

}

