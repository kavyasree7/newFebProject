/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Projact;
import com.newfebproject.sample.Project;

/**
 * Service object for domain model class {@link Project}.
 */
public interface ProjectService {

    /**
     * Creates a new Project. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Project if any.
     *
     * @param project Details of the Project to be created; value cannot be null.
     * @return The newly created Project.
     */
	Project create(Project project);


	/**
	 * Returns Project by given id if exists.
	 *
	 * @param projectId The id of the Project to get; value cannot be null.
	 * @return Project associated with the given projectId.
     * @throws EntityNotFoundException If no Project is found.
	 */
	Project getById(String projectId) throws EntityNotFoundException;

    /**
	 * Find and return the Project by given id if exists, returns null otherwise.
	 *
	 * @param projectId The id of the Project to get; value cannot be null.
	 * @return Project associated with the given projectId.
	 */
	Project findById(String projectId);


	/**
	 * Updates the details of an existing Project. It replaces all fields of the existing Project with the given project.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Project if any.
     *
	 * @param project The details of the Project to be updated; value cannot be null.
	 * @return The updated Project.
	 * @throws EntityNotFoundException if no Project is found with given input.
	 */
	Project update(Project project) throws EntityNotFoundException;

    /**
	 * Deletes an existing Project with the given id.
	 *
	 * @param projectId The id of the Project to be deleted; value cannot be null.
	 * @return The deleted Project.
	 * @throws EntityNotFoundException if no Project found with the given id.
	 */
	Project delete(String projectId) throws EntityNotFoundException;

	/**
	 * Find all Projects matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Projects.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Project> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Projects matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Projects.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Project> findAll(String query, Pageable pageable);

    /**
	 * Exports all Projects matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Projects in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Project.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated projacts for given Project id.
     *
     * @param projno value of projno; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Projact instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Projact> findAssociatedProjacts(String projno, Pageable pageable);

    /*
     * Returns the associated projectsForMajproj for given Project id.
     *
     * @param projno value of projno; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Project instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Project> findAssociatedProjectsForMajproj(String projno, Pageable pageable);

}

