/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vempprojact;
import com.newfebproject.sample.VempprojactId;


/**
 * ServiceImpl object for domain model class Vempprojact.
 *
 * @see Vempprojact
 */
@Service("SAMPLE.VempprojactService")
public class VempprojactServiceImpl implements VempprojactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VempprojactServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.VempprojactDao")
    private WMGenericDao<Vempprojact, VempprojactId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vempprojact, VempprojactId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vempprojact create(Vempprojact vempprojact) {
        LOGGER.debug("Creating a new Vempprojact with information: {}", vempprojact);
        Vempprojact vempprojactCreated = this.wmGenericDao.create(vempprojact);
        return vempprojactCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vempprojact getById(VempprojactId vempprojactId) throws EntityNotFoundException {
        LOGGER.debug("Finding Vempprojact by id: {}", vempprojactId);
        Vempprojact vempprojact = this.wmGenericDao.findById(vempprojactId);
        if (vempprojact == null){
            LOGGER.debug("No Vempprojact found with id: {}", vempprojactId);
            throw new EntityNotFoundException(String.valueOf(vempprojactId));
        }
        return vempprojact;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vempprojact findById(VempprojactId vempprojactId) {
        LOGGER.debug("Finding Vempprojact by id: {}", vempprojactId);
        return this.wmGenericDao.findById(vempprojactId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vempprojact update(Vempprojact vempprojact) throws EntityNotFoundException {
        LOGGER.debug("Updating Vempprojact with information: {}", vempprojact);
        this.wmGenericDao.update(vempprojact);

        VempprojactId vempprojactId = new VempprojactId();
        vempprojactId.setEmpno(vempprojact.getEmpno());
        vempprojactId.setProjno(vempprojact.getProjno());
        vempprojactId.setActno(vempprojact.getActno());
        vempprojactId.setEmptime(vempprojact.getEmptime());
        vempprojactId.setEmstdate(vempprojact.getEmstdate());
        vempprojactId.setEmendate(vempprojact.getEmendate());

        return this.wmGenericDao.findById(vempprojactId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vempprojact delete(VempprojactId vempprojactId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vempprojact with id: {}", vempprojactId);
        Vempprojact deleted = this.wmGenericDao.findById(vempprojactId);
        if (deleted == null) {
            LOGGER.debug("No Vempprojact found with id: {}", vempprojactId);
            throw new EntityNotFoundException(String.valueOf(vempprojactId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vempprojact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vempprojacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vempprojact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vempprojacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vempprojact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

