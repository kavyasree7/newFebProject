/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.ClSched;
import com.newfebproject.sample.ClSchedId;

/**
 * Service object for domain model class {@link ClSched}.
 */
public interface ClSchedService {

    /**
     * Creates a new ClSched. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ClSched if any.
     *
     * @param clSched Details of the ClSched to be created; value cannot be null.
     * @return The newly created ClSched.
     */
	ClSched create(ClSched clSched);


	/**
	 * Returns ClSched by given id if exists.
	 *
	 * @param clschedId The id of the ClSched to get; value cannot be null.
	 * @return ClSched associated with the given clschedId.
     * @throws EntityNotFoundException If no ClSched is found.
	 */
	ClSched getById(ClSchedId clschedId) throws EntityNotFoundException;

    /**
	 * Find and return the ClSched by given id if exists, returns null otherwise.
	 *
	 * @param clschedId The id of the ClSched to get; value cannot be null.
	 * @return ClSched associated with the given clschedId.
	 */
	ClSched findById(ClSchedId clschedId);


	/**
	 * Updates the details of an existing ClSched. It replaces all fields of the existing ClSched with the given clSched.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on ClSched if any.
     *
	 * @param clSched The details of the ClSched to be updated; value cannot be null.
	 * @return The updated ClSched.
	 * @throws EntityNotFoundException if no ClSched is found with given input.
	 */
	ClSched update(ClSched clSched) throws EntityNotFoundException;

    /**
	 * Deletes an existing ClSched with the given id.
	 *
	 * @param clschedId The id of the ClSched to be deleted; value cannot be null.
	 * @return The deleted ClSched.
	 * @throws EntityNotFoundException if no ClSched found with the given id.
	 */
	ClSched delete(ClSchedId clschedId) throws EntityNotFoundException;

	/**
	 * Find all ClScheds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ClScheds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<ClSched> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all ClScheds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ClScheds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<ClSched> findAll(String query, Pageable pageable);

    /**
	 * Exports all ClScheds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ClScheds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the ClSched.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

