/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vprojre1;
import com.newfebproject.sample.Vprojre1Id;


/**
 * ServiceImpl object for domain model class Vprojre1.
 *
 * @see Vprojre1
 */
@Service("SAMPLE.Vprojre1Service")
public class Vprojre1ServiceImpl implements Vprojre1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vprojre1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vprojre1Dao")
    private WMGenericDao<Vprojre1, Vprojre1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vprojre1, Vprojre1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vprojre1 create(Vprojre1 vprojre1) {
        LOGGER.debug("Creating a new Vprojre1 with information: {}", vprojre1);
        Vprojre1 vprojre1Created = this.wmGenericDao.create(vprojre1);
        return vprojre1Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vprojre1 getById(Vprojre1Id vprojre1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vprojre1 by id: {}", vprojre1Id);
        Vprojre1 vprojre1 = this.wmGenericDao.findById(vprojre1Id);
        if (vprojre1 == null){
            LOGGER.debug("No Vprojre1 found with id: {}", vprojre1Id);
            throw new EntityNotFoundException(String.valueOf(vprojre1Id));
        }
        return vprojre1;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vprojre1 findById(Vprojre1Id vprojre1Id) {
        LOGGER.debug("Finding Vprojre1 by id: {}", vprojre1Id);
        return this.wmGenericDao.findById(vprojre1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vprojre1 update(Vprojre1 vprojre1) throws EntityNotFoundException {
        LOGGER.debug("Updating Vprojre1 with information: {}", vprojre1);
        this.wmGenericDao.update(vprojre1);

        Vprojre1Id vprojre1Id = new Vprojre1Id();
        vprojre1Id.setProjno(vprojre1.getProjno());
        vprojre1Id.setProjname(vprojre1.getProjname());
        vprojre1Id.setProjdep(vprojre1.getProjdep());
        vprojre1Id.setRespemp(vprojre1.getRespemp());
        vprojre1Id.setFirstnme(vprojre1.getFirstnme());
        vprojre1Id.setMidinit(vprojre1.getMidinit());
        vprojre1Id.setLastname(vprojre1.getLastname());
        vprojre1Id.setMajproj(vprojre1.getMajproj());

        return this.wmGenericDao.findById(vprojre1Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vprojre1 delete(Vprojre1Id vprojre1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vprojre1 with id: {}", vprojre1Id);
        Vprojre1 deleted = this.wmGenericDao.findById(vprojre1Id);
        if (deleted == null) {
            LOGGER.debug("No Vprojre1 found with id: {}", vprojre1Id);
            throw new EntityNotFoundException(String.valueOf(vprojre1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vprojre1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vprojre1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vprojre1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vprojre1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vprojre1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

