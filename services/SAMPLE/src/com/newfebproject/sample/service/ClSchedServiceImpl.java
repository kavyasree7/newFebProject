/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.ClSched;
import com.newfebproject.sample.ClSchedId;


/**
 * ServiceImpl object for domain model class ClSched.
 *
 * @see ClSched
 */
@Service("SAMPLE.ClSchedService")
public class ClSchedServiceImpl implements ClSchedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ClSchedServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.ClSchedDao")
    private WMGenericDao<ClSched, ClSchedId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ClSched, ClSchedId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public ClSched create(ClSched clSched) {
        LOGGER.debug("Creating a new ClSched with information: {}", clSched);
        ClSched clSchedCreated = this.wmGenericDao.create(clSched);
        return clSchedCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public ClSched getById(ClSchedId clschedId) throws EntityNotFoundException {
        LOGGER.debug("Finding ClSched by id: {}", clschedId);
        ClSched clSched = this.wmGenericDao.findById(clschedId);
        if (clSched == null){
            LOGGER.debug("No ClSched found with id: {}", clschedId);
            throw new EntityNotFoundException(String.valueOf(clschedId));
        }
        return clSched;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public ClSched findById(ClSchedId clschedId) {
        LOGGER.debug("Finding ClSched by id: {}", clschedId);
        return this.wmGenericDao.findById(clschedId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public ClSched update(ClSched clSched) throws EntityNotFoundException {
        LOGGER.debug("Updating ClSched with information: {}", clSched);
        this.wmGenericDao.update(clSched);

        ClSchedId clschedId = new ClSchedId();
        clschedId.setClassCode(clSched.getClassCode());
        clschedId.setDay(clSched.getDay());
        clschedId.setStarting(clSched.getStarting());
        clschedId.setEnding(clSched.getEnding());

        return this.wmGenericDao.findById(clschedId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public ClSched delete(ClSchedId clschedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ClSched with id: {}", clschedId);
        ClSched deleted = this.wmGenericDao.findById(clschedId);
        if (deleted == null) {
            LOGGER.debug("No ClSched found with id: {}", clschedId);
            throw new EntityNotFoundException(String.valueOf(clschedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<ClSched> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ClScheds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<ClSched> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ClScheds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table ClSched to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

