/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.EmpResume;
import com.newfebproject.sample.EmpResumeId;


/**
 * ServiceImpl object for domain model class EmpResume.
 *
 * @see EmpResume
 */
@Service("SAMPLE.EmpResumeService")
public class EmpResumeServiceImpl implements EmpResumeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpResumeServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.EmpResumeDao")
    private WMGenericDao<EmpResume, EmpResumeId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmpResume, EmpResumeId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public EmpResume create(EmpResume empResume) {
        LOGGER.debug("Creating a new EmpResume with information: {}", empResume);
        EmpResume empResumeCreated = this.wmGenericDao.create(empResume);
        return empResumeCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public EmpResume getById(EmpResumeId empresumeId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmpResume by id: {}", empresumeId);
        EmpResume empResume = this.wmGenericDao.findById(empresumeId);
        if (empResume == null){
            LOGGER.debug("No EmpResume found with id: {}", empresumeId);
            throw new EntityNotFoundException(String.valueOf(empresumeId));
        }
        return empResume;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public EmpResume findById(EmpResumeId empresumeId) {
        LOGGER.debug("Finding EmpResume by id: {}", empresumeId);
        return this.wmGenericDao.findById(empresumeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public EmpResume update(EmpResume empResume) throws EntityNotFoundException {
        LOGGER.debug("Updating EmpResume with information: {}", empResume);
        this.wmGenericDao.update(empResume);

        EmpResumeId empresumeId = new EmpResumeId();
        empresumeId.setEmpno(empResume.getEmpno());
        empresumeId.setResumeFormat(empResume.getResumeFormat());

        return this.wmGenericDao.findById(empresumeId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public EmpResume delete(EmpResumeId empresumeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmpResume with id: {}", empresumeId);
        EmpResume deleted = this.wmGenericDao.findById(empresumeId);
        if (deleted == null) {
            LOGGER.debug("No EmpResume found with id: {}", empresumeId);
            throw new EntityNotFoundException(String.valueOf(empresumeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<EmpResume> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpResumes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<EmpResume> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpResumes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table EmpResume to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

