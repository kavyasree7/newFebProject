/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Suppliers;


/**
 * ServiceImpl object for domain model class Suppliers.
 *
 * @see Suppliers
 */
@Service("SAMPLE.SuppliersService")
public class SuppliersServiceImpl implements SuppliersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SuppliersServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.SuppliersDao")
    private WMGenericDao<Suppliers, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Suppliers, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Suppliers create(Suppliers suppliers) {
        LOGGER.debug("Creating a new Suppliers with information: {}", suppliers);
        Suppliers suppliersCreated = this.wmGenericDao.create(suppliers);
        return suppliersCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Suppliers getById(String suppliersId) throws EntityNotFoundException {
        LOGGER.debug("Finding Suppliers by id: {}", suppliersId);
        Suppliers suppliers = this.wmGenericDao.findById(suppliersId);
        if (suppliers == null){
            LOGGER.debug("No Suppliers found with id: {}", suppliersId);
            throw new EntityNotFoundException(String.valueOf(suppliersId));
        }
        return suppliers;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Suppliers findById(String suppliersId) {
        LOGGER.debug("Finding Suppliers by id: {}", suppliersId);
        return this.wmGenericDao.findById(suppliersId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Suppliers update(Suppliers suppliers) throws EntityNotFoundException {
        LOGGER.debug("Updating Suppliers with information: {}", suppliers);
        this.wmGenericDao.update(suppliers);

        String suppliersId = suppliers.getSid();

        return this.wmGenericDao.findById(suppliersId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Suppliers delete(String suppliersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Suppliers with id: {}", suppliersId);
        Suppliers deleted = this.wmGenericDao.findById(suppliersId);
        if (deleted == null) {
            LOGGER.debug("No Suppliers found with id: {}", suppliersId);
            throw new EntityNotFoundException(String.valueOf(suppliersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Suppliers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Suppliers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Suppliers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Suppliers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Suppliers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

