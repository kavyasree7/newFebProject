/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vdepmg1;
import com.newfebproject.sample.Vdepmg1Id;


/**
 * ServiceImpl object for domain model class Vdepmg1.
 *
 * @see Vdepmg1
 */
@Service("SAMPLE.Vdepmg1Service")
public class Vdepmg1ServiceImpl implements Vdepmg1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vdepmg1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vdepmg1Dao")
    private WMGenericDao<Vdepmg1, Vdepmg1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vdepmg1, Vdepmg1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vdepmg1 create(Vdepmg1 vdepmg1) {
        LOGGER.debug("Creating a new Vdepmg1 with information: {}", vdepmg1);
        Vdepmg1 vdepmg1Created = this.wmGenericDao.create(vdepmg1);
        return vdepmg1Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vdepmg1 getById(Vdepmg1Id vdepmg1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vdepmg1 by id: {}", vdepmg1Id);
        Vdepmg1 vdepmg1 = this.wmGenericDao.findById(vdepmg1Id);
        if (vdepmg1 == null){
            LOGGER.debug("No Vdepmg1 found with id: {}", vdepmg1Id);
            throw new EntityNotFoundException(String.valueOf(vdepmg1Id));
        }
        return vdepmg1;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vdepmg1 findById(Vdepmg1Id vdepmg1Id) {
        LOGGER.debug("Finding Vdepmg1 by id: {}", vdepmg1Id);
        return this.wmGenericDao.findById(vdepmg1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vdepmg1 update(Vdepmg1 vdepmg1) throws EntityNotFoundException {
        LOGGER.debug("Updating Vdepmg1 with information: {}", vdepmg1);
        this.wmGenericDao.update(vdepmg1);

        Vdepmg1Id vdepmg1Id = new Vdepmg1Id();
        vdepmg1Id.setDeptno(vdepmg1.getDeptno());
        vdepmg1Id.setDeptname(vdepmg1.getDeptname());
        vdepmg1Id.setMgrno(vdepmg1.getMgrno());
        vdepmg1Id.setFirstnme(vdepmg1.getFirstnme());
        vdepmg1Id.setMidinit(vdepmg1.getMidinit());
        vdepmg1Id.setLastname(vdepmg1.getLastname());
        vdepmg1Id.setAdmrdept(vdepmg1.getAdmrdept());

        return this.wmGenericDao.findById(vdepmg1Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vdepmg1 delete(Vdepmg1Id vdepmg1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vdepmg1 with id: {}", vdepmg1Id);
        Vdepmg1 deleted = this.wmGenericDao.findById(vdepmg1Id);
        if (deleted == null) {
            LOGGER.debug("No Vdepmg1 found with id: {}", vdepmg1Id);
            throw new EntityNotFoundException(String.valueOf(vdepmg1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vdepmg1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vdepmg1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vdepmg1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vdepmg1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vdepmg1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

