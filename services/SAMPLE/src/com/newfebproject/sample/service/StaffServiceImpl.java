/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Staff;
import com.newfebproject.sample.StaffId;


/**
 * ServiceImpl object for domain model class Staff.
 *
 * @see Staff
 */
@Service("SAMPLE.StaffService")
public class StaffServiceImpl implements StaffService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StaffServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.StaffDao")
    private WMGenericDao<Staff, StaffId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Staff, StaffId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Staff create(Staff staff) {
        LOGGER.debug("Creating a new Staff with information: {}", staff);
        Staff staffCreated = this.wmGenericDao.create(staff);
        return staffCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Staff getById(StaffId staffId) throws EntityNotFoundException {
        LOGGER.debug("Finding Staff by id: {}", staffId);
        Staff staff = this.wmGenericDao.findById(staffId);
        if (staff == null){
            LOGGER.debug("No Staff found with id: {}", staffId);
            throw new EntityNotFoundException(String.valueOf(staffId));
        }
        return staff;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Staff findById(StaffId staffId) {
        LOGGER.debug("Finding Staff by id: {}", staffId);
        return this.wmGenericDao.findById(staffId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Staff update(Staff staff) throws EntityNotFoundException {
        LOGGER.debug("Updating Staff with information: {}", staff);
        this.wmGenericDao.update(staff);

        StaffId staffId = new StaffId();
        staffId.setId(staff.getId());
        staffId.setName(staff.getName());
        staffId.setDept(staff.getDept());
        staffId.setJob(staff.getJob());
        staffId.setYears(staff.getYears());
        staffId.setSalary(staff.getSalary());
        staffId.setComm(staff.getComm());

        return this.wmGenericDao.findById(staffId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Staff delete(StaffId staffId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Staff with id: {}", staffId);
        Staff deleted = this.wmGenericDao.findById(staffId);
        if (deleted == null) {
            LOGGER.debug("No Staff found with id: {}", staffId);
            throw new EntityNotFoundException(String.valueOf(staffId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Staff> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Staffs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Staff> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Staffs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Staff to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

