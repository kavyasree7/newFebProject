/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vemplp;
import com.newfebproject.sample.VemplpId;


/**
 * ServiceImpl object for domain model class Vemplp.
 *
 * @see Vemplp
 */
@Service("SAMPLE.VemplpService")
public class VemplpServiceImpl implements VemplpService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VemplpServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.VemplpDao")
    private WMGenericDao<Vemplp, VemplpId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vemplp, VemplpId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vemplp create(Vemplp vemplp) {
        LOGGER.debug("Creating a new Vemplp with information: {}", vemplp);
        Vemplp vemplpCreated = this.wmGenericDao.create(vemplp);
        return vemplpCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vemplp getById(VemplpId vemplpId) throws EntityNotFoundException {
        LOGGER.debug("Finding Vemplp by id: {}", vemplpId);
        Vemplp vemplp = this.wmGenericDao.findById(vemplpId);
        if (vemplp == null){
            LOGGER.debug("No Vemplp found with id: {}", vemplpId);
            throw new EntityNotFoundException(String.valueOf(vemplpId));
        }
        return vemplp;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vemplp findById(VemplpId vemplpId) {
        LOGGER.debug("Finding Vemplp by id: {}", vemplpId);
        return this.wmGenericDao.findById(vemplpId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vemplp update(Vemplp vemplp) throws EntityNotFoundException {
        LOGGER.debug("Updating Vemplp with information: {}", vemplp);
        this.wmGenericDao.update(vemplp);

        VemplpId vemplpId = new VemplpId();
        vemplpId.setEmployeenumber(vemplp.getEmployeenumber());
        vemplpId.setPhonenumber(vemplp.getPhonenumber());

        return this.wmGenericDao.findById(vemplpId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vemplp delete(VemplpId vemplpId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vemplp with id: {}", vemplpId);
        Vemplp deleted = this.wmGenericDao.findById(vemplpId);
        if (deleted == null) {
            LOGGER.debug("No Vemplp found with id: {}", vemplpId);
            throw new EntityNotFoundException(String.valueOf(vemplpId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vemplp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vemplps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vemplp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vemplps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vemplp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

