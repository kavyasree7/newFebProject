/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vemp;
import com.newfebproject.sample.VempId;

/**
 * Service object for domain model class {@link Vemp}.
 */
public interface VempService {

    /**
     * Creates a new Vemp. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vemp if any.
     *
     * @param vemp Details of the Vemp to be created; value cannot be null.
     * @return The newly created Vemp.
     */
	Vemp create(Vemp vemp);


	/**
	 * Returns Vemp by given id if exists.
	 *
	 * @param vempId The id of the Vemp to get; value cannot be null.
	 * @return Vemp associated with the given vempId.
     * @throws EntityNotFoundException If no Vemp is found.
	 */
	Vemp getById(VempId vempId) throws EntityNotFoundException;

    /**
	 * Find and return the Vemp by given id if exists, returns null otherwise.
	 *
	 * @param vempId The id of the Vemp to get; value cannot be null.
	 * @return Vemp associated with the given vempId.
	 */
	Vemp findById(VempId vempId);


	/**
	 * Updates the details of an existing Vemp. It replaces all fields of the existing Vemp with the given vemp.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Vemp if any.
     *
	 * @param vemp The details of the Vemp to be updated; value cannot be null.
	 * @return The updated Vemp.
	 * @throws EntityNotFoundException if no Vemp is found with given input.
	 */
	Vemp update(Vemp vemp) throws EntityNotFoundException;

    /**
	 * Deletes an existing Vemp with the given id.
	 *
	 * @param vempId The id of the Vemp to be deleted; value cannot be null.
	 * @return The deleted Vemp.
	 * @throws EntityNotFoundException if no Vemp found with the given id.
	 */
	Vemp delete(VempId vempId) throws EntityNotFoundException;

	/**
	 * Find all Vemps matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vemps.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Vemp> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Vemps matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vemps.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Vemp> findAll(String query, Pageable pageable);

    /**
	 * Exports all Vemps matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Vemps in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Vemp.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

