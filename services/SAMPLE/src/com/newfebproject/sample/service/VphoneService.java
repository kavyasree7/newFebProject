/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vphone;
import com.newfebproject.sample.VphoneId;

/**
 * Service object for domain model class {@link Vphone}.
 */
public interface VphoneService {

    /**
     * Creates a new Vphone. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vphone if any.
     *
     * @param vphone Details of the Vphone to be created; value cannot be null.
     * @return The newly created Vphone.
     */
	Vphone create(Vphone vphone);


	/**
	 * Returns Vphone by given id if exists.
	 *
	 * @param vphoneId The id of the Vphone to get; value cannot be null.
	 * @return Vphone associated with the given vphoneId.
     * @throws EntityNotFoundException If no Vphone is found.
	 */
	Vphone getById(VphoneId vphoneId) throws EntityNotFoundException;

    /**
	 * Find and return the Vphone by given id if exists, returns null otherwise.
	 *
	 * @param vphoneId The id of the Vphone to get; value cannot be null.
	 * @return Vphone associated with the given vphoneId.
	 */
	Vphone findById(VphoneId vphoneId);


	/**
	 * Updates the details of an existing Vphone. It replaces all fields of the existing Vphone with the given vphone.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Vphone if any.
     *
	 * @param vphone The details of the Vphone to be updated; value cannot be null.
	 * @return The updated Vphone.
	 * @throws EntityNotFoundException if no Vphone is found with given input.
	 */
	Vphone update(Vphone vphone) throws EntityNotFoundException;

    /**
	 * Deletes an existing Vphone with the given id.
	 *
	 * @param vphoneId The id of the Vphone to be deleted; value cannot be null.
	 * @return The deleted Vphone.
	 * @throws EntityNotFoundException if no Vphone found with the given id.
	 */
	Vphone delete(VphoneId vphoneId) throws EntityNotFoundException;

	/**
	 * Find all Vphones matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vphones.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Vphone> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Vphones matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vphones.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Vphone> findAll(String query, Pageable pageable);

    /**
	 * Exports all Vphones matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Vphones in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Vphone.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

