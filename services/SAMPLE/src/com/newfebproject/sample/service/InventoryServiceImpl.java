/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Inventory;


/**
 * ServiceImpl object for domain model class Inventory.
 *
 * @see Inventory
 */
@Service("SAMPLE.InventoryService")
public class InventoryServiceImpl implements InventoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InventoryServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.InventoryDao")
    private WMGenericDao<Inventory, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Inventory, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Inventory create(Inventory inventory) {
        LOGGER.debug("Creating a new Inventory with information: {}", inventory);
        Inventory inventoryCreated = this.wmGenericDao.create(inventory);
        return inventoryCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Inventory getById(String inventoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding Inventory by id: {}", inventoryId);
        Inventory inventory = this.wmGenericDao.findById(inventoryId);
        if (inventory == null){
            LOGGER.debug("No Inventory found with id: {}", inventoryId);
            throw new EntityNotFoundException(String.valueOf(inventoryId));
        }
        return inventory;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Inventory findById(String inventoryId) {
        LOGGER.debug("Finding Inventory by id: {}", inventoryId);
        return this.wmGenericDao.findById(inventoryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Inventory update(Inventory inventory) throws EntityNotFoundException {
        LOGGER.debug("Updating Inventory with information: {}", inventory);
        this.wmGenericDao.update(inventory);

        String inventoryId = inventory.getPid();

        return this.wmGenericDao.findById(inventoryId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Inventory delete(String inventoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Inventory with id: {}", inventoryId);
        Inventory deleted = this.wmGenericDao.findById(inventoryId);
        if (deleted == null) {
            LOGGER.debug("No Inventory found with id: {}", inventoryId);
            throw new EntityNotFoundException(String.valueOf(inventoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Inventory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Inventories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Inventory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Inventories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Inventory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

