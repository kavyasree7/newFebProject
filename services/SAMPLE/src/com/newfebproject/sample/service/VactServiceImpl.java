/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vact;
import com.newfebproject.sample.VactId;


/**
 * ServiceImpl object for domain model class Vact.
 *
 * @see Vact
 */
@Service("SAMPLE.VactService")
public class VactServiceImpl implements VactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VactServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.VactDao")
    private WMGenericDao<Vact, VactId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vact, VactId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vact create(Vact vact) {
        LOGGER.debug("Creating a new Vact with information: {}", vact);
        Vact vactCreated = this.wmGenericDao.create(vact);
        return vactCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vact getById(VactId vactId) throws EntityNotFoundException {
        LOGGER.debug("Finding Vact by id: {}", vactId);
        Vact vact = this.wmGenericDao.findById(vactId);
        if (vact == null){
            LOGGER.debug("No Vact found with id: {}", vactId);
            throw new EntityNotFoundException(String.valueOf(vactId));
        }
        return vact;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vact findById(VactId vactId) {
        LOGGER.debug("Finding Vact by id: {}", vactId);
        return this.wmGenericDao.findById(vactId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vact update(Vact vact) throws EntityNotFoundException {
        LOGGER.debug("Updating Vact with information: {}", vact);
        this.wmGenericDao.update(vact);

        VactId vactId = new VactId();
        vactId.setActno(vact.getActno());
        vactId.setActkwd(vact.getActkwd());
        vactId.setActdesc(vact.getActdesc());

        return this.wmGenericDao.findById(vactId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vact delete(VactId vactId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vact with id: {}", vactId);
        Vact deleted = this.wmGenericDao.findById(vactId);
        if (deleted == null) {
            LOGGER.debug("No Vact found with id: {}", vactId);
            throw new EntityNotFoundException(String.valueOf(vactId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

