/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vdept;
import com.newfebproject.sample.VdeptId;


/**
 * ServiceImpl object for domain model class Vdept.
 *
 * @see Vdept
 */
@Service("SAMPLE.VdeptService")
public class VdeptServiceImpl implements VdeptService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VdeptServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.VdeptDao")
    private WMGenericDao<Vdept, VdeptId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vdept, VdeptId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vdept create(Vdept vdept) {
        LOGGER.debug("Creating a new Vdept with information: {}", vdept);
        Vdept vdeptCreated = this.wmGenericDao.create(vdept);
        return vdeptCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vdept getById(VdeptId vdeptId) throws EntityNotFoundException {
        LOGGER.debug("Finding Vdept by id: {}", vdeptId);
        Vdept vdept = this.wmGenericDao.findById(vdeptId);
        if (vdept == null){
            LOGGER.debug("No Vdept found with id: {}", vdeptId);
            throw new EntityNotFoundException(String.valueOf(vdeptId));
        }
        return vdept;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vdept findById(VdeptId vdeptId) {
        LOGGER.debug("Finding Vdept by id: {}", vdeptId);
        return this.wmGenericDao.findById(vdeptId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vdept update(Vdept vdept) throws EntityNotFoundException {
        LOGGER.debug("Updating Vdept with information: {}", vdept);
        this.wmGenericDao.update(vdept);

        VdeptId vdeptId = new VdeptId();
        vdeptId.setDeptno(vdept.getDeptno());
        vdeptId.setDeptname(vdept.getDeptname());
        vdeptId.setMgrno(vdept.getMgrno());
        vdeptId.setAdmrdept(vdept.getAdmrdept());

        return this.wmGenericDao.findById(vdeptId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vdept delete(VdeptId vdeptId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vdept with id: {}", vdeptId);
        Vdept deleted = this.wmGenericDao.findById(vdeptId);
        if (deleted == null) {
            LOGGER.debug("No Vdept found with id: {}", vdeptId);
            throw new EntityNotFoundException(String.valueOf(vdeptId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vdept> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vdepts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vdept> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vdepts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vdept to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

