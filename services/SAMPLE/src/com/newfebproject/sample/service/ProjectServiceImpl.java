/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Projact;
import com.newfebproject.sample.Project;


/**
 * ServiceImpl object for domain model class Project.
 *
 * @see Project
 */
@Service("SAMPLE.ProjectService")
public class ProjectServiceImpl implements ProjectService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectServiceImpl.class);

    @Autowired
	@Qualifier("SAMPLE.ProjactService")
	private ProjactService projactService;

    @Autowired
    @Qualifier("SAMPLE.ProjectDao")
    private WMGenericDao<Project, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Project, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Project create(Project project) {
        LOGGER.debug("Creating a new Project with information: {}", project);
        Project projectCreated = this.wmGenericDao.create(project);
        if(projectCreated.getProjacts() != null) {
            for(Projact projact : projectCreated.getProjacts()) {
                projact.setProject(projectCreated);
                LOGGER.debug("Creating a new child Projact with information: {}", projact);
                projactService.create(projact);
            }
        }

        if(projectCreated.getProjectsForMajproj() != null) {
            for(Project projectsForMajproj : projectCreated.getProjectsForMajproj()) {
                projectsForMajproj.setProjectByMajproj(projectCreated);
                LOGGER.debug("Creating a new child Project with information: {}", projectsForMajproj);
                create(projectsForMajproj);
            }
        }
        return projectCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Project getById(String projectId) throws EntityNotFoundException {
        LOGGER.debug("Finding Project by id: {}", projectId);
        Project project = this.wmGenericDao.findById(projectId);
        if (project == null){
            LOGGER.debug("No Project found with id: {}", projectId);
            throw new EntityNotFoundException(String.valueOf(projectId));
        }
        return project;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Project findById(String projectId) {
        LOGGER.debug("Finding Project by id: {}", projectId);
        return this.wmGenericDao.findById(projectId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Project update(Project project) throws EntityNotFoundException {
        LOGGER.debug("Updating Project with information: {}", project);
        this.wmGenericDao.update(project);

        String projectId = project.getProjno();

        return this.wmGenericDao.findById(projectId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Project delete(String projectId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Project with id: {}", projectId);
        Project deleted = this.wmGenericDao.findById(projectId);
        if (deleted == null) {
            LOGGER.debug("No Project found with id: {}", projectId);
            throw new EntityNotFoundException(String.valueOf(projectId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Project> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Projects");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Project> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Projects");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Project to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Projact> findAssociatedProjacts(String projno, Pageable pageable) {
        LOGGER.debug("Fetching all associated projacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("project.projno = '" + projno + "'");

        return projactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Project> findAssociatedProjectsForMajproj(String projno, Pageable pageable) {
        LOGGER.debug("Fetching all associated projectsForMajproj");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("projectByMajproj.projno = '" + projno + "'");

        return findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProjactService instance
	 */
	protected void setProjactService(ProjactService service) {
        this.projactService = service;
    }

}

