/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vastrde1;
import com.newfebproject.sample.Vastrde1Id;


/**
 * ServiceImpl object for domain model class Vastrde1.
 *
 * @see Vastrde1
 */
@Service("SAMPLE.Vastrde1Service")
public class Vastrde1ServiceImpl implements Vastrde1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vastrde1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.Vastrde1Dao")
    private WMGenericDao<Vastrde1, Vastrde1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vastrde1, Vastrde1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vastrde1 create(Vastrde1 vastrde1) {
        LOGGER.debug("Creating a new Vastrde1 with information: {}", vastrde1);
        Vastrde1 vastrde1Created = this.wmGenericDao.create(vastrde1);
        return vastrde1Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vastrde1 getById(Vastrde1Id vastrde1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Vastrde1 by id: {}", vastrde1Id);
        Vastrde1 vastrde1 = this.wmGenericDao.findById(vastrde1Id);
        if (vastrde1 == null){
            LOGGER.debug("No Vastrde1 found with id: {}", vastrde1Id);
            throw new EntityNotFoundException(String.valueOf(vastrde1Id));
        }
        return vastrde1;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vastrde1 findById(Vastrde1Id vastrde1Id) {
        LOGGER.debug("Finding Vastrde1 by id: {}", vastrde1Id);
        return this.wmGenericDao.findById(vastrde1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vastrde1 update(Vastrde1 vastrde1) throws EntityNotFoundException {
        LOGGER.debug("Updating Vastrde1 with information: {}", vastrde1);
        this.wmGenericDao.update(vastrde1);

        Vastrde1Id vastrde1Id = new Vastrde1Id();
        vastrde1Id.setDept1no(vastrde1.getDept1no());
        vastrde1Id.setDept1nam(vastrde1.getDept1nam());
        vastrde1Id.setEmp1no(vastrde1.getEmp1no());
        vastrde1Id.setEmp1fn(vastrde1.getEmp1fn());
        vastrde1Id.setEmp1mi(vastrde1.getEmp1mi());
        vastrde1Id.setEmp1ln(vastrde1.getEmp1ln());
        vastrde1Id.setType2(vastrde1.getType2());
        vastrde1Id.setDept2no(vastrde1.getDept2no());
        vastrde1Id.setDept2nam(vastrde1.getDept2nam());
        vastrde1Id.setEmp2no(vastrde1.getEmp2no());
        vastrde1Id.setEmp2fn(vastrde1.getEmp2fn());
        vastrde1Id.setEmp2mi(vastrde1.getEmp2mi());
        vastrde1Id.setEmp2ln(vastrde1.getEmp2ln());

        return this.wmGenericDao.findById(vastrde1Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vastrde1 delete(Vastrde1Id vastrde1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vastrde1 with id: {}", vastrde1Id);
        Vastrde1 deleted = this.wmGenericDao.findById(vastrde1Id);
        if (deleted == null) {
            LOGGER.debug("No Vastrde1 found with id: {}", vastrde1Id);
            throw new EntityNotFoundException(String.valueOf(vastrde1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vastrde1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vastrde1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vastrde1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vastrde1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vastrde1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

