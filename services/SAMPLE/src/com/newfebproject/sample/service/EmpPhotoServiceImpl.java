/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.EmpPhoto;
import com.newfebproject.sample.EmpPhotoId;


/**
 * ServiceImpl object for domain model class EmpPhoto.
 *
 * @see EmpPhoto
 */
@Service("SAMPLE.EmpPhotoService")
public class EmpPhotoServiceImpl implements EmpPhotoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpPhotoServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.EmpPhotoDao")
    private WMGenericDao<EmpPhoto, EmpPhotoId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmpPhoto, EmpPhotoId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public EmpPhoto create(EmpPhoto empPhoto) {
        LOGGER.debug("Creating a new EmpPhoto with information: {}", empPhoto);
        EmpPhoto empPhotoCreated = this.wmGenericDao.create(empPhoto);
        return empPhotoCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public EmpPhoto getById(EmpPhotoId empphotoId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmpPhoto by id: {}", empphotoId);
        EmpPhoto empPhoto = this.wmGenericDao.findById(empphotoId);
        if (empPhoto == null){
            LOGGER.debug("No EmpPhoto found with id: {}", empphotoId);
            throw new EntityNotFoundException(String.valueOf(empphotoId));
        }
        return empPhoto;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public EmpPhoto findById(EmpPhotoId empphotoId) {
        LOGGER.debug("Finding EmpPhoto by id: {}", empphotoId);
        return this.wmGenericDao.findById(empphotoId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public EmpPhoto update(EmpPhoto empPhoto) throws EntityNotFoundException {
        LOGGER.debug("Updating EmpPhoto with information: {}", empPhoto);
        this.wmGenericDao.update(empPhoto);

        EmpPhotoId empphotoId = new EmpPhotoId();
        empphotoId.setEmpno(empPhoto.getEmpno());
        empphotoId.setPhotoFormat(empPhoto.getPhotoFormat());

        return this.wmGenericDao.findById(empphotoId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public EmpPhoto delete(EmpPhotoId empphotoId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmpPhoto with id: {}", empphotoId);
        EmpPhoto deleted = this.wmGenericDao.findById(empphotoId);
        if (deleted == null) {
            LOGGER.debug("No EmpPhoto found with id: {}", empphotoId);
            throw new EntityNotFoundException(String.valueOf(empphotoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<EmpPhoto> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpPhotos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<EmpPhoto> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpPhotos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table EmpPhoto to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

