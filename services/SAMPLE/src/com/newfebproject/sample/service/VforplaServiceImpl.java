/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Vforpla;
import com.newfebproject.sample.VforplaId;


/**
 * ServiceImpl object for domain model class Vforpla.
 *
 * @see Vforpla
 */
@Service("SAMPLE.VforplaService")
public class VforplaServiceImpl implements VforplaService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VforplaServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.VforplaDao")
    private WMGenericDao<Vforpla, VforplaId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vforpla, VforplaId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Vforpla create(Vforpla vforpla) {
        LOGGER.debug("Creating a new Vforpla with information: {}", vforpla);
        Vforpla vforplaCreated = this.wmGenericDao.create(vforpla);
        return vforplaCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vforpla getById(VforplaId vforplaId) throws EntityNotFoundException {
        LOGGER.debug("Finding Vforpla by id: {}", vforplaId);
        Vforpla vforpla = this.wmGenericDao.findById(vforplaId);
        if (vforpla == null){
            LOGGER.debug("No Vforpla found with id: {}", vforplaId);
            throw new EntityNotFoundException(String.valueOf(vforplaId));
        }
        return vforpla;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Vforpla findById(VforplaId vforplaId) {
        LOGGER.debug("Finding Vforpla by id: {}", vforplaId);
        return this.wmGenericDao.findById(vforplaId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Vforpla update(Vforpla vforpla) throws EntityNotFoundException {
        LOGGER.debug("Updating Vforpla with information: {}", vforpla);
        this.wmGenericDao.update(vforpla);

        VforplaId vforplaId = new VforplaId();
        vforplaId.setProjno(vforpla.getProjno());
        vforplaId.setProjname(vforpla.getProjname());
        vforplaId.setRespemp(vforpla.getRespemp());
        vforplaId.setProjdep(vforpla.getProjdep());
        vforplaId.setFrstinit(vforpla.getFrstinit());
        vforplaId.setMidinit(vforpla.getMidinit());
        vforplaId.setLastname(vforpla.getLastname());

        return this.wmGenericDao.findById(vforplaId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Vforpla delete(VforplaId vforplaId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vforpla with id: {}", vforplaId);
        Vforpla deleted = this.wmGenericDao.findById(vforplaId);
        if (deleted == null) {
            LOGGER.debug("No Vforpla found with id: {}", vforplaId);
            throw new EntityNotFoundException(String.valueOf(vforplaId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Vforpla> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vforplas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Vforpla> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vforplas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Vforpla to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

