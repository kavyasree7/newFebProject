/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.newfebproject.sample.Org;
import com.newfebproject.sample.OrgId;

/**
 * Service object for domain model class {@link Org}.
 */
public interface OrgService {

    /**
     * Creates a new Org. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Org if any.
     *
     * @param org Details of the Org to be created; value cannot be null.
     * @return The newly created Org.
     */
	Org create(Org org);


	/**
	 * Returns Org by given id if exists.
	 *
	 * @param orgId The id of the Org to get; value cannot be null.
	 * @return Org associated with the given orgId.
     * @throws EntityNotFoundException If no Org is found.
	 */
	Org getById(OrgId orgId) throws EntityNotFoundException;

    /**
	 * Find and return the Org by given id if exists, returns null otherwise.
	 *
	 * @param orgId The id of the Org to get; value cannot be null.
	 * @return Org associated with the given orgId.
	 */
	Org findById(OrgId orgId);


	/**
	 * Updates the details of an existing Org. It replaces all fields of the existing Org with the given org.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Org if any.
     *
	 * @param org The details of the Org to be updated; value cannot be null.
	 * @return The updated Org.
	 * @throws EntityNotFoundException if no Org is found with given input.
	 */
	Org update(Org org) throws EntityNotFoundException;

    /**
	 * Deletes an existing Org with the given id.
	 *
	 * @param orgId The id of the Org to be deleted; value cannot be null.
	 * @return The deleted Org.
	 * @throws EntityNotFoundException if no Org found with the given id.
	 */
	Org delete(OrgId orgId) throws EntityNotFoundException;

	/**
	 * Find all Orgs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Orgs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Org> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Orgs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Orgs.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Org> findAll(String query, Pageable pageable);

    /**
	 * Exports all Orgs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Orgs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Org.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

