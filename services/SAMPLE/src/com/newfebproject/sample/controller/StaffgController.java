/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Staffg;
import com.newfebproject.sample.StaffgId;
import com.newfebproject.sample.service.StaffgService;


/**
 * Controller object for domain model class Staffg.
 * @see Staffg
 */
@RestController("SAMPLE.StaffgController")
@Api(value = "StaffgController", description = "Exposes APIs to work with Staffg resource.")
@RequestMapping("/SAMPLE/Staffg")
public class StaffgController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StaffgController.class);

    @Autowired
	@Qualifier("SAMPLE.StaffgService")
	private StaffgService staffgService;

	@ApiOperation(value = "Creates a new Staffg instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Staffg createStaffg(@RequestBody Staffg staffg) {
		LOGGER.debug("Create Staffg with information: {}" , staffg);

		staffg = staffgService.create(staffg);
		LOGGER.debug("Created Staffg with information: {}" , staffg);

	    return staffg;
	}

    @ApiOperation(value = "Returns the Staffg instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Staffg getStaffg(@RequestParam("id") Short id,@RequestParam("name") String name,@RequestParam("dept") Short dept,@RequestParam("job") String job,@RequestParam("years") Short years,@RequestParam("salary") Integer salary,@RequestParam("comm") Integer comm) throws EntityNotFoundException {

        StaffgId staffgId = new StaffgId();
        staffgId.setId(id);
        staffgId.setName(name);
        staffgId.setDept(dept);
        staffgId.setJob(job);
        staffgId.setYears(years);
        staffgId.setSalary(salary);
        staffgId.setComm(comm);

        LOGGER.debug("Getting Staffg with id: {}" , staffgId);
        Staffg staffg = staffgService.getById(staffgId);
        LOGGER.debug("Staffg details with id: {}" , staffg);

        return staffg;
    }



    @ApiOperation(value = "Updates the Staffg instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Staffg editStaffg(@RequestParam("id") Short id,@RequestParam("name") String name,@RequestParam("dept") Short dept,@RequestParam("job") String job,@RequestParam("years") Short years,@RequestParam("salary") Integer salary,@RequestParam("comm") Integer comm, @RequestBody Staffg staffg) throws EntityNotFoundException {

        staffg.setId(id);
        staffg.setName(name);
        staffg.setDept(dept);
        staffg.setJob(job);
        staffg.setYears(years);
        staffg.setSalary(salary);
        staffg.setComm(comm);

        LOGGER.debug("Staffg details with id is updated with: {}" , staffg);

        return staffgService.update(staffg);
    }


    @ApiOperation(value = "Deletes the Staffg instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStaffg(@RequestParam("id") Short id,@RequestParam("name") String name,@RequestParam("dept") Short dept,@RequestParam("job") String job,@RequestParam("years") Short years,@RequestParam("salary") Integer salary,@RequestParam("comm") Integer comm) throws EntityNotFoundException {

        StaffgId staffgId = new StaffgId();
        staffgId.setId(id);
        staffgId.setName(name);
        staffgId.setDept(dept);
        staffgId.setJob(job);
        staffgId.setYears(years);
        staffgId.setSalary(salary);
        staffgId.setComm(comm);

        LOGGER.debug("Deleting Staffg with id: {}" , staffgId);
        Staffg staffg = staffgService.delete(staffgId);

        return staffg != null;
    }


    /**
     * @deprecated Use {@link #findStaffgs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Staffg instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Staffg> searchStaffgsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Staffgs list");
        return staffgService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Staffg instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Staffg> findStaffgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Staffgs list");
        return staffgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Staffg instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Staffg> filterStaffgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Staffgs list");
        return staffgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStaffgs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return staffgService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Staffg instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countStaffgs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Staffgs");
		return staffgService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getStaffgAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return staffgService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StaffgService instance
	 */
	protected void setStaffgService(StaffgService service) {
		this.staffgService = service;
	}

}

