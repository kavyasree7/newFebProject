/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vstafac1;
import com.newfebproject.sample.Vstafac1Id;
import com.newfebproject.sample.service.Vstafac1Service;


/**
 * Controller object for domain model class Vstafac1.
 * @see Vstafac1
 */
@RestController("SAMPLE.Vstafac1Controller")
@Api(value = "Vstafac1Controller", description = "Exposes APIs to work with Vstafac1 resource.")
@RequestMapping("/SAMPLE/Vstafac1")
public class Vstafac1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vstafac1Controller.class);

    @Autowired
	@Qualifier("SAMPLE.Vstafac1Service")
	private Vstafac1Service vstafac1Service;

	@ApiOperation(value = "Creates a new Vstafac1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vstafac1 createVstafac1(@RequestBody Vstafac1 vstafac1) {
		LOGGER.debug("Create Vstafac1 with information: {}" , vstafac1);

		vstafac1 = vstafac1Service.create(vstafac1);
		LOGGER.debug("Created Vstafac1 with information: {}" , vstafac1);

	    return vstafac1;
	}

    @ApiOperation(value = "Returns the Vstafac1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vstafac1 getVstafac1(@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("actdesc") String actdesc,@RequestParam("empno") String empno,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("emptime") Float emptime,@RequestParam("stdate") Date stdate,@RequestParam("endate") Date endate,@RequestParam("type") String type) throws EntityNotFoundException {

        Vstafac1Id vstafac1Id = new Vstafac1Id();
        vstafac1Id.setProjno(projno);
        vstafac1Id.setActno(actno);
        vstafac1Id.setActdesc(actdesc);
        vstafac1Id.setEmpno(empno);
        vstafac1Id.setFirstnme(firstnme);
        vstafac1Id.setMidinit(midinit);
        vstafac1Id.setLastname(lastname);
        vstafac1Id.setEmptime(emptime);
        vstafac1Id.setStdate(stdate);
        vstafac1Id.setEndate(endate);
        vstafac1Id.setType(type);

        LOGGER.debug("Getting Vstafac1 with id: {}" , vstafac1Id);
        Vstafac1 vstafac1 = vstafac1Service.getById(vstafac1Id);
        LOGGER.debug("Vstafac1 details with id: {}" , vstafac1);

        return vstafac1;
    }



    @ApiOperation(value = "Updates the Vstafac1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vstafac1 editVstafac1(@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("actdesc") String actdesc,@RequestParam("empno") String empno,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("emptime") Float emptime,@RequestParam("stdate") Date stdate,@RequestParam("endate") Date endate,@RequestParam("type") String type, @RequestBody Vstafac1 vstafac1) throws EntityNotFoundException {

        vstafac1.setProjno(projno);
        vstafac1.setActno(actno);
        vstafac1.setActdesc(actdesc);
        vstafac1.setEmpno(empno);
        vstafac1.setFirstnme(firstnme);
        vstafac1.setMidinit(midinit);
        vstafac1.setLastname(lastname);
        vstafac1.setEmptime(emptime);
        vstafac1.setStdate(stdate);
        vstafac1.setEndate(endate);
        vstafac1.setType(type);

        LOGGER.debug("Vstafac1 details with id is updated with: {}" , vstafac1);

        return vstafac1Service.update(vstafac1);
    }


    @ApiOperation(value = "Deletes the Vstafac1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVstafac1(@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("actdesc") String actdesc,@RequestParam("empno") String empno,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("emptime") Float emptime,@RequestParam("stdate") Date stdate,@RequestParam("endate") Date endate,@RequestParam("type") String type) throws EntityNotFoundException {

        Vstafac1Id vstafac1Id = new Vstafac1Id();
        vstafac1Id.setProjno(projno);
        vstafac1Id.setActno(actno);
        vstafac1Id.setActdesc(actdesc);
        vstafac1Id.setEmpno(empno);
        vstafac1Id.setFirstnme(firstnme);
        vstafac1Id.setMidinit(midinit);
        vstafac1Id.setLastname(lastname);
        vstafac1Id.setEmptime(emptime);
        vstafac1Id.setStdate(stdate);
        vstafac1Id.setEndate(endate);
        vstafac1Id.setType(type);

        LOGGER.debug("Deleting Vstafac1 with id: {}" , vstafac1Id);
        Vstafac1 vstafac1 = vstafac1Service.delete(vstafac1Id);

        return vstafac1 != null;
    }


    /**
     * @deprecated Use {@link #findVstafac1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vstafac1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vstafac1> searchVstafac1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vstafac1s list");
        return vstafac1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vstafac1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vstafac1> findVstafac1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vstafac1s list");
        return vstafac1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vstafac1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vstafac1> filterVstafac1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vstafac1s list");
        return vstafac1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVstafac1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vstafac1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vstafac1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVstafac1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vstafac1s");
		return vstafac1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVstafac1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vstafac1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Vstafac1Service instance
	 */
	protected void setVstafac1Service(Vstafac1Service service) {
		this.vstafac1Service = service;
	}

}

