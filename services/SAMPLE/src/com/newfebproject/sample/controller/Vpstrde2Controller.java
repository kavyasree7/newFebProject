/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vpstrde2;
import com.newfebproject.sample.Vpstrde2Id;
import com.newfebproject.sample.service.Vpstrde2Service;


/**
 * Controller object for domain model class Vpstrde2.
 * @see Vpstrde2
 */
@RestController("SAMPLE.Vpstrde2Controller")
@Api(value = "Vpstrde2Controller", description = "Exposes APIs to work with Vpstrde2 resource.")
@RequestMapping("/SAMPLE/Vpstrde2")
public class Vpstrde2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vpstrde2Controller.class);

    @Autowired
	@Qualifier("SAMPLE.Vpstrde2Service")
	private Vpstrde2Service vpstrde2Service;

	@ApiOperation(value = "Creates a new Vpstrde2 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vpstrde2 createVpstrde2(@RequestBody Vpstrde2 vpstrde2) {
		LOGGER.debug("Create Vpstrde2 with information: {}" , vpstrde2);

		vpstrde2 = vpstrde2Service.create(vpstrde2);
		LOGGER.debug("Created Vpstrde2 with information: {}" , vpstrde2);

	    return vpstrde2;
	}

    @ApiOperation(value = "Returns the Vpstrde2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vpstrde2 getVpstrde2(@RequestParam("proj1no") String proj1no,@RequestParam("proj1name") String proj1name,@RequestParam("resp1no") String resp1no,@RequestParam("resp1fn") String resp1fn,@RequestParam("resp1mi") String resp1mi,@RequestParam("resp1ln") String resp1ln,@RequestParam("proj2no") String proj2no,@RequestParam("proj2name") String proj2name,@RequestParam("resp2no") String resp2no,@RequestParam("resp2fn") String resp2fn,@RequestParam("resp2mi") String resp2mi,@RequestParam("resp2ln") String resp2ln) throws EntityNotFoundException {

        Vpstrde2Id vpstrde2Id = new Vpstrde2Id();
        vpstrde2Id.setProj1no(proj1no);
        vpstrde2Id.setProj1name(proj1name);
        vpstrde2Id.setResp1no(resp1no);
        vpstrde2Id.setResp1fn(resp1fn);
        vpstrde2Id.setResp1mi(resp1mi);
        vpstrde2Id.setResp1ln(resp1ln);
        vpstrde2Id.setProj2no(proj2no);
        vpstrde2Id.setProj2name(proj2name);
        vpstrde2Id.setResp2no(resp2no);
        vpstrde2Id.setResp2fn(resp2fn);
        vpstrde2Id.setResp2mi(resp2mi);
        vpstrde2Id.setResp2ln(resp2ln);

        LOGGER.debug("Getting Vpstrde2 with id: {}" , vpstrde2Id);
        Vpstrde2 vpstrde2 = vpstrde2Service.getById(vpstrde2Id);
        LOGGER.debug("Vpstrde2 details with id: {}" , vpstrde2);

        return vpstrde2;
    }



    @ApiOperation(value = "Updates the Vpstrde2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vpstrde2 editVpstrde2(@RequestParam("proj1no") String proj1no,@RequestParam("proj1name") String proj1name,@RequestParam("resp1no") String resp1no,@RequestParam("resp1fn") String resp1fn,@RequestParam("resp1mi") String resp1mi,@RequestParam("resp1ln") String resp1ln,@RequestParam("proj2no") String proj2no,@RequestParam("proj2name") String proj2name,@RequestParam("resp2no") String resp2no,@RequestParam("resp2fn") String resp2fn,@RequestParam("resp2mi") String resp2mi,@RequestParam("resp2ln") String resp2ln, @RequestBody Vpstrde2 vpstrde2) throws EntityNotFoundException {

        vpstrde2.setProj1no(proj1no);
        vpstrde2.setProj1name(proj1name);
        vpstrde2.setResp1no(resp1no);
        vpstrde2.setResp1fn(resp1fn);
        vpstrde2.setResp1mi(resp1mi);
        vpstrde2.setResp1ln(resp1ln);
        vpstrde2.setProj2no(proj2no);
        vpstrde2.setProj2name(proj2name);
        vpstrde2.setResp2no(resp2no);
        vpstrde2.setResp2fn(resp2fn);
        vpstrde2.setResp2mi(resp2mi);
        vpstrde2.setResp2ln(resp2ln);

        LOGGER.debug("Vpstrde2 details with id is updated with: {}" , vpstrde2);

        return vpstrde2Service.update(vpstrde2);
    }


    @ApiOperation(value = "Deletes the Vpstrde2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVpstrde2(@RequestParam("proj1no") String proj1no,@RequestParam("proj1name") String proj1name,@RequestParam("resp1no") String resp1no,@RequestParam("resp1fn") String resp1fn,@RequestParam("resp1mi") String resp1mi,@RequestParam("resp1ln") String resp1ln,@RequestParam("proj2no") String proj2no,@RequestParam("proj2name") String proj2name,@RequestParam("resp2no") String resp2no,@RequestParam("resp2fn") String resp2fn,@RequestParam("resp2mi") String resp2mi,@RequestParam("resp2ln") String resp2ln) throws EntityNotFoundException {

        Vpstrde2Id vpstrde2Id = new Vpstrde2Id();
        vpstrde2Id.setProj1no(proj1no);
        vpstrde2Id.setProj1name(proj1name);
        vpstrde2Id.setResp1no(resp1no);
        vpstrde2Id.setResp1fn(resp1fn);
        vpstrde2Id.setResp1mi(resp1mi);
        vpstrde2Id.setResp1ln(resp1ln);
        vpstrde2Id.setProj2no(proj2no);
        vpstrde2Id.setProj2name(proj2name);
        vpstrde2Id.setResp2no(resp2no);
        vpstrde2Id.setResp2fn(resp2fn);
        vpstrde2Id.setResp2mi(resp2mi);
        vpstrde2Id.setResp2ln(resp2ln);

        LOGGER.debug("Deleting Vpstrde2 with id: {}" , vpstrde2Id);
        Vpstrde2 vpstrde2 = vpstrde2Service.delete(vpstrde2Id);

        return vpstrde2 != null;
    }


    /**
     * @deprecated Use {@link #findVpstrde2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vpstrde2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vpstrde2> searchVpstrde2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vpstrde2s list");
        return vpstrde2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vpstrde2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vpstrde2> findVpstrde2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vpstrde2s list");
        return vpstrde2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vpstrde2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vpstrde2> filterVpstrde2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vpstrde2s list");
        return vpstrde2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVpstrde2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vpstrde2Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vpstrde2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVpstrde2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vpstrde2s");
		return vpstrde2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVpstrde2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vpstrde2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Vpstrde2Service instance
	 */
	protected void setVpstrde2Service(Vpstrde2Service service) {
		this.vpstrde2Service = service;
	}

}

