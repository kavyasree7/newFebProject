/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vemplp;
import com.newfebproject.sample.VemplpId;
import com.newfebproject.sample.service.VemplpService;


/**
 * Controller object for domain model class Vemplp.
 * @see Vemplp
 */
@RestController("SAMPLE.VemplpController")
@Api(value = "VemplpController", description = "Exposes APIs to work with Vemplp resource.")
@RequestMapping("/SAMPLE/Vemplp")
public class VemplpController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VemplpController.class);

    @Autowired
	@Qualifier("SAMPLE.VemplpService")
	private VemplpService vemplpService;

	@ApiOperation(value = "Creates a new Vemplp instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vemplp createVemplp(@RequestBody Vemplp vemplp) {
		LOGGER.debug("Create Vemplp with information: {}" , vemplp);

		vemplp = vemplpService.create(vemplp);
		LOGGER.debug("Created Vemplp with information: {}" , vemplp);

	    return vemplp;
	}

    @ApiOperation(value = "Returns the Vemplp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemplp getVemplp(@RequestParam("employeenumber") String employeenumber,@RequestParam("phonenumber") String phonenumber) throws EntityNotFoundException {

        VemplpId vemplpId = new VemplpId();
        vemplpId.setEmployeenumber(employeenumber);
        vemplpId.setPhonenumber(phonenumber);

        LOGGER.debug("Getting Vemplp with id: {}" , vemplpId);
        Vemplp vemplp = vemplpService.getById(vemplpId);
        LOGGER.debug("Vemplp details with id: {}" , vemplp);

        return vemplp;
    }



    @ApiOperation(value = "Updates the Vemplp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemplp editVemplp(@RequestParam("employeenumber") String employeenumber,@RequestParam("phonenumber") String phonenumber, @RequestBody Vemplp vemplp) throws EntityNotFoundException {

        vemplp.setEmployeenumber(employeenumber);
        vemplp.setPhonenumber(phonenumber);

        LOGGER.debug("Vemplp details with id is updated with: {}" , vemplp);

        return vemplpService.update(vemplp);
    }


    @ApiOperation(value = "Deletes the Vemplp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVemplp(@RequestParam("employeenumber") String employeenumber,@RequestParam("phonenumber") String phonenumber) throws EntityNotFoundException {

        VemplpId vemplpId = new VemplpId();
        vemplpId.setEmployeenumber(employeenumber);
        vemplpId.setPhonenumber(phonenumber);

        LOGGER.debug("Deleting Vemplp with id: {}" , vemplpId);
        Vemplp vemplp = vemplpService.delete(vemplpId);

        return vemplp != null;
    }


    /**
     * @deprecated Use {@link #findVemplps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vemplp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vemplp> searchVemplpsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vemplps list");
        return vemplpService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vemplp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vemplp> findVemplps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vemplps list");
        return vemplpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vemplp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vemplp> filterVemplps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vemplps list");
        return vemplpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVemplps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vemplpService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vemplp instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVemplps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vemplps");
		return vemplpService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVemplpAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vemplpService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VemplpService instance
	 */
	protected void setVemplpService(VemplpService service) {
		this.vemplpService = service;
	}

}

