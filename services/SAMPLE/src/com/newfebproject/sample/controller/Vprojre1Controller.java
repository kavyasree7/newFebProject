/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vprojre1;
import com.newfebproject.sample.Vprojre1Id;
import com.newfebproject.sample.service.Vprojre1Service;


/**
 * Controller object for domain model class Vprojre1.
 * @see Vprojre1
 */
@RestController("SAMPLE.Vprojre1Controller")
@Api(value = "Vprojre1Controller", description = "Exposes APIs to work with Vprojre1 resource.")
@RequestMapping("/SAMPLE/Vprojre1")
public class Vprojre1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vprojre1Controller.class);

    @Autowired
	@Qualifier("SAMPLE.Vprojre1Service")
	private Vprojre1Service vprojre1Service;

	@ApiOperation(value = "Creates a new Vprojre1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vprojre1 createVprojre1(@RequestBody Vprojre1 vprojre1) {
		LOGGER.debug("Create Vprojre1 with information: {}" , vprojre1);

		vprojre1 = vprojre1Service.create(vprojre1);
		LOGGER.debug("Created Vprojre1 with information: {}" , vprojre1);

	    return vprojre1;
	}

    @ApiOperation(value = "Returns the Vprojre1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vprojre1 getVprojre1(@RequestParam("projno") String projno,@RequestParam("projname") String projname,@RequestParam("projdep") String projdep,@RequestParam("respemp") String respemp,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("majproj") String majproj) throws EntityNotFoundException {

        Vprojre1Id vprojre1Id = new Vprojre1Id();
        vprojre1Id.setProjno(projno);
        vprojre1Id.setProjname(projname);
        vprojre1Id.setProjdep(projdep);
        vprojre1Id.setRespemp(respemp);
        vprojre1Id.setFirstnme(firstnme);
        vprojre1Id.setMidinit(midinit);
        vprojre1Id.setLastname(lastname);
        vprojre1Id.setMajproj(majproj);

        LOGGER.debug("Getting Vprojre1 with id: {}" , vprojre1Id);
        Vprojre1 vprojre1 = vprojre1Service.getById(vprojre1Id);
        LOGGER.debug("Vprojre1 details with id: {}" , vprojre1);

        return vprojre1;
    }



    @ApiOperation(value = "Updates the Vprojre1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vprojre1 editVprojre1(@RequestParam("projno") String projno,@RequestParam("projname") String projname,@RequestParam("projdep") String projdep,@RequestParam("respemp") String respemp,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("majproj") String majproj, @RequestBody Vprojre1 vprojre1) throws EntityNotFoundException {

        vprojre1.setProjno(projno);
        vprojre1.setProjname(projname);
        vprojre1.setProjdep(projdep);
        vprojre1.setRespemp(respemp);
        vprojre1.setFirstnme(firstnme);
        vprojre1.setMidinit(midinit);
        vprojre1.setLastname(lastname);
        vprojre1.setMajproj(majproj);

        LOGGER.debug("Vprojre1 details with id is updated with: {}" , vprojre1);

        return vprojre1Service.update(vprojre1);
    }


    @ApiOperation(value = "Deletes the Vprojre1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVprojre1(@RequestParam("projno") String projno,@RequestParam("projname") String projname,@RequestParam("projdep") String projdep,@RequestParam("respemp") String respemp,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("majproj") String majproj) throws EntityNotFoundException {

        Vprojre1Id vprojre1Id = new Vprojre1Id();
        vprojre1Id.setProjno(projno);
        vprojre1Id.setProjname(projname);
        vprojre1Id.setProjdep(projdep);
        vprojre1Id.setRespemp(respemp);
        vprojre1Id.setFirstnme(firstnme);
        vprojre1Id.setMidinit(midinit);
        vprojre1Id.setLastname(lastname);
        vprojre1Id.setMajproj(majproj);

        LOGGER.debug("Deleting Vprojre1 with id: {}" , vprojre1Id);
        Vprojre1 vprojre1 = vprojre1Service.delete(vprojre1Id);

        return vprojre1 != null;
    }


    /**
     * @deprecated Use {@link #findVprojre1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vprojre1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vprojre1> searchVprojre1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vprojre1s list");
        return vprojre1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vprojre1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vprojre1> findVprojre1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vprojre1s list");
        return vprojre1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vprojre1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vprojre1> filterVprojre1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vprojre1s list");
        return vprojre1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVprojre1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vprojre1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vprojre1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVprojre1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vprojre1s");
		return vprojre1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVprojre1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vprojre1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Vprojre1Service instance
	 */
	protected void setVprojre1Service(Vprojre1Service service) {
		this.vprojre1Service = service;
	}

}

