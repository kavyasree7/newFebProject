/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Suppliers;
import com.newfebproject.sample.service.SuppliersService;


/**
 * Controller object for domain model class Suppliers.
 * @see Suppliers
 */
@RestController("SAMPLE.SuppliersController")
@Api(value = "SuppliersController", description = "Exposes APIs to work with Suppliers resource.")
@RequestMapping("/SAMPLE/Suppliers")
public class SuppliersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SuppliersController.class);

    @Autowired
	@Qualifier("SAMPLE.SuppliersService")
	private SuppliersService suppliersService;

	@ApiOperation(value = "Creates a new Suppliers instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Suppliers createSuppliers(@RequestBody Suppliers suppliers) {
		LOGGER.debug("Create Suppliers with information: {}" , suppliers);

		suppliers = suppliersService.create(suppliers);
		LOGGER.debug("Created Suppliers with information: {}" , suppliers);

	    return suppliers;
	}

	@ApiOperation(value = "Creates a new Suppliers instance.This API should be used when the Suppliers instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Suppliers createSuppliers(MultipartHttpServletRequest multipartHttpServletRequest) {
    	Suppliers suppliers = WMMultipartUtils.toObject(multipartHttpServletRequest, Suppliers.class, "SAMPLE"); 
        LOGGER.debug("Creating a new Suppliers with information: {}" , suppliers);
        return suppliersService.create(suppliers);
    }


    @ApiOperation(value = "Returns the Suppliers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Suppliers getSuppliers(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Suppliers with id: {}" , id);

        Suppliers foundSuppliers = suppliersService.getById(id);
        LOGGER.debug("Suppliers details with id: {}" , foundSuppliers);

        return foundSuppliers;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Suppliers instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getSuppliersBLOBContent(@PathVariable("id") String id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Suppliers instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Suppliers.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Suppliers suppliers = suppliersService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(suppliers, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Suppliers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Suppliers editSuppliers(@PathVariable("id") String id, @RequestBody Suppliers suppliers) throws EntityNotFoundException {
        LOGGER.debug("Editing Suppliers with id: {}" , suppliers.getSid());

        suppliers.setSid(id);
        suppliers = suppliersService.update(suppliers);
        LOGGER.debug("Suppliers details with id: {}" , suppliers);

        return suppliers;
    }

    @ApiOperation(value = "Updates the Suppliers instance associated with the given id.This API should be used when Suppliers instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Suppliers editSuppliers(@PathVariable("id") String id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        Suppliers newSuppliers = WMMultipartUtils.toObject(multipartHttpServletRequest, Suppliers.class, "SAMPLE");
        newSuppliers.setSid(id);

        Suppliers oldSuppliers = suppliersService.getById(id);
        WMMultipartUtils.updateLobsContent(oldSuppliers, newSuppliers);
        LOGGER.debug("Updating Suppliers with information: {}" , newSuppliers);

        return suppliersService.update(newSuppliers);
    }

    @ApiOperation(value = "Deletes the Suppliers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSuppliers(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Suppliers with id: {}" , id);

        Suppliers deletedSuppliers = suppliersService.delete(id);

        return deletedSuppliers != null;
    }

    /**
     * @deprecated Use {@link #findSuppliers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Suppliers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Suppliers> searchSuppliersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Suppliers list");
        return suppliersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Suppliers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Suppliers> findSuppliers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Suppliers list");
        return suppliersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Suppliers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Suppliers> filterSuppliers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Suppliers list");
        return suppliersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSuppliers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return suppliersService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Suppliers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSuppliers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Suppliers");
		return suppliersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSuppliersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return suppliersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SuppliersService instance
	 */
	protected void setSuppliersService(SuppliersService service) {
		this.suppliersService = service;
	}

}

