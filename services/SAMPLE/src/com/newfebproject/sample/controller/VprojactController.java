/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vprojact;
import com.newfebproject.sample.VprojactId;
import com.newfebproject.sample.service.VprojactService;


/**
 * Controller object for domain model class Vprojact.
 * @see Vprojact
 */
@RestController("SAMPLE.VprojactController")
@Api(value = "VprojactController", description = "Exposes APIs to work with Vprojact resource.")
@RequestMapping("/SAMPLE/Vprojact")
public class VprojactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VprojactController.class);

    @Autowired
	@Qualifier("SAMPLE.VprojactService")
	private VprojactService vprojactService;

	@ApiOperation(value = "Creates a new Vprojact instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vprojact createVprojact(@RequestBody Vprojact vprojact) {
		LOGGER.debug("Create Vprojact with information: {}" , vprojact);

		vprojact = vprojactService.create(vprojact);
		LOGGER.debug("Created Vprojact with information: {}" , vprojact);

	    return vprojact;
	}

    @ApiOperation(value = "Returns the Vprojact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vprojact getVprojact(@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("acstaff") Float acstaff,@RequestParam("acstdate") Date acstdate,@RequestParam("acendate") Date acendate) throws EntityNotFoundException {

        VprojactId vprojactId = new VprojactId();
        vprojactId.setProjno(projno);
        vprojactId.setActno(actno);
        vprojactId.setAcstaff(acstaff);
        vprojactId.setAcstdate(acstdate);
        vprojactId.setAcendate(acendate);

        LOGGER.debug("Getting Vprojact with id: {}" , vprojactId);
        Vprojact vprojact = vprojactService.getById(vprojactId);
        LOGGER.debug("Vprojact details with id: {}" , vprojact);

        return vprojact;
    }



    @ApiOperation(value = "Updates the Vprojact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vprojact editVprojact(@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("acstaff") Float acstaff,@RequestParam("acstdate") Date acstdate,@RequestParam("acendate") Date acendate, @RequestBody Vprojact vprojact) throws EntityNotFoundException {

        vprojact.setProjno(projno);
        vprojact.setActno(actno);
        vprojact.setAcstaff(acstaff);
        vprojact.setAcstdate(acstdate);
        vprojact.setAcendate(acendate);

        LOGGER.debug("Vprojact details with id is updated with: {}" , vprojact);

        return vprojactService.update(vprojact);
    }


    @ApiOperation(value = "Deletes the Vprojact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVprojact(@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("acstaff") Float acstaff,@RequestParam("acstdate") Date acstdate,@RequestParam("acendate") Date acendate) throws EntityNotFoundException {

        VprojactId vprojactId = new VprojactId();
        vprojactId.setProjno(projno);
        vprojactId.setActno(actno);
        vprojactId.setAcstaff(acstaff);
        vprojactId.setAcstdate(acstdate);
        vprojactId.setAcendate(acendate);

        LOGGER.debug("Deleting Vprojact with id: {}" , vprojactId);
        Vprojact vprojact = vprojactService.delete(vprojactId);

        return vprojact != null;
    }


    /**
     * @deprecated Use {@link #findVprojacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vprojact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vprojact> searchVprojactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vprojacts list");
        return vprojactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vprojact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vprojact> findVprojacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vprojacts list");
        return vprojactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vprojact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vprojact> filterVprojacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vprojacts list");
        return vprojactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVprojacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vprojactService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vprojact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVprojacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vprojacts");
		return vprojactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVprojactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vprojactService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VprojactService instance
	 */
	protected void setVprojactService(VprojactService service) {
		this.vprojactService = service;
	}

}

