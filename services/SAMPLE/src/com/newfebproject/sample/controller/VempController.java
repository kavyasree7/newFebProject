/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vemp;
import com.newfebproject.sample.VempId;
import com.newfebproject.sample.service.VempService;


/**
 * Controller object for domain model class Vemp.
 * @see Vemp
 */
@RestController("SAMPLE.VempController")
@Api(value = "VempController", description = "Exposes APIs to work with Vemp resource.")
@RequestMapping("/SAMPLE/Vemp")
public class VempController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VempController.class);

    @Autowired
	@Qualifier("SAMPLE.VempService")
	private VempService vempService;

	@ApiOperation(value = "Creates a new Vemp instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vemp createVemp(@RequestBody Vemp vemp) {
		LOGGER.debug("Create Vemp with information: {}" , vemp);

		vemp = vempService.create(vemp);
		LOGGER.debug("Created Vemp with information: {}" , vemp);

	    return vemp;
	}

    @ApiOperation(value = "Returns the Vemp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemp getVemp(@RequestParam("empno") String empno,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("workdept") String workdept) throws EntityNotFoundException {

        VempId vempId = new VempId();
        vempId.setEmpno(empno);
        vempId.setFirstnme(firstnme);
        vempId.setMidinit(midinit);
        vempId.setLastname(lastname);
        vempId.setWorkdept(workdept);

        LOGGER.debug("Getting Vemp with id: {}" , vempId);
        Vemp vemp = vempService.getById(vempId);
        LOGGER.debug("Vemp details with id: {}" , vemp);

        return vemp;
    }



    @ApiOperation(value = "Updates the Vemp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemp editVemp(@RequestParam("empno") String empno,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("workdept") String workdept, @RequestBody Vemp vemp) throws EntityNotFoundException {

        vemp.setEmpno(empno);
        vemp.setFirstnme(firstnme);
        vemp.setMidinit(midinit);
        vemp.setLastname(lastname);
        vemp.setWorkdept(workdept);

        LOGGER.debug("Vemp details with id is updated with: {}" , vemp);

        return vempService.update(vemp);
    }


    @ApiOperation(value = "Deletes the Vemp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVemp(@RequestParam("empno") String empno,@RequestParam("firstnme") String firstnme,@RequestParam("midinit") String midinit,@RequestParam("lastname") String lastname,@RequestParam("workdept") String workdept) throws EntityNotFoundException {

        VempId vempId = new VempId();
        vempId.setEmpno(empno);
        vempId.setFirstnme(firstnme);
        vempId.setMidinit(midinit);
        vempId.setLastname(lastname);
        vempId.setWorkdept(workdept);

        LOGGER.debug("Deleting Vemp with id: {}" , vempId);
        Vemp vemp = vempService.delete(vempId);

        return vemp != null;
    }


    /**
     * @deprecated Use {@link #findVemps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vemp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vemp> searchVempsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vemps list");
        return vempService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vemp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vemp> findVemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vemps list");
        return vempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vemp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vemp> filterVemps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vemps list");
        return vempService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVemps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vempService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vemp instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVemps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vemps");
		return vempService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVempAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vempService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VempService instance
	 */
	protected void setVempService(VempService service) {
		this.vempService = service;
	}

}

