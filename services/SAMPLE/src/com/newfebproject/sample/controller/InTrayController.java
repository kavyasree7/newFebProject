/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.InTray;
import com.newfebproject.sample.InTrayId;
import com.newfebproject.sample.service.InTrayService;


/**
 * Controller object for domain model class InTray.
 * @see InTray
 */
@RestController("SAMPLE.InTrayController")
@Api(value = "InTrayController", description = "Exposes APIs to work with InTray resource.")
@RequestMapping("/SAMPLE/InTray")
public class InTrayController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InTrayController.class);

    @Autowired
	@Qualifier("SAMPLE.InTrayService")
	private InTrayService inTrayService;

	@ApiOperation(value = "Creates a new InTray instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public InTray createInTray(@RequestBody InTray inTray) {
		LOGGER.debug("Create InTray with information: {}" , inTray);

		inTray = inTrayService.create(inTray);
		LOGGER.debug("Created InTray with information: {}" , inTray);

	    return inTray;
	}

    @ApiOperation(value = "Returns the InTray instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InTray getInTray(@RequestParam("received") Timestamp received,@RequestParam("source") String source,@RequestParam("subject") String subject,@RequestParam("noteText") String noteText) throws EntityNotFoundException {

        InTrayId intrayId = new InTrayId();
        intrayId.setReceived(received);
        intrayId.setSource(source);
        intrayId.setSubject(subject);
        intrayId.setNoteText(noteText);

        LOGGER.debug("Getting InTray with id: {}" , intrayId);
        InTray inTray = inTrayService.getById(intrayId);
        LOGGER.debug("InTray details with id: {}" , inTray);

        return inTray;
    }



    @ApiOperation(value = "Updates the InTray instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InTray editInTray(@RequestParam("received") Timestamp received,@RequestParam("source") String source,@RequestParam("subject") String subject,@RequestParam("noteText") String noteText, @RequestBody InTray inTray) throws EntityNotFoundException {

        inTray.setReceived(received);
        inTray.setSource(source);
        inTray.setSubject(subject);
        inTray.setNoteText(noteText);

        LOGGER.debug("InTray details with id is updated with: {}" , inTray);

        return inTrayService.update(inTray);
    }


    @ApiOperation(value = "Deletes the InTray instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInTray(@RequestParam("received") Timestamp received,@RequestParam("source") String source,@RequestParam("subject") String subject,@RequestParam("noteText") String noteText) throws EntityNotFoundException {

        InTrayId intrayId = new InTrayId();
        intrayId.setReceived(received);
        intrayId.setSource(source);
        intrayId.setSubject(subject);
        intrayId.setNoteText(noteText);

        LOGGER.debug("Deleting InTray with id: {}" , intrayId);
        InTray inTray = inTrayService.delete(intrayId);

        return inTray != null;
    }


    /**
     * @deprecated Use {@link #findInTrays(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of InTray instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InTray> searchInTraysByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InTrays list");
        return inTrayService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InTray instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InTray> findInTrays(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InTrays list");
        return inTrayService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InTray instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InTray> filterInTrays(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InTrays list");
        return inTrayService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInTrays(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return inTrayService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of InTray instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInTrays( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting InTrays");
		return inTrayService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getInTrayAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return inTrayService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InTrayService instance
	 */
	protected void setInTrayService(InTrayService service) {
		this.inTrayService = service;
	}

}

