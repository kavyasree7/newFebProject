/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Inventory;
import com.newfebproject.sample.service.InventoryService;


/**
 * Controller object for domain model class Inventory.
 * @see Inventory
 */
@RestController("SAMPLE.InventoryController")
@Api(value = "InventoryController", description = "Exposes APIs to work with Inventory resource.")
@RequestMapping("/SAMPLE/Inventory")
public class InventoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InventoryController.class);

    @Autowired
	@Qualifier("SAMPLE.InventoryService")
	private InventoryService inventoryService;

	@ApiOperation(value = "Creates a new Inventory instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Inventory createInventory(@RequestBody Inventory inventory) {
		LOGGER.debug("Create Inventory with information: {}" , inventory);

		inventory = inventoryService.create(inventory);
		LOGGER.debug("Created Inventory with information: {}" , inventory);

	    return inventory;
	}


    @ApiOperation(value = "Returns the Inventory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Inventory getInventory(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Inventory with id: {}" , id);

        Inventory foundInventory = inventoryService.getById(id);
        LOGGER.debug("Inventory details with id: {}" , foundInventory);

        return foundInventory;
    }

    @ApiOperation(value = "Updates the Inventory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Inventory editInventory(@PathVariable("id") String id, @RequestBody Inventory inventory) throws EntityNotFoundException {
        LOGGER.debug("Editing Inventory with id: {}" , inventory.getPid());

        inventory.setPid(id);
        inventory = inventoryService.update(inventory);
        LOGGER.debug("Inventory details with id: {}" , inventory);

        return inventory;
    }

    @ApiOperation(value = "Deletes the Inventory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInventory(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Inventory with id: {}" , id);

        Inventory deletedInventory = inventoryService.delete(id);

        return deletedInventory != null;
    }

    /**
     * @deprecated Use {@link #findInventories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Inventory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Inventory> searchInventoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Inventories list");
        return inventoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Inventory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Inventory> findInventories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Inventories list");
        return inventoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Inventory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Inventory> filterInventories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Inventories list");
        return inventoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInventories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return inventoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Inventory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInventories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Inventories");
		return inventoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getInventoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return inventoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InventoryService instance
	 */
	protected void setInventoryService(InventoryService service) {
		this.inventoryService = service;
	}

}

