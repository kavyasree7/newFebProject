/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.EmpPhoto;
import com.newfebproject.sample.EmpPhotoId;
import com.newfebproject.sample.service.EmpPhotoService;


/**
 * Controller object for domain model class EmpPhoto.
 * @see EmpPhoto
 */
@RestController("SAMPLE.EmpPhotoController")
@Api(value = "EmpPhotoController", description = "Exposes APIs to work with EmpPhoto resource.")
@RequestMapping("/SAMPLE/EmpPhoto")
public class EmpPhotoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpPhotoController.class);

    @Autowired
	@Qualifier("SAMPLE.EmpPhotoService")
	private EmpPhotoService empPhotoService;

	@ApiOperation(value = "Creates a new EmpPhoto instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EmpPhoto createEmpPhoto(@RequestBody EmpPhoto empPhoto) {
		LOGGER.debug("Create EmpPhoto with information: {}" , empPhoto);

		empPhoto = empPhotoService.create(empPhoto);
		LOGGER.debug("Created EmpPhoto with information: {}" , empPhoto);

	    return empPhoto;
	}

	@ApiOperation(value = "Creates a new EmpPhoto instance.This API should be used when the EmpPhoto instance has fields that requires multipart data.")
	@RequestMapping(method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpPhoto createEmpPhoto(MultipartHttpServletRequest multipartHttpServletRequest) {
    	EmpPhoto empPhoto = WMMultipartUtils.toObject(multipartHttpServletRequest, EmpPhoto.class, "SAMPLE"); 
        LOGGER.debug("Creating a new EmpPhoto with information: {}" , empPhoto);
        return empPhotoService.create(empPhoto);
    }

    @ApiOperation(value = "Returns the EmpPhoto instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpPhoto getEmpPhoto(@RequestParam("empno") String empno,@RequestParam("photoFormat") String photoFormat) throws EntityNotFoundException {

        EmpPhotoId empphotoId = new EmpPhotoId();
        empphotoId.setEmpno(empno);
        empphotoId.setPhotoFormat(photoFormat);

        LOGGER.debug("Getting EmpPhoto with id: {}" , empphotoId);
        EmpPhoto empPhoto = empPhotoService.getById(empphotoId);
        LOGGER.debug("EmpPhoto details with id: {}" , empPhoto);

        return empPhoto;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in EmpPhoto instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getEmpPhotoBLOBContent(@RequestParam("empno") String empno,@RequestParam("photoFormat") String photoFormat, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws EntityNotFoundException {

        LOGGER.debug("Retrieves content for the given BLOB field {} in EmpPhoto instance" , fieldName);

        if(!WMRuntimeUtils.isLob(EmpPhoto.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        EmpPhotoId empphotoId = new EmpPhotoId();
        empphotoId.setEmpno(empno);
        empphotoId.setPhotoFormat(photoFormat);

        EmpPhoto empPhoto = empPhotoService.getById(empphotoId);
        WMMultipartUtils.buildHttpResponseForBlob(empPhoto, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the EmpPhoto instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpPhoto editEmpPhoto(@RequestParam("empno") String empno,@RequestParam("photoFormat") String photoFormat, @RequestBody EmpPhoto empPhoto) throws EntityNotFoundException {

        empPhoto.setEmpno(empno);
        empPhoto.setPhotoFormat(photoFormat);

        LOGGER.debug("EmpPhoto details with id is updated with: {}" , empPhoto);

        return empPhotoService.update(empPhoto);
    }

    @ApiOperation(value = "Updates the EmpPhoto instance associated with the given composite-id.This API should be used when EmpPhoto instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpPhoto editEmpPhoto(@RequestParam("empno") String empno,@RequestParam("photoFormat") String photoFormat, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        return this.editEmpPhotoAndMultiparts(empno, photoFormat, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the EmpPhoto instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpPhoto editEmpPhotoAndMultiparts(@RequestParam("empno") String empno,@RequestParam("photoFormat") String photoFormat, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException { 

        EmpPhotoId empphotoId = new EmpPhotoId();
        empphotoId.setEmpno(empno);
        empphotoId.setPhotoFormat(photoFormat);

        EmpPhoto newEmpPhoto = WMMultipartUtils.toObject(multipartHttpServletRequest, EmpPhoto.class, "SAMPLE");
        EmpPhoto oldEmpPhoto = empPhotoService.getById(empphotoId);

        WMMultipartUtils.updateLobsContent(oldEmpPhoto, newEmpPhoto);

        newEmpPhoto.setEmpno(empno);
        newEmpPhoto.setPhotoFormat(photoFormat);

        LOGGER.debug("EmpPhoto details with id is updated with: {}" , newEmpPhoto);

        return empPhotoService.update(newEmpPhoto);
    }


    @ApiOperation(value = "Deletes the EmpPhoto instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmpPhoto(@RequestParam("empno") String empno,@RequestParam("photoFormat") String photoFormat) throws EntityNotFoundException {

        EmpPhotoId empphotoId = new EmpPhotoId();
        empphotoId.setEmpno(empno);
        empphotoId.setPhotoFormat(photoFormat);

        LOGGER.debug("Deleting EmpPhoto with id: {}" , empphotoId);
        EmpPhoto empPhoto = empPhotoService.delete(empphotoId);

        return empPhoto != null;
    }


    /**
     * @deprecated Use {@link #findEmpPhotos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmpPhoto instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpPhoto> searchEmpPhotosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmpPhotos list");
        return empPhotoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpPhoto instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpPhoto> findEmpPhotos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpPhotos list");
        return empPhotoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpPhoto instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpPhoto> filterEmpPhotos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpPhotos list");
        return empPhotoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmpPhotos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return empPhotoService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EmpPhoto instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmpPhotos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmpPhotos");
		return empPhotoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmpPhotoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return empPhotoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmpPhotoService instance
	 */
	protected void setEmpPhotoService(EmpPhotoService service) {
		this.empPhotoService = service;
	}

}

