/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vempprojact;
import com.newfebproject.sample.VempprojactId;
import com.newfebproject.sample.service.VempprojactService;


/**
 * Controller object for domain model class Vempprojact.
 * @see Vempprojact
 */
@RestController("SAMPLE.VempprojactController")
@Api(value = "VempprojactController", description = "Exposes APIs to work with Vempprojact resource.")
@RequestMapping("/SAMPLE/Vempprojact")
public class VempprojactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VempprojactController.class);

    @Autowired
	@Qualifier("SAMPLE.VempprojactService")
	private VempprojactService vempprojactService;

	@ApiOperation(value = "Creates a new Vempprojact instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vempprojact createVempprojact(@RequestBody Vempprojact vempprojact) {
		LOGGER.debug("Create Vempprojact with information: {}" , vempprojact);

		vempprojact = vempprojactService.create(vempprojact);
		LOGGER.debug("Created Vempprojact with information: {}" , vempprojact);

	    return vempprojact;
	}

    @ApiOperation(value = "Returns the Vempprojact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vempprojact getVempprojact(@RequestParam("empno") String empno,@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("emptime") Float emptime,@RequestParam("emstdate") Date emstdate,@RequestParam("emendate") Date emendate) throws EntityNotFoundException {

        VempprojactId vempprojactId = new VempprojactId();
        vempprojactId.setEmpno(empno);
        vempprojactId.setProjno(projno);
        vempprojactId.setActno(actno);
        vempprojactId.setEmptime(emptime);
        vempprojactId.setEmstdate(emstdate);
        vempprojactId.setEmendate(emendate);

        LOGGER.debug("Getting Vempprojact with id: {}" , vempprojactId);
        Vempprojact vempprojact = vempprojactService.getById(vempprojactId);
        LOGGER.debug("Vempprojact details with id: {}" , vempprojact);

        return vempprojact;
    }



    @ApiOperation(value = "Updates the Vempprojact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vempprojact editVempprojact(@RequestParam("empno") String empno,@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("emptime") Float emptime,@RequestParam("emstdate") Date emstdate,@RequestParam("emendate") Date emendate, @RequestBody Vempprojact vempprojact) throws EntityNotFoundException {

        vempprojact.setEmpno(empno);
        vempprojact.setProjno(projno);
        vempprojact.setActno(actno);
        vempprojact.setEmptime(emptime);
        vempprojact.setEmstdate(emstdate);
        vempprojact.setEmendate(emendate);

        LOGGER.debug("Vempprojact details with id is updated with: {}" , vempprojact);

        return vempprojactService.update(vempprojact);
    }


    @ApiOperation(value = "Deletes the Vempprojact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVempprojact(@RequestParam("empno") String empno,@RequestParam("projno") String projno,@RequestParam("actno") Short actno,@RequestParam("emptime") Float emptime,@RequestParam("emstdate") Date emstdate,@RequestParam("emendate") Date emendate) throws EntityNotFoundException {

        VempprojactId vempprojactId = new VempprojactId();
        vempprojactId.setEmpno(empno);
        vempprojactId.setProjno(projno);
        vempprojactId.setActno(actno);
        vempprojactId.setEmptime(emptime);
        vempprojactId.setEmstdate(emstdate);
        vempprojactId.setEmendate(emendate);

        LOGGER.debug("Deleting Vempprojact with id: {}" , vempprojactId);
        Vempprojact vempprojact = vempprojactService.delete(vempprojactId);

        return vempprojact != null;
    }


    /**
     * @deprecated Use {@link #findVempprojacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vempprojact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vempprojact> searchVempprojactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vempprojacts list");
        return vempprojactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vempprojact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vempprojact> findVempprojacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vempprojacts list");
        return vempprojactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vempprojact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vempprojact> filterVempprojacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vempprojacts list");
        return vempprojactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVempprojacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vempprojactService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vempprojact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVempprojacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vempprojacts");
		return vempprojactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVempprojactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vempprojactService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VempprojactService instance
	 */
	protected void setVempprojactService(VempprojactService service) {
		this.vempprojactService = service;
	}

}

