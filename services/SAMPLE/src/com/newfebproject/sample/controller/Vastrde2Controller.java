/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vastrde2;
import com.newfebproject.sample.Vastrde2Id;
import com.newfebproject.sample.service.Vastrde2Service;


/**
 * Controller object for domain model class Vastrde2.
 * @see Vastrde2
 */
@RestController("SAMPLE.Vastrde2Controller")
@Api(value = "Vastrde2Controller", description = "Exposes APIs to work with Vastrde2 resource.")
@RequestMapping("/SAMPLE/Vastrde2")
public class Vastrde2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vastrde2Controller.class);

    @Autowired
	@Qualifier("SAMPLE.Vastrde2Service")
	private Vastrde2Service vastrde2Service;

	@ApiOperation(value = "Creates a new Vastrde2 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vastrde2 createVastrde2(@RequestBody Vastrde2 vastrde2) {
		LOGGER.debug("Create Vastrde2 with information: {}" , vastrde2);

		vastrde2 = vastrde2Service.create(vastrde2);
		LOGGER.debug("Created Vastrde2 with information: {}" , vastrde2);

	    return vastrde2;
	}

    @ApiOperation(value = "Returns the Vastrde2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vastrde2 getVastrde2(@RequestParam("dept1no") String dept1no,@RequestParam("dept1nam") String dept1nam,@RequestParam("emp1no") String emp1no,@RequestParam("emp1fn") String emp1fn,@RequestParam("emp1mi") String emp1mi,@RequestParam("emp1ln") String emp1ln,@RequestParam("type2") String type2,@RequestParam("dept2no") String dept2no,@RequestParam("dept2nam") String dept2nam,@RequestParam("emp2no") String emp2no,@RequestParam("emp2fn") String emp2fn,@RequestParam("emp2mi") String emp2mi,@RequestParam("emp2ln") String emp2ln) throws EntityNotFoundException {

        Vastrde2Id vastrde2Id = new Vastrde2Id();
        vastrde2Id.setDept1no(dept1no);
        vastrde2Id.setDept1nam(dept1nam);
        vastrde2Id.setEmp1no(emp1no);
        vastrde2Id.setEmp1fn(emp1fn);
        vastrde2Id.setEmp1mi(emp1mi);
        vastrde2Id.setEmp1ln(emp1ln);
        vastrde2Id.setType2(type2);
        vastrde2Id.setDept2no(dept2no);
        vastrde2Id.setDept2nam(dept2nam);
        vastrde2Id.setEmp2no(emp2no);
        vastrde2Id.setEmp2fn(emp2fn);
        vastrde2Id.setEmp2mi(emp2mi);
        vastrde2Id.setEmp2ln(emp2ln);

        LOGGER.debug("Getting Vastrde2 with id: {}" , vastrde2Id);
        Vastrde2 vastrde2 = vastrde2Service.getById(vastrde2Id);
        LOGGER.debug("Vastrde2 details with id: {}" , vastrde2);

        return vastrde2;
    }



    @ApiOperation(value = "Updates the Vastrde2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vastrde2 editVastrde2(@RequestParam("dept1no") String dept1no,@RequestParam("dept1nam") String dept1nam,@RequestParam("emp1no") String emp1no,@RequestParam("emp1fn") String emp1fn,@RequestParam("emp1mi") String emp1mi,@RequestParam("emp1ln") String emp1ln,@RequestParam("type2") String type2,@RequestParam("dept2no") String dept2no,@RequestParam("dept2nam") String dept2nam,@RequestParam("emp2no") String emp2no,@RequestParam("emp2fn") String emp2fn,@RequestParam("emp2mi") String emp2mi,@RequestParam("emp2ln") String emp2ln, @RequestBody Vastrde2 vastrde2) throws EntityNotFoundException {

        vastrde2.setDept1no(dept1no);
        vastrde2.setDept1nam(dept1nam);
        vastrde2.setEmp1no(emp1no);
        vastrde2.setEmp1fn(emp1fn);
        vastrde2.setEmp1mi(emp1mi);
        vastrde2.setEmp1ln(emp1ln);
        vastrde2.setType2(type2);
        vastrde2.setDept2no(dept2no);
        vastrde2.setDept2nam(dept2nam);
        vastrde2.setEmp2no(emp2no);
        vastrde2.setEmp2fn(emp2fn);
        vastrde2.setEmp2mi(emp2mi);
        vastrde2.setEmp2ln(emp2ln);

        LOGGER.debug("Vastrde2 details with id is updated with: {}" , vastrde2);

        return vastrde2Service.update(vastrde2);
    }


    @ApiOperation(value = "Deletes the Vastrde2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVastrde2(@RequestParam("dept1no") String dept1no,@RequestParam("dept1nam") String dept1nam,@RequestParam("emp1no") String emp1no,@RequestParam("emp1fn") String emp1fn,@RequestParam("emp1mi") String emp1mi,@RequestParam("emp1ln") String emp1ln,@RequestParam("type2") String type2,@RequestParam("dept2no") String dept2no,@RequestParam("dept2nam") String dept2nam,@RequestParam("emp2no") String emp2no,@RequestParam("emp2fn") String emp2fn,@RequestParam("emp2mi") String emp2mi,@RequestParam("emp2ln") String emp2ln) throws EntityNotFoundException {

        Vastrde2Id vastrde2Id = new Vastrde2Id();
        vastrde2Id.setDept1no(dept1no);
        vastrde2Id.setDept1nam(dept1nam);
        vastrde2Id.setEmp1no(emp1no);
        vastrde2Id.setEmp1fn(emp1fn);
        vastrde2Id.setEmp1mi(emp1mi);
        vastrde2Id.setEmp1ln(emp1ln);
        vastrde2Id.setType2(type2);
        vastrde2Id.setDept2no(dept2no);
        vastrde2Id.setDept2nam(dept2nam);
        vastrde2Id.setEmp2no(emp2no);
        vastrde2Id.setEmp2fn(emp2fn);
        vastrde2Id.setEmp2mi(emp2mi);
        vastrde2Id.setEmp2ln(emp2ln);

        LOGGER.debug("Deleting Vastrde2 with id: {}" , vastrde2Id);
        Vastrde2 vastrde2 = vastrde2Service.delete(vastrde2Id);

        return vastrde2 != null;
    }


    /**
     * @deprecated Use {@link #findVastrde2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vastrde2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vastrde2> searchVastrde2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vastrde2s list");
        return vastrde2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vastrde2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vastrde2> findVastrde2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vastrde2s list");
        return vastrde2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vastrde2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vastrde2> filterVastrde2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vastrde2s list");
        return vastrde2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVastrde2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vastrde2Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vastrde2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVastrde2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vastrde2s");
		return vastrde2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVastrde2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vastrde2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Vastrde2Service instance
	 */
	protected void setVastrde2Service(Vastrde2Service service) {
		this.vastrde2Service = service;
	}

}

