/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.EmpResume;
import com.newfebproject.sample.EmpResumeId;
import com.newfebproject.sample.service.EmpResumeService;


/**
 * Controller object for domain model class EmpResume.
 * @see EmpResume
 */
@RestController("SAMPLE.EmpResumeController")
@Api(value = "EmpResumeController", description = "Exposes APIs to work with EmpResume resource.")
@RequestMapping("/SAMPLE/EmpResume")
public class EmpResumeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpResumeController.class);

    @Autowired
	@Qualifier("SAMPLE.EmpResumeService")
	private EmpResumeService empResumeService;

	@ApiOperation(value = "Creates a new EmpResume instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EmpResume createEmpResume(@RequestBody EmpResume empResume) {
		LOGGER.debug("Create EmpResume with information: {}" , empResume);

		empResume = empResumeService.create(empResume);
		LOGGER.debug("Created EmpResume with information: {}" , empResume);

	    return empResume;
	}

    @ApiOperation(value = "Returns the EmpResume instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpResume getEmpResume(@RequestParam("empno") String empno,@RequestParam("resumeFormat") String resumeFormat) throws EntityNotFoundException {

        EmpResumeId empresumeId = new EmpResumeId();
        empresumeId.setEmpno(empno);
        empresumeId.setResumeFormat(resumeFormat);

        LOGGER.debug("Getting EmpResume with id: {}" , empresumeId);
        EmpResume empResume = empResumeService.getById(empresumeId);
        LOGGER.debug("EmpResume details with id: {}" , empResume);

        return empResume;
    }



    @ApiOperation(value = "Updates the EmpResume instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpResume editEmpResume(@RequestParam("empno") String empno,@RequestParam("resumeFormat") String resumeFormat, @RequestBody EmpResume empResume) throws EntityNotFoundException {

        empResume.setEmpno(empno);
        empResume.setResumeFormat(resumeFormat);

        LOGGER.debug("EmpResume details with id is updated with: {}" , empResume);

        return empResumeService.update(empResume);
    }


    @ApiOperation(value = "Deletes the EmpResume instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmpResume(@RequestParam("empno") String empno,@RequestParam("resumeFormat") String resumeFormat) throws EntityNotFoundException {

        EmpResumeId empresumeId = new EmpResumeId();
        empresumeId.setEmpno(empno);
        empresumeId.setResumeFormat(resumeFormat);

        LOGGER.debug("Deleting EmpResume with id: {}" , empresumeId);
        EmpResume empResume = empResumeService.delete(empresumeId);

        return empResume != null;
    }


    /**
     * @deprecated Use {@link #findEmpResumes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmpResume instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpResume> searchEmpResumesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmpResumes list");
        return empResumeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpResume instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpResume> findEmpResumes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpResumes list");
        return empResumeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpResume instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpResume> filterEmpResumes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpResumes list");
        return empResumeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmpResumes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return empResumeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EmpResume instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmpResumes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmpResumes");
		return empResumeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmpResumeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return empResumeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmpResumeService instance
	 */
	protected void setEmpResumeService(EmpResumeService service) {
		this.empResumeService = service;
	}

}

