/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.newfebproject.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.newfebproject.sample.Vpstrde1;
import com.newfebproject.sample.Vpstrde1Id;
import com.newfebproject.sample.service.Vpstrde1Service;


/**
 * Controller object for domain model class Vpstrde1.
 * @see Vpstrde1
 */
@RestController("SAMPLE.Vpstrde1Controller")
@Api(value = "Vpstrde1Controller", description = "Exposes APIs to work with Vpstrde1 resource.")
@RequestMapping("/SAMPLE/Vpstrde1")
public class Vpstrde1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vpstrde1Controller.class);

    @Autowired
	@Qualifier("SAMPLE.Vpstrde1Service")
	private Vpstrde1Service vpstrde1Service;

	@ApiOperation(value = "Creates a new Vpstrde1 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Vpstrde1 createVpstrde1(@RequestBody Vpstrde1 vpstrde1) {
		LOGGER.debug("Create Vpstrde1 with information: {}" , vpstrde1);

		vpstrde1 = vpstrde1Service.create(vpstrde1);
		LOGGER.debug("Created Vpstrde1 with information: {}" , vpstrde1);

	    return vpstrde1;
	}

    @ApiOperation(value = "Returns the Vpstrde1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vpstrde1 getVpstrde1(@RequestParam("proj1no") String proj1no,@RequestParam("proj1name") String proj1name,@RequestParam("resp1no") String resp1no,@RequestParam("resp1fn") String resp1fn,@RequestParam("resp1mi") String resp1mi,@RequestParam("resp1ln") String resp1ln,@RequestParam("proj2no") String proj2no,@RequestParam("proj2name") String proj2name,@RequestParam("resp2no") String resp2no,@RequestParam("resp2fn") String resp2fn,@RequestParam("resp2mi") String resp2mi,@RequestParam("resp2ln") String resp2ln) throws EntityNotFoundException {

        Vpstrde1Id vpstrde1Id = new Vpstrde1Id();
        vpstrde1Id.setProj1no(proj1no);
        vpstrde1Id.setProj1name(proj1name);
        vpstrde1Id.setResp1no(resp1no);
        vpstrde1Id.setResp1fn(resp1fn);
        vpstrde1Id.setResp1mi(resp1mi);
        vpstrde1Id.setResp1ln(resp1ln);
        vpstrde1Id.setProj2no(proj2no);
        vpstrde1Id.setProj2name(proj2name);
        vpstrde1Id.setResp2no(resp2no);
        vpstrde1Id.setResp2fn(resp2fn);
        vpstrde1Id.setResp2mi(resp2mi);
        vpstrde1Id.setResp2ln(resp2ln);

        LOGGER.debug("Getting Vpstrde1 with id: {}" , vpstrde1Id);
        Vpstrde1 vpstrde1 = vpstrde1Service.getById(vpstrde1Id);
        LOGGER.debug("Vpstrde1 details with id: {}" , vpstrde1);

        return vpstrde1;
    }



    @ApiOperation(value = "Updates the Vpstrde1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vpstrde1 editVpstrde1(@RequestParam("proj1no") String proj1no,@RequestParam("proj1name") String proj1name,@RequestParam("resp1no") String resp1no,@RequestParam("resp1fn") String resp1fn,@RequestParam("resp1mi") String resp1mi,@RequestParam("resp1ln") String resp1ln,@RequestParam("proj2no") String proj2no,@RequestParam("proj2name") String proj2name,@RequestParam("resp2no") String resp2no,@RequestParam("resp2fn") String resp2fn,@RequestParam("resp2mi") String resp2mi,@RequestParam("resp2ln") String resp2ln, @RequestBody Vpstrde1 vpstrde1) throws EntityNotFoundException {

        vpstrde1.setProj1no(proj1no);
        vpstrde1.setProj1name(proj1name);
        vpstrde1.setResp1no(resp1no);
        vpstrde1.setResp1fn(resp1fn);
        vpstrde1.setResp1mi(resp1mi);
        vpstrde1.setResp1ln(resp1ln);
        vpstrde1.setProj2no(proj2no);
        vpstrde1.setProj2name(proj2name);
        vpstrde1.setResp2no(resp2no);
        vpstrde1.setResp2fn(resp2fn);
        vpstrde1.setResp2mi(resp2mi);
        vpstrde1.setResp2ln(resp2ln);

        LOGGER.debug("Vpstrde1 details with id is updated with: {}" , vpstrde1);

        return vpstrde1Service.update(vpstrde1);
    }


    @ApiOperation(value = "Deletes the Vpstrde1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVpstrde1(@RequestParam("proj1no") String proj1no,@RequestParam("proj1name") String proj1name,@RequestParam("resp1no") String resp1no,@RequestParam("resp1fn") String resp1fn,@RequestParam("resp1mi") String resp1mi,@RequestParam("resp1ln") String resp1ln,@RequestParam("proj2no") String proj2no,@RequestParam("proj2name") String proj2name,@RequestParam("resp2no") String resp2no,@RequestParam("resp2fn") String resp2fn,@RequestParam("resp2mi") String resp2mi,@RequestParam("resp2ln") String resp2ln) throws EntityNotFoundException {

        Vpstrde1Id vpstrde1Id = new Vpstrde1Id();
        vpstrde1Id.setProj1no(proj1no);
        vpstrde1Id.setProj1name(proj1name);
        vpstrde1Id.setResp1no(resp1no);
        vpstrde1Id.setResp1fn(resp1fn);
        vpstrde1Id.setResp1mi(resp1mi);
        vpstrde1Id.setResp1ln(resp1ln);
        vpstrde1Id.setProj2no(proj2no);
        vpstrde1Id.setProj2name(proj2name);
        vpstrde1Id.setResp2no(resp2no);
        vpstrde1Id.setResp2fn(resp2fn);
        vpstrde1Id.setResp2mi(resp2mi);
        vpstrde1Id.setResp2ln(resp2ln);

        LOGGER.debug("Deleting Vpstrde1 with id: {}" , vpstrde1Id);
        Vpstrde1 vpstrde1 = vpstrde1Service.delete(vpstrde1Id);

        return vpstrde1 != null;
    }


    /**
     * @deprecated Use {@link #findVpstrde1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vpstrde1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vpstrde1> searchVpstrde1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vpstrde1s list");
        return vpstrde1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vpstrde1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vpstrde1> findVpstrde1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vpstrde1s list");
        return vpstrde1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vpstrde1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vpstrde1> filterVpstrde1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vpstrde1s list");
        return vpstrde1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVpstrde1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vpstrde1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Vpstrde1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVpstrde1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vpstrde1s");
		return vpstrde1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVpstrde1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vpstrde1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Vpstrde1Service instance
	 */
	protected void setVpstrde1Service(Vpstrde1Service service) {
		this.vpstrde1Service = service;
	}

}

